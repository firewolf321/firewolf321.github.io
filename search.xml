<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[每日算法]关路灯</title>
      <link href="2021/04/11/mei-ri-suan-fa-guan-lu-deng/"/>
      <url>2021/04/11/mei-ri-suan-fa-guan-lu-deng/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>某一村庄在一条路线上安装了 <em>n</em> 盏路灯，每盏灯的功率有大有小（即同一段时间内消耗的电量有多有少）。老张就住在这条路中间某一路灯旁，他有一项工作就是每天早上天亮时一盏一盏地关掉这些路灯。</p><p>为了给村里节省电费，老张记录下了每盏路灯的位置和功率，他每次关灯时也都是尽快地去关，但是老张不知道怎样去关灯才能够最节省电。他每天都是在天亮时首先关掉自己所处位置的路灯，然后可以向左也可以向右去关灯。开始他以为先算一下左边路灯的总功率再算一下右边路灯的总功率，然后选择先关掉功率大的一边，再回过头来关掉另一边的路灯，而事实并非如此，因为在关的过程中适当地调头有可能会更省一些。</p><p>现在已知老张走的速度为 1m/s，每个路灯的位置（是一个整数，即距路线起点的距离，单位：<em>m</em>）、功率（<em>W</em>），老张关灯所用的时间很短而可以忽略不计。</p><p>请你为老张编一程序来安排关灯的顺序，使从老张开始关灯时刻算起所有灯消耗电最少（灯关掉后便不再消耗电了）。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是两个数字<em>n</em>（表示路灯的总数）和 <em>c</em>（老张所处位置的路灯号）；</p><p>接下来 <em>n</em> 行，每行两个数据，表示第 1 盏到第 <em>n</em> 盏路灯的位置和功率。数据保证路灯位置单调递增。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数据，即最少的功耗（单位：<em>J</em>，<em>1J</em>=1<em>W</em>×<em>s</em>）。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>5 3 <br />2 10 <br />3 20 <br />5 20 <br />6 30 <br />8 10</td><td>270</td></tr></tbody></table><p>此时关灯顺序为 <code>3 4 2 1 5</code>。</p><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>1≤n≤50,1≤c≤n。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这是个区间形的动态规划问题。老张起始位置的路灯可以被直接关闭，可以作为初始状态，即fx【c】【c】【0】 = 0，fx【c】【c】【1】 = 0;然后就可以进行填表，从每个时刻开始，都有向左和向右两种方案，那么这时候就需要采取功耗较低的方案，即状态转移方程为：</p><p>第一种情况是往左边走，根据状态转移方程获取消耗较小值fx【j】【k】【0】 = min(fx【j + 1】【k】【0】 + (lamps【j + 1】.pos - lamps【j】.pos) <em> (sum【j】 + sum【n】 - sum【k】),fx【j + 1】【k】【1】 + (lamps【k】.pos - lamps【j】.pos) </em> (sum【j】 + sum【n】 - sum【k】));</p><p>第二种情况为往右边走到尽头，根据耗散再次取最小值fx【j】【k】【1】 = min(fx【j】【k - 1】【0】 + (lamps【k】.pos - lamps【j】.pos) <em> (sum【j - 1】 + sum【n】 - sum【k - 1】), fx【j】【k - 1】【1】 + (lamps【k】.pos - lamps【k - 1】.pos) </em> (sum【j - 1】 + sum【n】 - sum【k - 1】));</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdio></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Lamp<span class="token punctuation">{</span>    <span class="token keyword">int</span> pos<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//位置</span>    <span class="token keyword">int</span> w<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//功率</span>    <span class="token function">Lamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Lamp</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> _w<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">pos</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">w</span><span class="token punctuation">(</span>_w<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//sum存的是关闭从0~i盏路灯的消耗值</span><span class="token keyword">int</span> fx<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fx[i][j][k]表示i~j盏路灯均被点亮，且当前处于k位置的最小功耗（k表示老张在左端点或者右端点）</span>Lamp lamps<span class="token punctuation">[</span><span class="token number">51</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//lamps存储每盏路灯的位置及功率</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> c<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//n为路灯总数，c为老张所处的路灯位置</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> p<span class="token punctuation">,</span> w<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//数据读入内存</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> p <span class="token operator">>></span> w<span class="token punctuation">;</span>        Lamp <span class="token function">node</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        lamps<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> node<span class="token punctuation">.</span>w<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//默认为顺序关闭</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始状态消耗均设置为10000(近似＋∞)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>k <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">++</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                fx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//老张起始位置的路灯可以被直接关闭，为初始状态</span>    fx<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    fx<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            k <span class="token operator">=</span> j <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一种情况，是往左边走，根据状态转移方程获取消耗较小值</span>            fx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>fx<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lamps<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">-</span> lamps<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                fx<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lamps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">-</span> lamps<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第二种情况，往右边走到尽头，根据耗散再次取最小值</span>            fx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>fx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lamps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">-</span> lamps<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                fx<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lamps<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>pos <span class="token operator">-</span> lamps<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>sum<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> sum<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> sum<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//最后一次选择左边或者右边较小的那一个</span>    <span class="token keyword">int</span> ressult <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>fx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> ressult<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]摆花</title>
      <link href="2021/04/07/mei-ri-suan-fa-bai-hua/"/>
      <url>2021/04/07/mei-ri-suan-fa-bai-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>小明的花店新开张，为了吸引顾客，他想在花店的门口摆上一排花，共 <em>m</em> 盆。通过调查顾客的喜好，小明列出了顾客最喜欢的 <em>n</em> 种花，从 1 到 <em>n</em> 标号。为了在门口展出更多种花，规定第 <em>i</em> 种花不能超过a<sub>i</sub> 盆，摆花时同一种花放在一起，且不同种类的花需按标号的从小到大的顺序依次摆列。</p><p>试编程计算，一共有多少种不同的摆花方案。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个正整数<em>n</em> 和<em>m</em>，中间用一个空格隔开。</p><p>第二行有<em>n</em> 个整数，每两个整数之间用一个空格隔开，依次表示a<sub>1</sub>,a<sub>2</sub>,⋯,<em>a<sub>n</sub></em>。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示有多少种方案。注意：因为方案数可能很多，请输出方案数对 10^6+7取模的结果。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>2 4<br />3 2</td><td>2</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><ul><li><p>【数据范围】</p><p>对于20% 数据，有 0&lt;n≤8,0&lt;m≤8,0≤<em>a<sub>i</sub></em>≤8。</p><p>对于50% 数据，有 0&lt;n≤20,0&lt;m≤20,0≤<em>a<sub>i</sub></em>≤20。</p><p>对于100% 数据，有 0&lt;n≤100,0&lt;m≤100,0≤<em>a<sub>i</sub></em>≤100。</p></li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这是个典型的动态规划问题，即可以从之前的状态推出后面的状态的最优解。用数组arr表示每种花最多的盆数，用二维数组fx存储i种j盆花的方案数。那么可以从初始状态fx【i】【0】=1（即一盆花都没有时，只有一种方案）出发。状态转移方程为 fx【i】【j】 += fx【i - 1】【k】。核心其实是从上一层的最优解推下一层的最优解，这个题的最优即所有方案加起来的和，所以这个题不需要取max,min。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fx<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//arr为每种花最多的盆数，fx存储放i种j盆花的方案数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000007</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> m<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> m<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取花的总数和盆数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//进行初始化，一盆花都没有时，就只有一种方案</span>        fx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//花的种类</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//这种花的盆数</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> j<span class="token punctuation">;</span>k <span class="token operator">>=</span> j <span class="token operator">-</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//k为这种花的盆数,状态转移方程</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//及时终止循环</span>                fx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> fx<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>                fx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">%</span><span class="token operator">=</span> mod<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> fx<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出总数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]尼克的任务</title>
      <link href="2021/04/02/mei-ri-suan-fa-ni-ke-de-ren-wu/"/>
      <url>2021/04/02/mei-ri-suan-fa-ni-ke-de-ren-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>尼克每天上班之前都连接上英特网，接收他的上司发来的邮件，这些邮件包含了尼克主管的部门当天要完成的全部任务，每个任务由一个开始时刻与一个持续时间构成。</p><p>尼克的一个工作日为 <em>n</em> 分钟，从第 1 分钟开始到第 <em>n</em> 分钟结束。当尼克到达单位后他就开始干活，公司一共有 <em>k</em> 个任务需要完成。如果在同一时刻有多个任务需要完成，尼克可以任选其中的一个来做，而其余的则由他的同事完成，反之如果只有一个任务，则该任务必需由尼克去完成，假如某些任务开始时刻尼克正在工作，则这些任务也由尼克的同事完成。如果某任务于第 <em>p</em> 分钟开始，持续时间为 <em>t</em> 分钟，则该任务将在第 (<em>p</em>+<em>t</em>−1) 分钟结束。</p><p>写一个程序计算尼克应该如何选取任务，才能获得最大的空暇时间。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入数据第一行含两个用空格隔开的整数 <em>n</em> 和 <em>k</em>。</p><p>接下来共有 <em>k</em> 行，每一行有两个用空格隔开的整数 <em>p</em> 和 <em>t</em>，表示该任务从第 <em>p</em> 分钟开始，持续时间为 <em>t</em> 分钟。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出文件仅一行，包含一个整数，表示尼克可能获得的最大空暇时间。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>15 6<br />1 2<br />1 6 <br />4 11<br />8 5<br />8 1 <br />11 5</td><td>4</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><ul><li>对于 100% 的数据，保证 1≤n≤10^4,1≤k≤10^4,1≤p≤n,1≤p+t-1≤n。</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这个题是一个线性的动态规划问题，第i时刻的最大空闲时间是和后面i+选择任务的持续时间的时刻有关系的，如果正着找是不那么容易的，但是如果倒着查找就会容易很多，可以得到相应的状态转移方程：</p><p>如果本时刻无任务时，那么这个时刻的空闲时间为上一个时刻的最大空闲时间+1：<strong>f[i]=f[i+1]+1</strong>；</p><p>如果本时刻有任务，begins表示这个时刻的任务的持续时间，那么状态转移方程为：<strong>fx[i] = max(fx[i], fx【i + begins【i】【j】】)</strong>。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> begins<span class="token punctuation">[</span><span class="token number">10002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//begin存在时刻i开始的任务结束的时间</span><span class="token keyword">int</span> fx<span class="token punctuation">[</span><span class="token number">10002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//存储每个时间点的最大空闲值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> k<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//n为工作日的持续时间,k为任务数</span>    cin <span class="token operator">>></span> n <span class="token operator">>></span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> be<span class="token punctuation">,</span> co<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> be <span class="token operator">>></span> co<span class="token punctuation">;</span>        begins<span class="token punctuation">[</span>be<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>co<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//倒序处理每个时刻</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>begins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//说明有任务需要做</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> begins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取时间最长的那一个</span>                fx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>fx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> fx<span class="token punctuation">[</span>i <span class="token operator">+</span> begins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//否则就是没有任务，为空闲时间</span>            fx<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fx<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> fx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]过河卒</title>
      <link href="2021/03/28/mei-ri-suan-fa-guo-he-zu/"/>
      <url>2021/03/28/mei-ri-suan-fa-guo-he-zu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>棋盘上 <em>A</em> 点有一个过河卒，需要走到目标 <em>B</em> 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 <em>C</em> 点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p><p>棋盘用坐标表示，<em>A</em> 点 (0, 0)、<em>B</em> 点 (<em>n</em>,<em>m</em>)，同样马的位置坐标是需要给出的。</p><p><img src="/images/river.png" alt=""></p><p>现在要求你计算出卒从 <em>A</em> 点能够到达 <em>B</em> 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行四个正整数，分别表示 <em>B</em> 点坐标和马的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示所有的路径条数。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>6 6 3 3</td><td>6</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>对于100% 的数据，，1 ≤<em>n</em>,<em>m</em>≤20，0≤ 马的坐标≤20。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很明显这是个动态规划问题。状态转移方程为a【i】【j】=a【i-1】【j】+a【i】【j-1】。通过分析，发现要到达棋盘上的一个点，只能从左边或上面过来。所以，根据<strong>加法原理</strong>，到达某一点的路径数目，就等于到达其相邻的<strong>上点</strong>和<strong>左点</strong>的路径数目之和，因此我们可以使用<strong>逐列</strong>（或<strong>逐行</strong>）递推的方法来求出从起点到终点的路径数目。<strong>障碍点</strong>（<strong>马的控制点</strong>）也完全适用，只要将到达该店的路径数目设置为<strong>0</strong>即可。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> Bx<span class="token punctuation">,</span> By<span class="token punctuation">,</span> Hx<span class="token punctuation">,</span> Hy<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//分别为B点坐标与马的位置</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> numbers<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//numbers[i][j]代表从A点到点(i,j)的线路条数</span>    <span class="token keyword">bool</span> horse<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//确定是不是马的势力范围</span>    <span class="token comment" spellcheck="true">//获取B点的坐标与马的坐标</span>    cin <span class="token operator">>></span> Bx <span class="token operator">>></span> By <span class="token operator">>></span> Hx <span class="token operator">>></span> Hy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//先全部位置标记为false，路径条数初始化为0</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> Bx<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> By<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            horse<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//马的势力范围标记为true,最多有8个其他位置</span>    horse<span class="token punctuation">[</span>Hx<span class="token punctuation">]</span><span class="token punctuation">[</span>Hy<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> Bx <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> By<span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> Bx <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> By<span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> By<span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> By<span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> Bx <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Hx <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> Bx <span class="token operator">&amp;&amp;</span> Hy <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> horse<span class="token punctuation">[</span>Hx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hy <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//动态规划求解</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> Bx<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> By<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果有马就不能走</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>horse<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//A点设置为1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//第一行的其他点只能从该点左边过来</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                    numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//第一列的其他点只能从该点的上一个点到达</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                    numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>numbers<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//其他点可从上方和右方到达</span>                <span class="token keyword">else</span>                    numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>numbers<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> numbers<span class="token punctuation">[</span>Bx<span class="token punctuation">]</span><span class="token punctuation">[</span>By<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]滑雪</title>
      <link href="2021/03/25/mei-ri-suan-fa-hua-xue/"/>
      <url>2021/03/25/mei-ri-suan-fa-hua-xue/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Michael 喜欢滑雪。这并不奇怪，因为滑雪的确很刺激。可是为了获得速度，滑的区域必须向下倾斜，而且当你滑到坡底，你不得不再次走上坡或者等待升降机来载你。Michael 想知道在一个区域中最长的滑坡。区域由一个二维数组给出。数组的每个数字代表点的高度。下面是一个例子：</p><table><thead><tr><th>1   2   3   4   5<br />16  17  18  19  6 <br />15  24  25  20  7 <br />14  23  22  21  8 <br />13  12  11  10  9</th></tr></thead></table><p>一个人可以从某个点滑向上下左右相邻四个点之一，当且仅当高度会减小。在上面的例子中，一条可行的滑坡为 24－17－16－1（从 24 开始，在 1 结束）。当然 25－24－23－…－3－2－1 更长。事实上，这是最长的一条。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行为表示区域的二维数组的行数 <em>R</em> 和列数 <em>C</em>。下面是 <em>R</em> 行，每行有 <em>C</em> 个数，代表高度(两个数字之间用 1 个空格间隔)。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出区域中最长滑坡的长度。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>5 5 <br />1 2 3 4 5<br />16 17 18 19 6 <br />15 24 25 20 7 <br />14 23 22 21 8<br />13 12 11 10 9</td><td>25</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>对于100% 的数据，1≤<em>R</em>,<em>C</em>≤100。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很明显这是个动态规划问题。把每个点存为一个元素，则它的最长路径来自它的上下左右四边的最长的最长路+1。那么可以得到动态转移方程为f【i】【j】=max(f【i】【j】,f【i-1】【j】+1,f【i+1】【j】+1,f【i】【j-1】+1,f【i】【j+1】+1)（h[now]&gt;h[next])；动态规划要考虑无后效性。因此需要先计算较低的点，对后面算高的点没有影响。即在优先级队列中，高度越小，优先级就越高。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一维坐标</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第二维坐标</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//高度</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> x0<span class="token punctuation">,</span> <span class="token keyword">int</span> y0<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">x</span><span class="token punctuation">(</span>x0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>y0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">height</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//高度越小，优先级越高</span><span class="token keyword">struct</span> cmp<span class="token punctuation">{</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Node<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> Node<span class="token operator">&amp;</span> b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>height <span class="token operator">></span> b<span class="token punctuation">.</span>height<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sking</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>priority_queue<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token punctuation">,</span> cmp<span class="token operator">></span> tempQueue<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>datas<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Node node<span class="token punctuation">;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用动态规划的方法，从高度最小的节点开始处理</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>tempQueue<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        node <span class="token operator">=</span> tempQueue<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tempQueue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">=</span> node<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        y <span class="token operator">=</span> node<span class="token punctuation">.</span>y<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//上下左右四个位置逐个处理</span>        <span class="token comment" spellcheck="true">//上</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>datas<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> datas<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果这个节点比上面高，那么可以向上划,取较大值</span>                result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//下</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>datas<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> datas<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果这个节点比下面高，那么可以向下划</span>                result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//左</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>datas<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> datas<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果这个节点比左面高，那么可以向左划</span>                result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//右</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>datas<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> datas<span class="token punctuation">[</span>node<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>node<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果这个节点比下面高，那么可以向上划</span>                result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">></span> maxL<span class="token punctuation">)</span> maxL <span class="token operator">=</span> result<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> maxL<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> hei<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将数据读入一个优先级队列和数据数组中</span>    <span class="token comment" spellcheck="true">//创建动态二维数组存放高度</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> datas<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建动态二维数组存放最大长度</span>    <span class="token keyword">int</span> result<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    priority_queue<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>Node<span class="token operator">></span><span class="token punctuation">,</span> cmp<span class="token operator">></span> tempQueue<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> hei<span class="token punctuation">;</span>            Node<span class="token operator">*</span> tempNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> hei<span class="token punctuation">)</span><span class="token punctuation">;</span>            tempQueue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>tempNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存入优先级队列</span>            datas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> hei<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//存入数组</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">sking</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> tempQueue<span class="token punctuation">,</span> datas<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放内存</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]数字三角形</title>
      <link href="2021/03/20/mei-ri-suan-fa-shu-zi-san-jiao-xing/"/>
      <url>2021/03/20/mei-ri-suan-fa-shu-zi-san-jiao-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>观察下面的数字金字塔。</p><p>写一个程序来查找从最高点到底部任意处结束的路径，使路径经过数字的和最大。每一步可以走到左下方的点也可以到达右下方的点。</p><table><thead><tr><th>7<br />3  8<br />8  1  0<br />2  7 4 4<br />4 5 2 6 5</th></tr></thead></table><p>在上面的样例中,从 7→3 → 8 → 7 → 5 的路径产生了数字和最大。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一个行一个正整数 <em>r</em> ,表示行的数目。</p><p>后面每行为这个数字金字塔特定行包含的整数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>单独的一行,包含那个可能得到的最大的和。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>5 <br />7<br />3 8 <br />8 1 0 <br />2 7 4 4<br />4 5 2 6 5</td><td>30</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>【数据范围】<br>对于 100% 的数据，1≤<em>r</em>≤1000，所有输入在 [0,100] 范围内。</p><p>题目翻译来自NOCOW。</p><p>USACO Training Section 1.5</p><p>IOI1994 Day1T1</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>很明显这是个动态规划问题，如果用贪心求解那么只能得到局部最优解而不能得到全局最优解。    这个题目从上向下求解会比较麻烦，但是如果逆向求解即从下向上求解就很比较简单，状态转移方程为 f 【x】【y】=max(f【x+1】【y】,f【x+1】【y+1】)+a【x】【y】（f【i】【j】表示走到第i层第j个时的最大值）。最后输出a数组的最大值即可。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">numberTriangles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//从倒数第二排开始处理</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> num<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//动态开辟空间</span>    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开辟行</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开辟列</span>    <span class="token comment" spellcheck="true">//将数据载入内存</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> num<span class="token punctuation">;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//动态规划处理后输出结果</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">numberTriangles</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//释放开辟的资源</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]部分背包问题</title>
      <link href="2021/03/17/mei-ri-suan-fa-bu-fen-bei-bao-wen-ti/"/>
      <url>2021/03/17/mei-ri-suan-fa-bu-fen-bei-bao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>阿里巴巴走进了装满宝藏的藏宝洞。藏宝洞里面有 <em>N</em>(<em>N</em>≤100) 堆金币，第 <em>i</em> 堆金币的总重量和总价值分别是m<sub>i</sub>,v<sub>i</sub>(1≤m<sub>i</sub>,v<sub>i</sub>≤100)。阿里巴巴有一个承重量为T(<em>T</em>≤1000) 的背包，但并不一定有办法将全部的金币都装进去。他想装走尽可能多价值的金币。所有金币都可以随意分割，分割完的金币重量价值比（也就是单位价格）不变。请问阿里巴巴最多可以拿走多少价值的金币？</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个整数 N,<em>T</em>。</p><p>接下来 <em>N</em> 行，每行两个整数 m<sub>i</sub>,v<sub>i</sub>。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个实数表示答案，输出两位小数。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>4 50<br />10 60 <br />20 100 <br />30 120 <br />15 45</td><td>240.00</td></tr></tbody></table><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题为部分背包问题，金币是可以任意分割的，因此可以用贪心的思想进行求解。首先要计算出每份金币的单位价格，然后将其放入一个优先级队列，单位价格越高的金币堆优先级越高。然后按照优先级队列的顺序取金币即可，直到背包装不下或者所有金币被拿完才停止。当处理最后一份金币时，如果背包不能完全装下，就分割这一堆金币，把背包装满即可。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//计算单位价格</span><span class="token keyword">float</span> <span class="token function">unitPrice</span><span class="token punctuation">(</span><span class="token keyword">int</span> weight<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">float</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">float</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">struct</span> Gold<span class="token punctuation">{</span>    <span class="token keyword">int</span> weight<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//重量</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//总价值</span>    <span class="token keyword">float</span> uPrice<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//价值比</span>    <span class="token function">Gold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">Gold</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        weight <span class="token operator">=</span> w<span class="token punctuation">;</span>        value <span class="token operator">=</span> v<span class="token punctuation">;</span>        uPrice <span class="token operator">=</span> <span class="token function">unitPrice</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//价值比越高优先级越高</span>    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>Gold a<span class="token punctuation">,</span> Gold b<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">return</span>  a<span class="token punctuation">.</span>uPrice <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>uPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个参数为金币的堆数，第二参数为背包的承重，第三个参数存有每堆金币的具体信息</span><span class="token keyword">float</span> <span class="token function">maxMoney</span><span class="token punctuation">(</span><span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> T<span class="token punctuation">,</span> priority_queue<span class="token operator">&lt;</span>Gold<span class="token operator">></span> detail<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//初始状态剩余重量为N，剩余金币堆数为N</span>    <span class="token keyword">int</span> remainWeight <span class="token operator">=</span> T<span class="token punctuation">,</span> remainHeap <span class="token operator">=</span> N<span class="token punctuation">;</span>    <span class="token keyword">float</span> totalMoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Gold curGold<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//背包未装满并且有剩余金币时</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>remainWeight <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> remainHeap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//获取价值比最高的金币</span>        curGold <span class="token operator">=</span> detail<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>remainWeight <span class="token operator">>=</span> curGold<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//剩余重量大于这堆金币的重量,全部装入</span>            detail<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            remainWeight <span class="token operator">-</span><span class="token operator">=</span> curGold<span class="token punctuation">.</span>weight<span class="token punctuation">;</span>            remainHeap<span class="token operator">--</span><span class="token punctuation">;</span>            totalMoney <span class="token operator">+</span><span class="token operator">=</span> curGold<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//不能完全把这块金币装入需要拆分</span>            totalMoney <span class="token operator">+</span><span class="token operator">=</span> curGold<span class="token punctuation">.</span>uPrice <span class="token operator">*</span> remainWeight<span class="token punctuation">;</span>            curGold<span class="token punctuation">.</span>weight <span class="token operator">-</span><span class="token operator">=</span> remainWeight<span class="token punctuation">;</span>            detail<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            detail<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curGold<span class="token punctuation">)</span><span class="token punctuation">;</span>            remainWeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> totalMoney<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    priority_queue<span class="token operator">&lt;</span>Gold<span class="token operator">></span> price<span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> T<span class="token punctuation">,</span> m<span class="token punctuation">,</span> v<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> T<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//n为金币的堆数</span>    <span class="token comment" spellcheck="true">//数据装载进优先级队列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> m <span class="token operator">>></span> v<span class="token punctuation">;</span>        Gold<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Gold</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        price<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//保留两位小数</span>    cout <span class="token operator">&lt;&lt;</span> fixed <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">maxMoney</span><span class="token punctuation">(</span>N<span class="token punctuation">,</span> T<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]合并果子</title>
      <link href="2021/03/13/mei-ri-suan-fa-he-bing-guo-zi/"/>
      <url>2021/03/13/mei-ri-suan-fa-he-bing-guo-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过 <em>n</em>−1 次合并之后， 就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为 1 ，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有 3 种果子，数目依次为 1 ， 2 ， 9 。可以先将 1 、 2 堆合并，新堆数目为 3 ，耗费体力为 3 。接着，将新堆与原先的第三堆合并，又得到新的堆，数目为 1212 ，耗费体力为 12 。所以多多总共耗费体力 =3+12=15 。可以证明15 为最小的体力耗费值。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>共两行。<br>第一行是一个整数 n(1≤<em>n</em>≤10000) ，表示果子的种类数。</p><p>第二行包含 <em>n</em> 个整数，用空格分隔，第 <em>i</em> 个整数a<sub>i</sub>((1≤<em>a**i</em>≤20000) 是第 <em>i</em> 种果子的数目。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，也就是最小的体力耗费值。输入数据保证这个值小于 2^31 。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>3<br />1 2 9</td><td>15</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>对于30% 的数据，保证有 <em>n</em>≤1000：</p><p>对于50%的数据，保证有 <em>n</em>≤5000；</p><p>对于全部的数据，保证有 <em>n</em>≤10000。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>经过简单的证明可以知道最优解为每次合并两个数目最小的果子，直到合并成一堆。其实就是利用了贪心的算法思想。每次在数组中找两个最小的数的效率是比较低的。这时候可以直接利用STL中的优先级队列priority_queue来进行求解，在优先级队列中数量越少优先级就越高，这样每次只需要弹出优先级队列最前端的两个数进行相加后，将相加后的结果再放回优先级队列，一直处理直到优先级队列只有一个元素为止。最后的这个元素就是结果即体力的最小耗费值。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用一个优先级队列，数字越小优先级越高</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> numbers<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span> n<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取元素个数n</span>    <span class="token comment" spellcheck="true">//将元素存入优先级队列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//每次将最小的两堆相加</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//此时已经得到结果输出结果即可</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//将最小的两个数相加后把这两个数弹出，但是将合并后的数加入队列中</span>            x <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//最小的数</span>            numbers<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            y <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第二小的数</span>            numbers<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            numbers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> result <span class="token operator">+</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> result<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]归并排序</title>
      <link href="2021/03/10/mei-ri-suan-fa-gui-bing-pai-xu/"/>
      <url>2021/03/10/mei-ri-suan-fa-gui-bing-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>利用归并排序算法将读入的 <em>N</em> 个数从小到大排序后输出。</p><p>快速排序是信息学竞赛的必备算法之一。对于快速排序不是很了解的同学可以自行上网查询相关资料，掌握后独立完成。（C++ 选手请不要试图使用 <code>STL</code>，虽然你可以使用 <code>sort</code> 一遍过，但是你并没有掌握快速排序算法的精髓。）</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 1 行为一个正整数 <em>N</em>，第 2 行包含 <em>N</em> 个空格隔开的正整数 a<sub>i</sub>，为你需要进行排序的数，数据保证了a<sub>i</sub>不超过 10^9。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>将给定的 <em>N</em> 个数从小到大输出，数之间空格隔开，行末换行且无空格。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>5<br />4 2 4 5 1</td><td>1 2 4 4 5</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>对于20% 的数据，有 N≤ 10^3；</p><p>对于 100% 的数据，有 N≤10^5</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>归并排序是一种稳定的排序算法，平均时间复杂度为O(n log n)。</p><p>一般来说归并排序分为3个过程来完成：</p><p>1.将数列划分为两个部分；</p><p>2.递归地分别对两个子序列进行归并排序；</p><p>3.合并两个子序列</p><p>归并排序的原理图为：<img src="/images/merge.png" alt=""></p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//合并两个有序的序列</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//n1为左边元素的个数，n2为右边元素的个数</span>    n1 <span class="token operator">=</span> mid <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    n2 <span class="token operator">=</span> end <span class="token operator">-</span> mid<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将原始数组拆分成左右两个部分</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将numbers的左边元素依次放入left数组</span>        left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span>start <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将numbers的右边元素依次放入right数组</span>        right<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> numbers<span class="token punctuation">[</span>mid <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把两个有序数组进行合并</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//两边都有数据时，每个数组使用一个指针指向第一个元素，将两个元素进行比较，将小的放到合并后的数组中，并且指针后移</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            numbers<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            numbers<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果左边有剩余元素，将元素依次加入结果数组</span>        numbers<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果右边有剩余元素，将元素依次加入结果数组</span>        numbers<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放创建的空间</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//归并排序</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//start>=end时，即拆分成了每个数组只有一个元素，为递归出口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用递归的方法依次拆分，拆到每个数组只有一个元素为止</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//执行拆分与合并排序的操作</span>    <span class="token function">merge</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> number<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取正整数的个数n</span>    <span class="token keyword">int</span><span class="token operator">*</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将正整数输入到数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> number<span class="token punctuation">;</span>        numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//进行快速排序</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将排好序后的数输出</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]快速排序</title>
      <link href="2021/03/08/mei-ri-suan-fa-kuai-su-pai-xu/"/>
      <url>2021/03/08/mei-ri-suan-fa-kuai-su-pai-xu/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>利用快速排序算法将读入的 <em>N</em> 个数从小到大排序后输出。</p><p>快速排序是信息学竞赛的必备算法之一。对于快速排序不是很了解的同学可以自行上网查询相关资料，掌握后独立完成。（C++ 选手请不要试图使用 <code>STL</code>，虽然你可以使用 <code>sort</code> 一遍过，但是你并没有掌握快速排序算法的精髓。）</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 1 行为一个正整数 <em>N</em>，第 2 行包含 <em>N</em> 个空格隔开的正整数 a<sub>i</sub>，为你需要进行排序的数，数据保证了a<sub>i</sub>不超过 10^9。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>将给定的 <em>N</em> 个数从小到大输出，数之间空格隔开，行末换行且无空格。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>5<br />4 2 4 5 1</td><td>1 2 4 4 5</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>对于20% 的数据，有 N≤ 10^3；</p><p>对于 100% 的数据，有 N≤10^5</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>快速排序是效率很高的一种不稳定的排序算法，平均时间复杂度为O(n log n)。</p><p>快速排序采用了分治的思想来完成排序，一般来说快速排序分为3个过程来完成：</p><p>1.将数列划分为两部分，选择一个数作为基数，小于基数的部分放在基数左边，大于基数的部分放在基数的右边。</p><p>2.递归到两个子序列中分别进行快速排序；</p><p>3.当每个子序列都只有一个元素的时候不用合并，因为此时数列已经完全有序，递归结束。</p><p>为了提高算法的效率，可以设置两根指针，从两个头端同时向中间的基数靠近进行排序，左边的指针寻找比基准数大的数，右边的指针寻找比基准数小的数，然后交换两个指针指向的数后指针同时向中间移动一个位置，当左边的指针指向的位置在右边指针的右边后，说明这一轮划分已经结束了，把基数放到两个子序列中间。然后对两个子序列进行相同的操作，直到每个子序列都只有一个数位置，这样整个序列就排序完毕了。</p><p> 经过大量的实验表明，当数比较少的时候，其实快速排序的效率会比较低，因此当一个序列的元素个数少于8个时，可以从快速排序变成选择排序和冒泡排序来提高排序效率。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//数组中间的数默认为基准数</span>    <span class="token keyword">int</span> midNumber <span class="token operator">=</span> numbers<span class="token punctuation">[</span><span class="token punctuation">(</span>begin <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//左指针指向第一个数据，右指针指向最后一个数据</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> begin<span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在左边找比基准数大的数，在右边找比基准数小的数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> midNumber<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> midNumber<span class="token punctuation">)</span>  right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果左边有大的数，右边有小的数，交换位置</span>            <span class="token function">swap</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">></span> left<span class="token punctuation">)</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> left<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> number<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取正整数的个数n</span>    <span class="token keyword">int</span><span class="token operator">*</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将正整数输入到数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> number<span class="token punctuation">;</span>        numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//进行快速排序</span>    <span class="token function">quickSort</span><span class="token punctuation">(</span>numbers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将排好序后的数输出</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[每日算法]台阶问题</title>
      <link href="2021/03/06/mei-ri-suan-fa-tai-jie-wen-ti/"/>
      <url>2021/03/06/mei-ri-suan-fa-tai-jie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>有<em>N</em>级的台阶，你一开始在底部，每次可以向上迈最多<em>K</em>级台阶（最少11级），问到达第N<em>N</em>级台阶有多少种不同方式。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>两个正整数N，K。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个正整数，为不同方式数，由于答案可能很大，你需要输出ans mod 100003后的结果。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><table><thead><tr><th>样例#1</th><th>输出#1</th></tr></thead><tbody><tr><td>5 2</td><td>8</td></tr><tr><td>98765 89</td><td>86214</td></tr></tbody></table><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>对于20%的数据,有N ≤ 10, K≤3;</p><p>对于40%的数据，有N≤1000;</p><p>对于100%的数据，有N ≤ 100000,K ≤ 100。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>根据N与K的值，列举一些具体的答案。</p><p>横坐标为总台阶数N，纵坐标为每次能走的最大步数K。</p><table><thead><tr><th align="center"></th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">1</td><td align="center">2</td><td align="center">3</td><td align="center">5</td><td align="center">8</td><td align="center">13</td><td align="center">21</td><td align="center">34</td></tr><tr><td align="center">3</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">7</td><td align="center">13</td><td align="center">24</td><td align="center">44</td><td align="center">81</td></tr><tr><td align="center">4</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">8</td><td align="center">15</td><td align="center">29</td><td align="center">56</td><td align="center">108</td></tr><tr><td align="center">5</td><td align="center">1</td><td align="center">2</td><td align="center">4</td><td align="center">8</td><td align="center">16</td><td align="center">31</td><td align="center">61</td><td align="center">120</td></tr></tbody></table><p>通过观察可以发现这个问题其实是一个变相的斐波那契数列。</p><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><p>用递归的思想来做，假设因为最大的步数为K，楼梯步数为N时的走法有a<sub>N</sub>种，那么最后走1步时，这步之前的走法有a<sub>N-1</sub>种；最后走2步时，这步之前的走法有a<sub>N-2</sub>种….最后走K步时，这步之前有a这步之前的走法有a<sub>N-K</sub>种，所以说楼梯步数为N时的走法数量为a<sub>N-1</sub>+a<sub>N-2</sub>+…+a<sub>N-K</sub>。<br>因此只需要根据最大的步数K将阶梯数为1，2…K的总数分别写下来，即先初始化斐波那契数列前面的K项，接下来的项数只需要将前K项相加得到该项的总数。经过观察可以发现前面K项是有一个首项为1，公比为2的等比数列。因此程序先使用一个for循环将前K项初始化，由于加数的个数为K是个变量，这时候需要一个双重循环重置K项以后的项，第一重循环为处理的第i项，第二重循环是分别加这项前面的N项。返回最后一项的结果即可，时间复杂度为O(NK)。</p><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><p>解法1虽然思路比较清晰，但是代码实现相对麻烦一点，时间复杂度也比较大，通过整理解法1的数学公式，稍加推导就可以得到简化的公式：<br>当K=1时，无论台阶数有多少，都只能一次走一步，因此只有一种走法。</p><p>当K≠1，发现当i≤K时，有a<sub>i</sub>=2<em>a<sub>i-1</sub>（即当前项为前一项的两倍）;<br>i＞K时，有a<sub>i</sub>=a<sub>N-1</sub>+a<sub>N-2</sub>+…+a<sub>N-K</sub>=2</em>a<sub>i-1</sub>-a<sub>i-1-K</sub><br>与解法1相比，只需要初始化第一项为1，接下来只需要执行循环，如果i≤K，就为前一项的2倍，如果i＞K，就为前一项的倍减去第i-1*-K项。返回最后一步的结果即可，时间复杂度为O(n)。</p><h2 id="解法2源代码"><a href="#解法2源代码" class="headerlink" title="解法2源代码"></a>解法2源代码</h2><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取台阶的级数N和最大的步数K</span>    <span class="token keyword">int</span> N<span class="token punctuation">,</span> K<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> N <span class="token operator">>></span> K<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为结果创建一个大小为N的动态数组</span>    <span class="token keyword">int</span><span class="token operator">*</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>N <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> K <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先检查输入的数是否合法</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入大于0的整数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//初始化第0项和第一项为0</span>    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>K <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>如果最大步数为<span class="token number">1</span>，那么级数为多少结果都为<span class="token number">1</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//注意避免出现负数,结果的数字可能比较大，需要mod100003</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> K<span class="token punctuation">)</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//i&lt;=K时为前一项的两倍</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> result<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100003</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//i>K时为前一项的两倍减去第i-1-K项</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> result<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>result<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token operator">-</span>K<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100003</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">100003</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">100003</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 每日算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络UDP套接字编程</title>
      <link href="2021/02/18/ji-suan-ji-wang-luo-udp-tao-jie-zi-bian-cheng/"/>
      <url>2021/02/18/ji-suan-ji-wang-luo-udp-tao-jie-zi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>1、UDP的服务器编程步骤：<br>①.创建一个socket，用函数socket()<br>②.绑定IP地址、端口等信息到socket上，用函数bind()<br>③.循环接收数据，用函数recvfrom()<br>④.关闭网络连接<br>2、UDP的客户端编程步骤：<br>①.创建一个socket，用函数socket()<br>②.绑定IP地址、端口等信息到socket上，用函数bind()<br>③.设置对方的IP地址和端口等属性<br>④.发送数据，用函数sendto()<br>⑤.关闭网络连接</p><p>代码：<br>客户端：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>HOST <span class="token operator">=</span> <span class="token string">'119.45.115.128'</span>PORT <span class="token operator">=</span> <span class="token number">3555</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>udpClientSocket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send the data: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>        msg <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 发送数据:</span>        udpClientSocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> ADDR<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 接收数据:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'receive the reply: '</span> <span class="token operator">+</span> udpClientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>udpClientSocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> ctimeHOST <span class="token operator">=</span> <span class="token string">''</span>PORT <span class="token operator">=</span> <span class="token number">3555</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>udpServerSocket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span>udpServerSocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data<span class="token punctuation">,</span> addr <span class="token operator">=</span> udpServerSocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'来自主机 %s，端口: %s.'</span> <span class="token operator">%</span> addr<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        reply <span class="token operator">=</span> <span class="token string">'Hello, this is udpserver!'</span>        udpServerSocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>reply<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>udpServerSocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络TCP套接字编程</title>
      <link href="2021/02/16/ji-suan-ji-wang-luo-tcp-tao-jie-zi-bian-cheng/"/>
      <url>2021/02/16/ji-suan-ji-wang-luo-tcp-tao-jie-zi-bian-cheng/</url>
      
        <content type="html"><![CDATA[<p>TCP是一个面向连接的协议，意味着客户和服务器开始发送数据之前，它们先要握手和创建一个TCP连接。TCP连接的一端与客户套接字相联系，另一端与服务器套接字相联系。当创建该TCP连接时，我们将其与客户套接字地址（IP地址和端口号）和服务器套接字地址（IP地址和端口号）关联起来。使用创建的TCP连接，当一侧要向另一侧发送数据时，它只需经过其套接字将数据丢进TCP连接。这与UDP不同，UDP服务器在将分组丢进套接字之前必须为其附上一个目的地地址。</p><p>客户端：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token keyword">import</span> sysIP <span class="token operator">=</span> <span class="token string">'119.45.115.128'</span>  <span class="token comment" spellcheck="true"># 填写服务器端的IP地址</span>port <span class="token operator">=</span> <span class="token number">1200</span>  <span class="token comment" spellcheck="true"># 端口号必须一致</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'服务器没有找到或未打开！'</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        trigger <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入待发送的数据：(exit-退出)"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> trigger <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>trigger<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'从服务器接收到的结果为：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>服务端：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> sockethost <span class="token operator">=</span> <span class="token string">"192.168.0.104"</span>  <span class="token comment" spellcheck="true"># 服务器端可以写"localhost"，可以为空字符串""，也为本机IP地址</span>port <span class="token operator">=</span> <span class="token number">1200</span>  <span class="token comment" spellcheck="true"># 端口号</span>s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'服务器已经启动'</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经建立连接'</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>        data <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'从客户端接收到信息为：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>        send <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'给客户端接的回复信息为：'</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>send<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络RIP路由选择算法</title>
      <link href="2021/02/14/ji-suan-ji-wang-luo-rip-lu-you-xuan-ze-suan-fa/"/>
      <url>2021/02/14/ji-suan-ji-wang-luo-rip-lu-you-xuan-ze-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>RIP原理</p><p>RPI协议是一种内部网关协议（IGP），是一种动态路由选择协议，用于自治系统（AS）内的路由信息的传递。RIP协议基于距离矢量算法（DistanceVectorAlgorithms），使用“跳数”来衡量到达目标地址的路由距离。这种协议的路由器只关心自己周围的世界，只与自己相邻的路由器交换信息，范围限制在15跳(15度)之内。获取新的路由信息时：</p><p>a. 对本路由表中已有的路由项，当发送报文的网关相同时，不论跳数增大还是减少，都更新该路由表项的跳数。</p><p>b. 对本路由表中已有的路由项，当发送报文的网关不同时，只有在跳数减少时才更新该路由表项。</p><p>c. 对本路由表中不存在的路由项，在度量小于不可达的跳数时，在路由表中增加该路由项目。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>DesNet <span class="token operator">=</span> DesNet  <span class="token comment" spellcheck="true"># 目的网络</span>        self<span class="token punctuation">.</span>Dis <span class="token operator">=</span> Dis  <span class="token comment" spellcheck="true"># 距离</span>        self<span class="token punctuation">.</span>NextHoop <span class="token operator">=</span> NextHoop  <span class="token comment" spellcheck="true"># 下一跳</span>        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span class="token keyword">class</span> <span class="token class-name">Link</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造函数</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> Net<span class="token punctuation">(</span>None<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 头节点为空</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> self<span class="token punctuation">.</span>head        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 添加节点</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span><span class="token punctuation">:</span>        net <span class="token operator">=</span> Net<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 创建新节点</span>        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> net  <span class="token comment" spellcheck="true"># 尾节点的下一个节点为新节点</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> net  <span class="token comment" spellcheck="true"># 尾节点为新节点</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 插入节点（此节点作为第index个节点）</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            insert_net <span class="token operator">=</span> Net<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next  <span class="token comment" spellcheck="true"># 推进到要插入的位置</span>            insert_net<span class="token punctuation">.</span>next <span class="token operator">=</span> net<span class="token punctuation">.</span>next            net<span class="token punctuation">.</span>next <span class="token operator">=</span> insert_net            self<span class="token punctuation">.</span>size <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 删除节点（索引为index）</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next            temp <span class="token operator">=</span> net<span class="token punctuation">.</span>next            net<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next            self<span class="token punctuation">.</span>size <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 改变指定节点的数据</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 推进到要改变节点的位置</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next            net<span class="token punctuation">.</span>DesNet <span class="token operator">=</span> DesNet            net<span class="token punctuation">.</span>Dis <span class="token operator">=</span> Dis            net<span class="token punctuation">.</span>NextHoop <span class="token operator">=</span> NextHoop    <span class="token comment" spellcheck="true"># 返回节点的数据</span>    <span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否超过链表的长度</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next            <span class="token keyword">return</span> <span class="token punctuation">[</span>net<span class="token punctuation">.</span>DesNet<span class="token punctuation">,</span> net<span class="token punctuation">.</span>Dis<span class="token punctuation">,</span> net<span class="token punctuation">.</span>NextHoop<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 返回节点的长度</span>    <span class="token keyword">def</span> <span class="token function">getSize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>size    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取这个链表的长度</span>        count <span class="token operator">=</span> <span class="token number">0</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token keyword">while</span> cur <span class="token operator">!=</span> None<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> count<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    table <span class="token operator">=</span> Link<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始路由表</span>    NewTable <span class="token operator">=</span> Link<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 来自某个路由器的路由表</span>    FinalTable <span class="token operator">=</span> Link<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最终形成的路由表</span>    temptable1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    temptable2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入初始路由表行数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入整个路由表：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>        DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        table<span class="token punctuation">.</span>add<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span>        FinalTable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'路由表初始化完成'</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'新路由表来自的路由器：'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'新路由表的行数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入新路由表的信息：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>        DesNet<span class="token punctuation">,</span> Dis <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        Dis <span class="token operator">=</span> int<span class="token punctuation">(</span>Dis<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        NewTable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            temptable1 <span class="token operator">=</span> NewTable<span class="token punctuation">.</span>getData<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            temptable2 <span class="token operator">=</span> FinalTable<span class="token punctuation">.</span>getData<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> temptable2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果目标网络相同</span>                <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> temptable2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果目标网络和下一跳均相同</span>                    FinalTable<span class="token punctuation">.</span>change<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>                <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> temptable2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果目标网络一致，下一跳不同</span>                    <span class="token keyword">if</span> int<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> int<span class="token punctuation">(</span>temptable2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        FinalTable<span class="token punctuation">.</span>change<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>            <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> temptable2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> int<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> int<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            FinalTable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新的路由表为：'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'目的网络    距离    下一跳路由器'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>FinalTable<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        data <span class="token operator">=</span> FinalTable<span class="token punctuation">.</span>getData<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'        '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'         '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络OSPF路由选择算法</title>
      <link href="2021/02/12/ji-suan-ji-wang-luo-ospf-lu-you-xuan-ze-suan-fa/"/>
      <url>2021/02/12/ji-suan-ji-wang-luo-ospf-lu-you-xuan-ze-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>OSFP原理：a.每台路由器学习激活的直接相连的网络。</p><p>b.每台路由器和直接相连的路由器互交，发送Hello报文，建立邻居关系。</p><p>c.每台路由器构建包含直接相连的链路状态的LSA（Link-State Advertisement，链路状态通告）。链路状态通告(LSA)中记录了所有相关的路由器，包括邻路由器的标识、链路类型、带宽等。</p><p>d.每台路由器泛洪链路状态通告（LSA）给所有的邻路由器，并且自己也在本地储存邻路由发过来的LSA，然后再将收到的LSA泛洪给自己的所有邻居，直到在同一区域中的所有路由器收到了所有的LSA。每台路由器在本地数据库中保存所有收到的LSA副本，这个数据库被称作”链路状态数据库（LSDB，Link-State Database）”</p><p>e.每台路由器基于本地的”链路状态数据库(LSDB)”执行”最短路径优先（SPF）”算法，并以本路由器为根，生成一个SPF树，基于这个SPF树计算去往每个网络的最短路径，也就得到了最终的路由表。</p><p><img src="/images/compuer_net/image-20210211132835616.png" alt=""></p><p>代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>packets<span class="token punctuation">,</span> node_route<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Dijkstra算法</span>    table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 节点node_route的路由表</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 初始化table</span>        <span class="token keyword">if</span> packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">!=</span> float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'无'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span>        table<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>    count <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> count <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># temp用于保存当前table中距离最小的下标</span>        min <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># min用于记录当前的距离最小值</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span> <span class="token operator">and</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">:</span>                min <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                temp <span class="token operator">=</span> i        table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment" spellcheck="true"># 把temp对应的节点加入到已经找到的最短路径的集合中</span>        count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span> <span class="token operator">and</span> packets<span class="token punctuation">[</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>                    table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> packets<span class="token punctuation">[</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果新得到的边可能影响其它未访问的节点，那就更新它的最短距离和下一跳路由器</span>                table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> packets<span class="token punctuation">[</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    table<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> table<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    packets <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true"># 所有的链路状态分组</span>    nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 所有的节点</span>    node <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点，以#结束：'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> node <span class="token operator">!=</span> <span class="token string">'#'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> node <span class="token operator">not</span> <span class="token keyword">in</span> nodes<span class="token punctuation">:</span>            nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'节点%s的链路状态分组已存在！'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>            node <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点，以#结束：'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        per <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        row <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>        <span class="token keyword">while</span> row <span class="token operator">!=</span> <span class="token string">'*'</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> row<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 以空格分割输入的字符串</span>            row <span class="token operator">=</span> <span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span> <span class="token keyword">else</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> row<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 把度量置为整型</span>            <span class="token keyword">if</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 检查输入是否合理</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入违规！'</span><span class="token punctuation">)</span>                row <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> per<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 避免重复</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'节点%s的链路状态分组中已有此项！'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>                row <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            per<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 向节点node的链路状态分组中添加表项</span>            row <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>        packets<span class="token punctuation">[</span>node<span class="token punctuation">]</span> <span class="token operator">=</span> per  <span class="token comment" spellcheck="true"># 向所有的链路状态分组中添加节点node的链路状态分组</span>        node <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点，以#结束：'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将与每一节点未直接相邻的节点的度量置为无穷大（自身除外）</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> packets<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nodes<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> key <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">not</span> <span class="token keyword">in</span> packets<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                packets<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        node_route <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你想查看路由表的节点：'</span><span class="token punctuation">)</span>        table <span class="token operator">=</span> dijkstra<span class="token punctuation">(</span>packets<span class="token punctuation">,</span> node_route<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'节点%s的路由表如下:'</span> <span class="token operator">%</span> node_route<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'目的网络  距离  下一跳路由器'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> table<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'   '</span> <span class="token operator">+</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'      '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'       '</span> <span class="token operator">+</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络实验</title>
      <link href="2021/02/11/ji-suan-ji-wang-luo-shi-yan/"/>
      <url>2021/02/11/ji-suan-ji-wang-luo-shi-yan/</url>
      
        <content type="html"><![CDATA[<h1 id="问题及回答记录"><a href="#问题及回答记录" class="headerlink" title="问题及回答记录"></a>问题及回答记录</h1><table><thead><tr><th>问题及回答记录 (self-test Q&amp;A related to your experience reports, and no less  than 5 questions or contents of Q&amp;A nearly full of the sheet as well as  handwriting required)</th></tr></thead><tbody><tr><td>1. 输入net view 192.168.0.1查看共享资源时为什么显示了错误代码53？<img src="/images/compuer_net/1.png" alt=""></td></tr><tr><td>回答：通过查询，错误代码53的原因主要有5个，分别时：  ①IP地址错误；  ②目的标未开机或者下了网络，拔了局域网线，也有可能是关了服务器；  ③目标LanManServer服务未启动；  ④目标有防火墙（端口过滤）；  ⑤由于netbios over tcp/ip和dns造成的；  ⑥端口没有开放；</td></tr><tr><td>2.为什么输入指令net view查看局域网内的主机名时显示系统错误6118，工作组服务器列表无法使用？应当如何解决？<img src="/images/compuer_net/2.png" alt=""></td></tr><tr><td>回答：原因：在家庭或办公室网络的网络连接上启用防火墙，就有可能会发生这种现象。默认情况下，防火墙会关闭用于文件和打印共享的端口，以防止 Internet 计算机连接到计算机上的文件和打印共享。  解决方案：关闭电脑的防火墙，进入services.msc启动Computer Browser即可。</td></tr><tr><td>3.在TCP的流量控制分析中，慢启动本应该从1开始，但是为什么抓的包中显示慢启动过程中不是从1开始，而是从46开始的，是不是技术更新了？  <img src="/images/compuer_net/3.png" alt=""></td></tr><tr><td>回答：通过反复测试发现，并不是技术更新了，而是在抓包过程中，计算机的网络除了用于上传文件，其他的应用进程可能也在使用网络，但是whireshark统计的是整个网卡的I/O流，因此抓包时的流量除了我们需要的上传文件，还有其他进程，比如QQ微信也在使用网络，所以慢启动看起看并没有从1开始。实际上传输文件的这些网络活动中仍然是慢启动，是从1开始的。</td></tr><tr><td>4.在使用TCP和UDP中，使用的都是IP地址，根据IP地址找到对应的MAC会浪费时间，为什么不直接使用硬件地址MAC进行通信，而要使用抽象的IP地址并调用ARP来寻址？</td></tr><tr><td>回答：由于全世界存在着各式各样的网络，它们使用不同的硬件地址，要使这些异构的网络进行通信就必须进行非常复杂的，硬件地址转换工作，因此由用户或主机来完成这项工作几乎是不可能的，统一IP地址就把这个问题解决了。</td></tr><tr><td>5. 在RIP 协议中，如果原来路由表和新路由表目的网络和下一跳路由相同，但是更新了跳数有可能比原来更大，为什么要直接更新，原来跳数更少不是更快吗？</td></tr><tr><td>回答：原来路由表和新路由表目的网络和下一跳都相同，说明路由转发的路径方向是没有改变的，改变的是这条链路上路由的路由器数量，但是这条链路上的路由数不断更新，所以此时不应该选择最小的跳数而应该选择最新的跳数，确保路由信息是最新的信息。</td></tr><tr><td>6. RIP协议是如何避免环路？</td></tr><tr><td>回答：一般来说，避免环路的方法主要有6种：   1.定义最大值；   2.水平分割技术；   3.路由中毒；   4.反向路由中毒；   5.控制更新时间；   6.触发更新  1.定义最大值：  距离矢量路由算法可以通过IP头中的生存时间（TTL）来 纠错，但路由环路问题可能首先要求无穷计数。为了避免这个延时问题，距离矢量协议定义了一个最大值，这个数字是指最大的度量值（如rip协议最大值为16），比如跳数。也就是说，路由更新信息可以向不可到达的网络的路由中的路由器发送15次，一旦达到最大值16，就视为网络不可到达，存在故障，将不再接受来自访问该网络的任何路由更新信息。  2.水平分割：  一种消除路由环路并加快网络收敛的方法是通过叫做“水平分割”的技术实现的。其规则就是不向原始路由更新的方向再次发送路由更新信息（个人理解为单向更新，单向反馈）。比如有三台路由器ABC，B向C学习到访问网络10.4.0.0的路径以后，不再向C声明自己可以通过C访问10.4.0.0网络的路径信息，A向B学习到访问10.4.0.0网络路径信息后，也不再向B声明，而一旦网络10.4.0.0发生故障无法访问，C会向A和B发送该网络不可达到的路由更新信息，但不会再学习A和B发送的能够到达10.4.0.0的错误信息。  3.路由中毒（也称为路由毒化）：  定义最大值在一定程度上解决了路由环路问题，但并不彻底，可以看到，在达到最大值之前，路由环路还是存在的。为此，路由中毒就可以彻底解决这个问题。其原理是这样的：假设有三台路由器ABC，当网络10.4.0.0出现故障无法访问的时候，路由器C便向邻居路由发送相关路由更新信息，并将其度量值标为无穷大，告诉它们网络10.4.0.0不可到达，路由器B收到毒化消息后将该链路路由表项标记为无穷大，表示该路径已经失效，并向邻居A路由器通告，依次毒化各个路由器，告诉邻居10.4.0.0这个网络已经失效，不再接收更新信息，从而避免了路由环路。  4.反向中毒（也称为毒化逆转）：  结合上面的例子，当路由器B看到到达网络10.4.0.0的度量值为无穷大的时候，就发送一个叫做毒化逆转的更新信息给C路由器，说明10.4.0.0这个网络不可达到，这是超越水平分割的一个特列，这样保证所有的路由器都接受到了毒化的路由信息。  5.控制更新时间（即抑制计时器）：  抑制计时器用于阻止定期更新的消息在不恰当的时间内重置一个已经坏掉的路由。抑制计时器告诉路由器把可能影响路由的任何改变暂时保持一段时间，抑制时间通常比更新信息发送到整个网络的时间要长。当路由器从邻居接收到以前能够访问的网络现在不能访问的更新后，就将该路由标记为不可访问，并启动一个抑制计时器，如果再次收到从邻居发送来的更新信息，包含一个比原来路径具有更好度量值的路由，就标记为可以访问，并取消抑制计时器。如果在抑制计时器超时之前从不同邻居收到的更新信息包含的度量值比以前的更差，更新将被忽略，这样可以有更多的时间让更新信息传遍整个网络。  6.触发更新：  正常情况下，路由器会定期将路由表发送给邻居路由器。而触发更新就是立刻发送路由更新信息，以响应某些变化。检测到网络故障的路由器会立即发送一个更新信息给邻居路由器，并依次产生触发更新通知它们的邻居路由器，使整个网络上的路由器在最短的时间内收到更新信息，从而快速了解整个网络的变化。但这样也是有问题存在，有可能包含更新信息的数据包被某些网络中的链路丢失或损坏，其他路由器没能及时收到触发更新，因此就产生了结合抑制的触发更新，抑制规则要求一旦路由无效，在抑制时间内，到达同一目的地有同样或更差度量值的路由将会被忽略，这样触发更新将有时间传遍整个网络，从而避免了已经损坏的路由重新插入到已经收到触发更新的邻居中，也就解决了路由环路的问题。  新信息，包含一个比原来路径具有更好度量值的路由，就标记为可以访问，并取消抑制计时器。如果在抑制计时器超时之前从不同邻居收到的更新信息包含的度量值比以前的更差，更新将被忽略，这样可以有更多的时间让更新信息传遍整个网络。</td></tr><tr><td>7.UDP协议比TCP协议更快，并且UDP还不需要三次握手，但是为什么大多数应用软件仍然采用的是TCP协议？</td></tr><tr><td>回答：其实两种协议并没有好坏之分，应用程序采用哪种协议需要具体问题具体分析，要根据用途来选择具体的协议，或者说两种协议都用。通过计算机网络的学习知道UDP的特点是无连接的，有单播、多播、广播的功能，是面向报文的，不可靠的，头部的开销小。TCP的特点是面向连接的，只支持单播传输，面向字节流，是可靠传输，有拥塞控制功能，提供全双工通信。因此在开发一个应用程序时，需要先设想好该程序有哪些特点，再根据程序特点选择具体的协议。</td></tr><tr><td>8. OSPF与RIP两者有什么区别？</td></tr><tr><td>回答：RIP协议是一种传统的路由协议，适合比较小型的网络，但是当前Internet网络的迅速发展和急剧膨胀使RIP协议无法适应今天的网络。OSPF协议则是在Internet网络急剧膨胀的时候制定出来的，它克服了RIP协议的许多缺陷。RIP是距离矢量路由协议；OSPF是链路状态路由协议。</td></tr></tbody></table><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><h2 id="一、常用的网络命令分析"><a href="#一、常用的网络命令分析" class="headerlink" title="一、常用的网络命令分析"></a>一、常用的网络命令分析</h2><h3 id="1-查询DNS、IP，mac地址及DHCP服务的情况"><a href="#1-查询DNS、IP，mac地址及DHCP服务的情况" class="headerlink" title="1. 查询DNS、IP，mac地址及DHCP服务的情况"></a>1. 查询DNS、IP，mac地址及DHCP服务的情况</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令ipconfig/all，回车后获取该主机所有的网络相关信息。</p><p><img src="/images/compuer_net/DNS1.png" alt="">)<img src="/images/compuer_net/DNS2.png" alt=""></p><p>（2）分析：</p><p>①从图中可以看出这台笔记本启用的是网络是无线局域网适配器 Wi-Fi；</p><p><img src="/images/compuer_net/image-20210211124357596.png" alt=""></p><p>②DNS服务器的地址为192.168.99.1；</p><p>③主机的IPv6地址为fe80::f180:3236:7a46:dcb%12，IPv4地址为192.168.99.163；</p><p>④MAC地址即物理地址为3C-6A-A7-F4-C0-3B；</p><p>⑤DHCP的服务已经启用，DHCP的服务器为192.168.99.1，DHCPv6 IAID为205286055，DHCPv6客户端DUID为00-01-00-01-23-6D-93-FC-E4-B9-7A-52-BA-01；</p><h3 id="2-查看ARP表：MAC地址与IP地址的映射表"><a href="#2-查看ARP表：MAC地址与IP地址的映射表" class="headerlink" title="2.查看ARP表：MAC地址与IP地址的映射表"></a>2.查看ARP表：MAC地址与IP地址的映射表</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令arp -a，回车后查看主机的ARP表。</p><p><img src="/images/compuer_net/image-20210211124445362.png" alt=""></p><p>（2）分析：</p><p>①：一共有3个接口，分别为192.168.94.1 — 0x8、192.168.154.1 — 0x9和192.168.0.104 — 0xc；</p><p>②通过查看3个接口的MAC地址与IP地址的映射表，可以看到每个接口的第一个为动态类型，后面的都为静态类型。从表中可以直接看到ARP表的具体信息，每个MAC地址对应一个IP地址。</p><h3 id="3-查看共享资源"><a href="#3-查看共享资源" class="headerlink" title="3. 查看共享资源"></a>3. 查看共享资源</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令net view 192.168.0.104，回车后查看ip地址为192.168.0.104网络共享资源。</p><p><img src="/images/compuer_net/image-20210211124528621.png" alt=""></p><p>（2）分析：</p><p>通过图中可以看到该ip地址的主机没有上传网络共享资源。</p><h3 id="4-查看局域网内的主机名"><a href="#4-查看局域网内的主机名" class="headerlink" title="4. 查看局域网内的主机名"></a>4. 查看局域网内的主机名</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令net view，回车后查看局域网内的所有主机名。</p><p><img src="/images/compuer_net/image-20210211124603214.png" alt=""></p><p>（2）分析：</p><p>通过图中可以看到局域网内的主机名只有一个，为“<a href="file://DESKTOP-VOHRGHO">\\DESKTOP-VOHRGHO</a>”。</p><h3 id="5-查看用户列表"><a href="#5-查看用户列表" class="headerlink" title="5. 查看用户列表"></a>5. 查看用户列表</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令net user，回车后查看局域网内的用户列表。</p><p><img src="/images/compuer_net/image-20210211124633533.png" alt=""></p><p>（2）分析：</p><p>通过图中可以看到局域网内的用户列表只有一个，为“掩于岁月”。</p><h3 id="6-路由跟踪命令"><a href="#6-路由跟踪命令" class="headerlink" title="6. 路由跟踪命令"></a>6. 路由跟踪命令</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令tracert <a href="http://www.baidu.com，跟踪百度的路由信息。" target="_blank" rel="noopener">www.baidu.com，跟踪百度的路由信息。</a></p><p><img src="/images/compuer_net/image-20210211124709886.png" alt=""></p><p>（2）分析：</p><p>通过图中可以一共跟踪了13个<a href="http://www.a.shifen.com" target="_blank" rel="noopener">www.a.shifen.com</a> [14.215.177.38] 的路由，其中有4个超时了，剩下的9的都显示了路由跟踪的具体信息。延迟最低为1ms，最高为39ms。</p><h3 id="7-查看共享资源"><a href="#7-查看共享资源" class="headerlink" title="7. 查看共享资源"></a>7. 查看共享资源</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令net share，查看网络的共享资源。</p><p><img src="/images/compuer_net/image-20210211124814816.png" alt=""></p><p>（2）分析：</p><p>通过图中可以看出本主机并没有网络共享资源。</p><h3 id="8-netstat的相关操作"><a href="#8-netstat的相关操作" class="headerlink" title="8. netstat的相关操作"></a>8. netstat的相关操作</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中依次输入命令netstat -a（-b、-e、-f、-n、-o、-p proto、-q、-r、-s、-p、-t、-x、-y、interval），查看每个指令的具体功能；</p><p>（2）分析：</p><p>1.输入netstat -a后，显示了所有连接和侦听端口，可以看到每个活动连接的信息一共有协议、本地地址、外部地址和状态四个方面的内容。所有活动连接的协议一共有TCP和UDP两种，状态有LISTENING、ESTABLISHED、CLOSE_WAIT、SYN_SENT这几种。</p><p><img src="/images/compuer_net/image-20210211124931468.png" alt=""></p><p><img src="/images/compuer_net/image-20210211124942536.png" alt=""></p><p>2.输入netstat -b后，显示了在创建每个连接或侦听端口时涉及的可执行程序，执行命令后可以看出有哪些应用在使用网络并处于什么状态，例如程序NVIDIA Share.exe就处于ESTABLISHED的状态，说明该进程的连接已经建立。</p><p><img src="/images/compuer_net/image-20210211125004040.png" alt=""></p><p>3.输入netstat -e后，显示以太网统计信息，可以看出以太网接受了366845520个字节、399582个单播数据包和1476个非单播数据包。发送了128446546个字节，346964个单播数据包和4257个非单播数据包，但是有一个发送出现了错误。</p><p><img src="/images/compuer_net/image-20210211125024054.png" alt=""></p><p>4.输入netstat -f后，执行后可以看到外部地址的完全限定域名。</p><p><img src="/images/compuer_net/image-20210211125044853.png" alt=""></p><p>5.输入netstat -n后，执行后可以看到以数字形式显示地址和端口号。</p><p><img src="/images/compuer_net/image-20210211125111855.png" alt=""></p><p>6.输入netstat -o后，执行命令后显示拥有的与每个连接关联的进程 ID，可以看到每个活动连接使用的协议、本地地址、外部地址、状态和PID的信息。</p><p><img src="/images/compuer_net/image-20210211125129695.png" alt=""></p><p>7.输入netstat <code>-p TCP``（TCP可以换为其他协议）</code>后，执行命令后显示UDP协议的连接。</p><p><img src="/images/compuer_net/image-20210211125148277.png" alt=""></p><p>8.输入netstat -q后，执行命令后显示所有连接、侦听端口和绑定的非侦听 TCP 端口。</p><p><img src="/images/compuer_net/image-20210211125256503.png" alt=""></p><p>9.输入netstat -r，执行命令后显示该路由器的路由表。</p><p><img src="/images/compuer_net/image-20210211125314854.png" alt=""></p><p>10.输入netstat -s，执行命令后显示每个协议的统计信息。</p><p><img src="/images/compuer_net/image-20210211125333382.png" alt="">)<img src="/images/compuer_net/image-20210211125340736.png" alt=""></p><p>11.输入netstat -t，执行命令后显示当前连接卸载状态。</p><p><img src="/images/compuer_net/image-20210211125444463.png" alt=""></p><p>12.输入netstat - x，执行命令后显示 NetworkDirect 连接、侦听器和共享终结点,但是本台主机为空。</p><p><img src="/images/compuer_net/image-20210211125500439.png" alt=""></p><p>13.输入netstat -y，执行命令后显示所有连接的 TCP 连接模板。</p><p><img src="/images/compuer_net/image-20210211125518361.png" alt=""></p><p>14.输入netstat interval，执行命令后重新显示选定的统计信息。</p><p><img src="/images/compuer_net/image-20210211125535384.png" alt=""></p><h3 id="9-route的相关操作"><a href="#9-route的相关操作" class="headerlink" title="9. route的相关操作"></a>9. route的相关操作</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中依次输入命令route print（add、change、delete），查看每个指令的具体功能；</p><p>（2）分析:</p><p>①输入route print后，显示当前路由器中路由表的信息。</p><p><img src="/images/compuer_net/image-20210211125608623.png" alt="">)<img src="/images/compuer_net/image-20210211125615063.png" alt=""></p><p>②输入route add后，将新的路由项目添加给路由表。</p><p>③输入route change后，修改数据报的传输路由。</p><p>③输入route delete后将某条路由表项从路由表中删除。输入指令后系统给出了操作示例。</p><p><img src="/images/compuer_net/image-20210211125700727.png" alt=""></p><h3 id="10-nslookup"><a href="#10-nslookup" class="headerlink" title="10. nslookup"></a>10. nslookup</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令nslookup baidu.com，执行后查看对百度的输出结果。</p><p>（2）分析：</p><p>该指令用于测试或解决DNS服务器问题，该命令用两种模式:(1)非交互式模式；(2)交互式模式。可以看出百度的服务器给出了应答，地址为39.156.67.79和220.181.38.148。</p><p><img src="/images/compuer_net/image-20210211125744439.png" alt=""></p><h3 id="11-ftp"><a href="#11-ftp" class="headerlink" title="11. ftp"></a>11. ftp</h3><p>（1）实验步骤：</p><p>①打开电脑的cmd；</p><p>②在cmd中输入命令ftp。</p><p>③输入open 192.168.0.1建立ftp连接。</p><p>④但是连接被拒绝，建立连接失败。<img src="/images/compuer_net/image-20210211125830855.png" alt=""></p><h2 id="二、wireshark实验"><a href="#二、wireshark实验" class="headerlink" title="二、wireshark实验"></a>二、wireshark实验</h2><h3 id="1-TCP-IP格式"><a href="#1-TCP-IP格式" class="headerlink" title="1.TCP/IP格式"></a>1.TCP/IP格式</h3><h4 id="1-1-TCP报文格式"><a href="#1-1-TCP报文格式" class="headerlink" title="1.1 TCP报文格式"></a>1.1 TCP报文格式</h4><p>（1）实验步骤：</p><p>①开启 Wireshark Network Analyzer；</p><p>②选择WiFi进行捕获；</p><p><img src="/images/compuer_net/image-20210211125915286.png" alt=""></p><p>③过滤栏选择tcp进行过滤，停止捕获。</p><p>④选择第11条报文来分析TCP的报文格式。</p><p><img src="/images/compuer_net/image-20210211125933134.png" alt=""></p><p><img src="/images/compuer_net/image-20210211125943206.png" alt=""></p><p>（2）分析：</p><p><img src="/images/compuer_net/image-20210211130000192.png" alt=""></p><p>以这幅图的TCP报文格式对Wireshark捕获的分组11进行分析）</p><p>①这条TCP报文的源端口号为443，目的端口为5176。</p><p><img src="/images/compuer_net/image-20210211130027102.png" alt=""></p><p>②由图可得现32位序列号，即Sequence number对应为67fa8430。</p><p><img src="/images/compuer_net/image-20210211130050736.png" alt=""></p><p>③由图可得现32位确认号，即Acknowledgment number对应为13faa7be。</p><p><img src="/images/compuer_net/image-20210211130108839.png" alt=""></p><p>④ 由抓包图可以看到4位首部长度位0101，偏移量是 0101=5，TCP报文首部长度为5* 4 = 20字节。</p><p><img src="/images/compuer_net/image-20210211130126854.png" alt=""></p><p>⑤保留位（6位）由跟在数据偏移字段后的 6 位构成。</p><p><img src="/images/compuer_net/image-20210211130144918.png" alt=""></p><p>⑥这条报文的URG为0，ACK为1，PSH为0，RST为0，SYN为0，FIN为0。</p><p><img src="/images/compuer_net/image-20210211130204911.png" alt=""></p><p>⑦窗口大小为30492。</p><p><img src="/images/compuer_net/image-20210211130220613.png" alt=""></p><p>⑧ 校验和（16位）为c6df。</p><p><img src="/images/compuer_net/image-20210211130241641.png" alt=""></p><p>⑨紧急指针（16位）为0000。</p><p><img src="/images/compuer_net/image-20210211130303001.png" alt=""></p><h4 id="1-2-IP报文格式"><a href="#1-2-IP报文格式" class="headerlink" title="1.2 IP报文格式"></a>1.2 IP报文格式</h4><p>（1）实验步骤：</p><p>①开启 Wireshark Network Analyzer；</p><p>②选择WiFi进行捕获；</p><p><img src="/images/compuer_net/image-20210211130334560.png" alt=""></p><p>③过滤栏选择ip进行过滤，停止捕获。</p><p>④选择第5条报文来分析TCP的报文格式。</p><p><img src="/images/compuer_net/image-20210211130355079.png" alt=""></p><p>（2）分析：</p><p><img src="/images/compuer_net/image-20210211130414502.png" alt=""></p><p>（以这幅图的IP报文格式对Wireshark捕获的分组5进行分析）</p><p>① 版本：从图中可以看出目前的IP协议版本号为4。</p><p><img src="/images/compuer_net/image-20210211130428927.png" alt=""></p><p>② 首部长度：由图可以看出首部长度为为0101，偏移量为0101=5，首部长度为20字节。</p><p><img src="/images/compuer_net/image-20210211130503117.png" alt=""></p><p>③ 总长度：由图可以看出IP报文的总长度为90。</p><p><img src="/images/compuer_net/image-20210211130520359.png" alt=""></p><p>④ 标识：由图得出这是第8818个分片。</p><p><img src="/images/compuer_net/image-20210211130541678.png" alt=""></p><p>⑤ 标志：共3位。R、DF、MF三位。这个报文中三位都为0，DF位：为1表示不分片，为0表示分片。MF：为1表示“更多的片”，为0表示这是最后一片。</p><p><img src="/images/compuer_net/image-20210211130559903.png" alt=""></p><p>⑥ 片位移：这个报文显示片偏移为0。</p><p><img src="/images/compuer_net/image-20210211130615879.png" alt=""></p><p>⑦ 生存时间：该报文显示生存时间为128。</p><p><img src="/images/compuer_net/image-20210211130631966.png" alt=""></p><p>⑧ 协议：该报文显示使用的协议为UDP，代号为17。</p><p><img src="/images/compuer_net/image-20210211130655677.png" alt=""></p><p>⑨ 首部校验和：该报文显示的首部校验和为0000。</p><p><img src="/images/compuer_net/image-20210211130715278.png" alt=""></p><p>⑩ 源IP地址：该报文显示的源IP地址为192.168.0.104，即本机的IP地址。</p><p>  目的IP地址：该报文显示的目的IP地址为40.81.185.240。</p><p><img src="/images/compuer_net/image-20210211130736678.png" alt=""></p><h3 id="2-三次握手分析"><a href="#2-三次握手分析" class="headerlink" title="2. 三次握手分析"></a>2. 三次握手分析</h3><p>（1）TCP三次握手原理</p><p>三次握手，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。</p><p>第一次握手(SYN=1, seq=x):客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号X,保存在包头的序列号字段里。发送完毕后，客户端进入SYN_SEND 状态。</p><p>第二次握手(SYN=1,ACK=1,seq=y,ACKnum=x+1):服务器发回确认包(ACK)应答。即SYN 标志位和ACK标志位均为1。服务器端选择自己ISN序列号，放到Seq中，同时将确认序号(ACK)设置为客户的 ISN 加1，即X+1。发送完毕后，服务器端进入SYN_RCVD状态。</p><p>第三次握手(ACK=1，ACKnum=y+1)：客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1。发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。</p><p><img src="/images/compuer_net/image-20210211130802942.png" alt=""></p><p>（2）TCP三次握手wireshark分析</p><p>打开wireshark，选择本地连接接口并开始抓包。打开浏览器，自动打开浏览器首页，页面加载完毕，停止抓包。观察封包列表，可以得到三次握手的数据，输入http进行过滤，wireshark抓到包：</p><p><img src="/images/compuer_net/image-20210211130819006.png" alt=""></p><p>目的地址为218.25.208.218，在通过过滤找到三次握手的信息。</p><p><img src="/images/compuer_net/image-20210211130830670.png" alt=""></p><p>由此我们可以验证HTTP的确是通过TCP建立连接的。</p><p>选中TCP封包，分别查看其封包详细信息，可以得到其端口信息、报文段长度、头部长度、校验和、ACK等。</p><p>第一次握手数据包，可以看到客户端发送一个TCP，标志位为SYN，序列号为Seq=0， 代表客户端请求建立连接。如下图：</p><p><img src="/images/compuer_net/image-20210211130846798.png" alt=""></p><p>第二次握手数据包，可以看到服务器发回确认包, 标志位为 SYN,ACK. 将确认序号ACK设置为1.（Seq=0，Ack=1）如下图：</p><p><img src="/images/compuer_net/image-20210211130902879.png" alt=""></p><p>第三次握手数据包，可以看到客户端再次发送确认包(ACK) ，标志位为ACK，将sequence number+1（Seq=1，Ack=1）.如下图：</p><p><img src="/images/compuer_net/image-20210211130917302.png" alt=""></p><p>使用wireshark的工具统计-&gt;流量图生成TCP连接的图像，根据时间找到这次连接的位置，此次三次握手正如下图红框中所示。</p><p><img src="/images/compuer_net/image-20210211130931558.png" alt=""></p><p>经过上述三次握手过程，即建立了HTTP连接。</p><h3 id="3-流量控制分析"><a href="#3-流量控制分析" class="headerlink" title="3. 流量控制分析"></a>3. 流量控制分析</h3><p>（1）TCP流量控制原理</p><p>a.慢开始算法：</p><p>发送方维持一个叫做拥塞窗口cwnd的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。</p><p>从图可以看到，一个传输轮次所经历的时间其实就是往返时间RTT，而且每经过一个传输轮次，拥塞窗口cwnd就加倍。</p><p>为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：当cwnd&lt;ssthresh时，使用慢开始算法。</p><p>当cwnd&gt;ssthresh时，改用拥塞避免算法。</p><p>当cwnd=ssthresh时，慢开始与拥塞避免算法任意。</p><p><img src="/images/compuer_net/image-20210211131004440.png" alt=""></p><p>b. 拥塞避免算法：</p><p>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。</p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限ssthresh设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p><img src="/images/compuer_net/image-20210211131016152.png" alt=""></p><p>① 拥塞窗口cwnd初始化为1个报文段，慢开始门限初始值为16</p><p>②执行慢开始算法，指数规律增长到第4轮，即cwnd=16=ssthresh，改为执行拥塞避免算法，拥塞窗口按线性规律增长</p><p>③cwnd=24时，网络出现超时（拥塞），更新后的ssthresh=12，cwnd重新设置为1，并执行慢开始算法。当cwnd=12=ssthresh时，改为执行拥塞避免算法</p><p>c. 快重传算法：</p><p>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认,而不是等到自己发送数据时再确认。快重传算法规定，发送方一旦一次收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。如下图：</p><p><img src="/images/compuer_net/image-20210211131044623.png" alt=""></p><p>d. 快恢复算法：</p><p>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下来并不执行慢开始算法。考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh减半后的值，然后执行拥塞避免算法，使cwnd缓慢增大。</p><p><img src="/images/compuer_net/image-20210211131108527.png" alt=""></p><p>（2）TCP流量控制的wireshark分析</p><p>实验步骤：</p><p>①打开你的浏览器。输入：<a href="http://gaia.cs.umass.edu/wiresharklabs/alice.txt" target="_blank" rel="noopener">http://gaia.cs.umass.edu/wiresharklabs/alice.txt</a><br> 将会看到 Alice in Wonderland 的文本版，然后暂时另存到电脑中；<img src="/images/compuer_net/image-20210211131125908.png" alt=""></p><p>②浏览器中输入：<a href="http://gaia.cs.umass.edu/wireshark-labs/TCP-wireshark-file1.html" target="_blank" rel="noopener">http://gaia.cs.umass.edu/wireshark-labs/TCP-wireshark-file1.html</a></p><p>③在屏幕中会显示：</p><p><img src="/images/compuer_net/image-20210211131154397.png" alt=""></p><p>④用“浏览…”按钮选取你刚才保存的文件，先不按“ Upload alice.txt file”按钮；</p><p>⑤打开 Wireshark，开始包的捕获；</p><p>⑥再回到浏览器，按下“ Upload alice.txt file”按钮向 gaia.cs.umass.edu 服务器来上载文件；</p><p><img src="/images/compuer_net/image-20210211131229470.png" alt=""></p><p>⑦停止 Wireshark 的包捕获。</p><p>结果分析：</p><p>使用wireshark自带的绘图工具IO Graph绘图，我们可以窥见一个TCP慢启动的大致模型。</p><p><img src="/images/compuer_net/image-20210211131248688.png" alt=""></p><p>若向邮件服务器上传一个较大的文件，则曲线可能波动较大。</p><p><img src="/images/compuer_net/image-20210211131305678.png" alt=""></p><p>我们可以在上述较大文件上传抓取的数据包中找到慢启动过程：</p><p><img src="/images/compuer_net/image-20210211131319807.png" alt=""></p><p>也可以发现乘法减少过程：</p><p><img src="/images/compuer_net/image-20210211131333304.png" alt=""></p><p><img src="/images/compuer_net/image-20210211131340848.png" alt=""></p><p>TCP window update表明TCP窗口清空了。</p><h2 id="三、编程代码分析"><a href="#三、编程代码分析" class="headerlink" title="三、编程代码分析"></a>三、编程代码分析</h2><h3 id="1-TCP编程实验以及代码分析"><a href="#1-TCP编程实验以及代码分析" class="headerlink" title="1. TCP编程实验以及代码分析"></a>1. TCP编程实验以及代码分析</h3><p>实验环境：</p><p>Python3.8.6</p><p>Pycharm2020.2.2（专业版）</p><p>主机一台（作为用户端）</p><p>服务器一个(作为服务端)</p><p>（1）wireshark来分析TCP编程输出。</p><p>a.服务器端启动并等待连接。</p><p><img src="/images/compuer_net/image-20210211131432726.png" alt=""></p><p>b.用户端请求连接，并且连接成功。</p><p><img src="/images/compuer_net/image-20210211131444912.png" alt=""></p><p><img src="/images/compuer_net/image-20210211131451576.png" alt=""></p><p>c.建立连接前打开wireshark，选择Wi-Fi网卡接口进行抓包，观察封包的列表，可以看到三次握手的数据。</p><p>从报文可以看出用户端使用了随机端口号1971向端口号为1200的服务端发送了一个TCP，标志位为SYN,序列号Seq为0，这条报文说明客户端请求建立连接。</p><p><img src="/images/compuer_net/image-20210211131502816.png" alt=""></p><p>然后服务端发送了确认包，标志位为SYN，ACK，将确认序列号ACK设置为了1。</p><p><img src="/images/compuer_net/image-20210211131513989.png" alt=""></p><p>最后客户端又发送了确认包ACK，标志位为ACK，并且Seq增加了1从0变成了1。</p><p><img src="/images/compuer_net/image-20210211131528558.png" alt=""></p><p>d．客户端发送消息：此消息为客户端发送。</p><p>客户端：</p><p><img src="/images/compuer_net/image-20210211131540503.png" alt=""></p><p>服务端收到信息：</p><p><img src="/images/compuer_net/image-20210211131550822.png" alt=""></p><p>从Wireshark捕捉的TCP数据包，可以看到客户端发送了一条PSH为1的TCP报文段，尽快地交付给了接受应用进程，没有等到整个缓存都填满了后再向上交付。</p><p><img src="/images/compuer_net/image-20210211131602521.png" alt=""></p><p>然后服务端向客户端发送了一个确认TCO数据包，标志位为ACK，由于上一条TCO数据包的长度len为27，所以此时的确认数据包中的ACK为28。</p><p><img src="/images/compuer_net/image-20210211131614893.png" alt=""></p><p>流量图为：</p><p><img src="/images/compuer_net/image-20210211131630080.png" alt=""></p><p>e.服务端回复信息：此消息为服务端发送</p><p>服务端发送信息：</p><p><img src="/images/compuer_net/image-20210211131640991.png" alt=""></p><p>客户端回复信息：</p><p><img src="/images/compuer_net/image-20210211131652656.png" alt=""></p><p>从Wireshark捕捉的TCP数据包，可以看到服务端发送了一条PSH=1的TCP报文段，尽快地交付接受应用进程，而不是等到整个缓存都填满后再向上交付。</p><p><img src="/images/compuer_net/image-20210211131709183.png" alt=""></p><p>然后客户端向服务端发送了一个确认TCO数据包，标志位为ACK，由于上一条TCO数据包的长度len为27，所以此时的确认数据包中的ACK为28。</p><p><img src="/images/compuer_net/image-20210211131719737.png" alt=""></p><p>流量图为：</p><p><img src="/images/compuer_net/image-20210211131733231.png" alt=""></p><p>f.关闭程序后，wireshark捕获1200端口的数据包</p><p>第一次挥手：客户端发送了一个Fin=1，Seq=28，ACK=28的报文，请求关闭客户机到服务器的数据传送。</p><p><img src="/images/compuer_net/image-20210211131747490.png" alt=""></p><p>第二次挥手：服务端收到客户端的Fin，它发回了一个ACK，确认序号为收到得到序号+1，即ACK=28+1=29，Seq=28。</p><p><img src="/images/compuer_net/image-20210211131759330.png" alt=""></p><p>第三次挥手：客户端收到服务端发送的一个Fin=1，用于关闭服务端到客户端的数据传送，Seq=28，Ack=29；</p><p><img src="/images/compuer_net/image-20210211131810239.png" alt=""></p><p>第四次挥手：客户端收到服务端发的Fin报文后，发送一个ACK给服务端，确认序号为收到序号+1，ACK=28+1=29，Seq=29，服务器进入关闭状态，完成了四次挥手。</p><p><img src="/images/compuer_net/image-20210211131826615.png" alt=""></p><p>（2）TCP客户端与服务端的代码分析</p><p><strong>服务器端：</strong></p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> socket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析：</strong>程序需要使用到底层网络接口库</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">host <span class="token operator">=</span> <span class="token string">"192.168.0.104"</span> port <span class="token operator">=</span> <span class="token number">1200</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>分析：</strong>host中存服务端的主机ip地址192.168.0.104，port中存用于建立连接的端口号；</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析：</strong>这一行创建了服务端的套接字，命名为s，第一个参数是指示底层网络使用的是IPv4，    第二个参数说明了这个套接字是SOCK_STREAM类型。这说明了这是一个TCP套接字；</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析：</strong>这行代码将服务器的端口号port与该套接字关联起来。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​      print(‘服务器已经启动’)</p><p><strong>分析：</strong>这行让服务器聆听来自客户的TCO请求，参数1为请求连接的最大数量，启动后输   出“服务器已经启动”，服务端处于侦听状态，等待连接。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已经建立连接'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>执行这行代码说明有客户请求连接，程序为s调用了accept()方法，这在服务器中创  建了一个名为conn的新套接字由这个特定用户专用。客户与服务器完成了握手，在    用户得到套接字与服务器的套接字之间创建了一个TCP连接，借助于创建的TCP连    接，客户端与服务端可以通过这个连接互相发送字节。并且输出建立连接的ip地址      与端口号，输出“已经建立连接”告知用户连接已经建立完成。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>       <span class="token keyword">try</span><span class="token punctuation">:</span>         data <span class="token operator">=</span> conn<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>         data <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>           <span class="token keyword">break</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'从客户端接收到信息为：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>         send <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'给客户端接的回复信息为：'</span><span class="token punctuation">)</span>         conn<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>send<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这是一个循环，用于服务端与客户端的信息传输与交流，用recv（）捕获客户端发送  的信息并存在data中，先将data解码为字符串，如果data为空就退出循环，不为空     就输出从客户端接收到的信息内容，接着让用户输入服务端给客户端的回复信息，编    码后发送到客户端，并有一个异常处理的语句。通过这段代码可以实现客户端与服务    端的信息交流。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>分析：</strong>关闭两个套接字，连接被释放。</p><p><strong>客户端：</strong></p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">IP <span class="token operator">=</span> <span class="token string">'119.45.115.128'</span> port <span class="token operator">=</span> <span class="token number">1200</span>  s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>ip为服务端的ip地址，端口号与服务端的端口号一致，最后创建了客户的套接字，   称为s。第一个参数说明底层网络使用的是IPv4，第二个参数说明了这个套接字是  SOCK_STREAM类型。这表明了s是一个TCP套接字。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>     s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>IP<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'服务器没有找到或未打开！'</span><span class="token punctuation">)</span>     sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这包含了一个异常处理语句，如果连接没有建立成功就输出“服务器没有找到或未打     开！”），然后关闭。否者连接建立成功，s.connect((IP, port))语句成功执行，这行代码  发起了客户与服务端之间的TCO连接，connect（）的参数是这条连接中服务器的地      址和端口号。这行代码执行后将进行三次握手，最后创建TCP连接。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span> <span class="token keyword">try</span><span class="token punctuation">:</span> trigger <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入待发送的数据：(exit-退出)"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> trigger <span class="token operator">==</span> <span class="token string">'exit'</span><span class="token punctuation">:</span>   <span class="token keyword">break</span> s<span class="token punctuation">.</span>sendall<span class="token punctuation">(</span>trigger<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> data <span class="token operator">=</span> s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> data <span class="token operator">=</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'从服务器接收到的结果为：'</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这仍然是一个循环用于客户端与服务端的信息交流，让用户先输入需要发送的数据，     如果输入为“exit”就退出循环，否则将发送的数据编码后发送到服务端，然后捕捉      服务端发回的信息并解码后输出从服务器端接收到的信息。其中包含一个异常处理语      句，如果捕捉到异常就输出。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">s<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析：</strong>关闭了套接字，也就是关闭了客户和服务器之间的TCP连接。</p><h3 id="2-UDP编程实验以及代码分析"><a href="#2-UDP编程实验以及代码分析" class="headerlink" title="2. UDP编程实验以及代码分析"></a>2. UDP编程实验以及代码分析</h3><p>实验环境：</p><p>Python3.8.6</p><p>Pycharm2020.2.2（专业版）</p><p>主机一台（作为用户端）</p><p>服务器一个(作为服务端)</p><p>（1）wireshark来分析UDP编程输出。</p><p>a.建立连接，分别启动服务端与客户端建立连接</p><p>服务端：</p><p><img src="/images/compuer_net/image-20210211132351598.png" alt=""></p><p>客户端：</p><p><img src="/images/compuer_net/image-20210211132403497.png" alt=""></p><p>b.客户端向服务端发送信息“此消息为客户端发送”，并收到服务器自动返回的信息</p><p>客户端：</p><p><img src="/images/compuer_net/image-20210211132417248.png" alt=""></p><p>服务端：</p><p><img src="/images/compuer_net/image-20210211132431664.png" alt=""></p><p>whireshark抓到的包：</p><p><img src="/images/compuer_net/image-20210211132443039.png" alt=""></p><p>第一条为客户端向服务端发送的信息，第二条为服务端返回的信息。</p><p>（2）UDP客户端与服务端的代码分析</p><p><strong>服务器端：</strong></p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">HOST <span class="token operator">=</span> <span class="token string">''</span>PORT <span class="token operator">=</span> <span class="token number">3555</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>HOST为主机的ip地址即119.45.115.128，使用的端口号为3555，给BUFSIZ赋值1024      是将BUFSIZ作为一个常量后面控制单次传输的最大字节数，ADDR是将ip地址与端口    号封装起来。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">udpServerSocket <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">)</span>udpServerSocket<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>分析：</strong>第一行创建了服务端的套接字，命名为udpServerSocket，第一个参数说明了地址簇，      AF_INET说明了底层网络使用了IPv4，第二个参数指示了该套接字是SOCK_DGRAM类   型的，这意味着他是一个UDP套接字。第二行将端口号3555与该服务器的套接字绑   定在一起。所以在UDP的服务端中代码显式地为该套接字分配了一个端口号，这样    任何人都可以向位于该服务器的IP地址的端口3555发送一个分组，这个分组会导向  这个套接字。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>      data<span class="token punctuation">,</span> addr <span class="token operator">=</span> udpServerSocket<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'来自主机 %s，端口: %s.'</span> <span class="token operator">%</span> addr<span class="token punctuation">)</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      reply <span class="token operator">=</span> <span class="token string">'Hello, this is udpserver!'</span>      udpServerSocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>reply<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> addr<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>      <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这是一个循环，这个循环让UDP的服务端无限接收处理来自客户的分组。一直等待   分组的到来。当分组到达这个服务器的套接字时，传输的数据信息存在了变量data      中，分组的源地址被存在了变量addr中。接受到信息后程序会先输出信息来自哪个    主机哪个端口，然后再输出信息。由于变量addr中包含了客户的IP地址和客户的端    口号，即为信息的返回地址，利用这个地址，服务器向源地址发送了一条reply信息   给源地址的主机。还有一句异常处理语句，如果发现异常就输出。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">udpServerSocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析：</strong>这行命令时关闭套接字，服务端关闭不在收到信息。</p><p><strong>客户端：</strong></p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">HOST <span class="token operator">=</span> <span class="token string">'119.45.115.128'</span>PORT <span class="token operator">=</span> <span class="token number">3555</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>HOST为服务器端的目的地址119.45.115.128，PORT为服务端开放用于信息交流的端  口号，给BUFSIZ赋值1024      是将BUFSIZ作为一个常量后面控制单次传输的最大    字节数，ADDR是将服务端ip地址与端口号封装起来。</p><p><strong>代码：</strong>udpClientSocket = socket(AF_INET, SOCK_DGRAM)</p><p><strong>分析：</strong>这一行创建了客户的套接字，命名为udpClientSocket，第一个参数表明了地址簇，    AF_INET说明了底层网络用的是IPv4，第二个参数表明了这个套接字是SOCK_DGRAM    类型的，意味着这是一个UDP的套接字。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   <span class="token keyword">try</span><span class="token punctuation">:</span>       data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'>'</span><span class="token punctuation">)</span>       <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'send the data: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>       msg <span class="token operator">=</span> data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 发送数据:</span>       udpClientSocket<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> ADDR<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true"># 接收数据:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'receive the reply: '</span> <span class="token operator">+</span> udpClientSocket<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>       <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这个循环用于客户端与服务端的通讯，客户端要求用户先输入需要传输的数据内容，     然后编码后向服务器端发送这些数据，发送后服务器会回复，将服务端发送的信息解     码后输出出来。同样有一个异常处理语句，如果发现异常就将异常打印出来。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">udpClientSocket<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>分析：</strong>改行关闭了套接字，关闭了这个进程。</p><h3 id="3-OSPF编程实验以及代码分析"><a href="#3-OSPF编程实验以及代码分析" class="headerlink" title="3. OSPF编程实验以及代码分析"></a>3. OSPF编程实验以及代码分析</h3><p>（1）OSFP原理</p><p>a.每台路由器学习激活的直接相连的网络。</p><p>b.每台路由器和直接相连的路由器互交，发送Hello报文，建立邻居关系。</p><p>c.每台路由器构建包含直接相连的链路状态的LSA（Link-State Advertisement，链路状态通告）。链路状态通告(LSA)中记录了所有相关的路由器，包括邻路由器的标识、链路类型、带宽等。</p><p>d.每台路由器泛洪链路状态通告（LSA）给所有的邻路由器，并且自己也在本地储存邻路由发过来的LSA，然后再将收到的LSA泛洪给自己的所有邻居，直到在同一区域中的所有路由器收到了所有的LSA。每台路由器在本地数据库中保存所有收到的LSA副本，这个数据库被称作”链路状态数据库（LSDB，Link-State Database）”</p><p>e.每台路由器基于本地的”链路状态数据库(LSDB)”执行”最短路径优先（SPF）”算法，并以本路由器为根，生成一个SPF树，基于这个SPF树计算去往每个网络的最短路径，也就得到了最终的路由表。</p><p><img src="/images/compuer_net/image-20210211132835616.png" alt=""></p><p>(2)OSPF Python 模拟实现</p><p>a.运行程序，向程序输入5个路由，为A,B,C,D,E这5个路由。</p><p>A的路由信息：</p><p><img src="/images/compuer_net/image-20210211132846335.png" alt=""></p><p>B的路由信息:</p><p><img src="/images/compuer_net/image-20210211132856536.png" alt=""></p><p>C的路由信息：<img src="/images/compuer_net/image-20210211132909447.png" alt=""></p><p>D的路由信息：<img src="/images/compuer_net/image-20210211132923680.png" alt=""></p><p>E的路由信息：</p><p><img src="/images/compuer_net/image-20210211132935111.png" alt=""></p><p>b.查看A,B,C,D,E的路由表：</p><p>A的路由表：</p><p><img src="/images/compuer_net/image-20210211132948022.png" alt=""></p><p>B的路由表：</p><p><img src="/images/compuer_net/image-20210211132957527.png" alt=""></p><p>C的路由表：</p><p><img src="/images/compuer_net/image-20210211133009383.png" alt=""></p><p>D的路由表：</p><p><img src="/images/compuer_net/image-20210211133019250.png" alt=""></p><p>E的路由表：</p><p><img src="/images/compuer_net/image-20210211133030159.png" alt=""></p><p><strong>(3)**</strong>代码分析**</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dijkstra</span><span class="token punctuation">(</span>packets<span class="token punctuation">,</span>node_route<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#Dijkstra算法</span>    table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#节点node_route的路由表</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#初始化table</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">!=</span>float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            row<span class="token operator">=</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span>packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            row<span class="token operator">=</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span>packets<span class="token punctuation">[</span>node_route<span class="token punctuation">]</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'无'</span><span class="token punctuation">,</span><span class="token boolean">False</span><span class="token punctuation">]</span>        table<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>    count<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> count<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp<span class="token operator">=</span><span class="token number">0</span>  <span class="token comment" spellcheck="true">#temp用于保存当前table中距离最小的下标</span>        min<span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#min用于记录当前的距离最小值</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">False</span> <span class="token operator">and</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span><span class="token punctuation">:</span>                min<span class="token operator">=</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                temp<span class="token operator">=</span>i        table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">True</span>  <span class="token comment" spellcheck="true">#把temp对应的节点加入到已经找到的最短路径的集合中</span>        count<span class="token operator">=</span>count<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">False</span> <span class="token operator">and</span> packets<span class="token punctuation">[</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span>float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>packets<span class="token punctuation">[</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#如果新得到的边可能影响其它未访问的节点，那就更新它的最短距离和下一跳路由器</span>                table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>packets<span class="token punctuation">[</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>                table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>table<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    table<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> table<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>   这为OSPF的核心算法，即Dijkstra算法，先定义一个空表table用于存储结点      的路由表，先对table进行初始化，对packets进行遍历，如果packets中存储的不是    +∞，那么临时变量row为一个列表信息（包括结点位置key，packets中存的跳数，    结点位置key，false）；否则就是+∞，说明不可达，那么临时变量row的列表信息中存储的是（节点位置key，+∞，“无”（即没有信息），false），判断结束后将row存入      table列表的尾部。</p><p>​        先是一个大的循环，循环次数为列表的长度，先默认table中距离最小位置的下标      temp为0，默认最小值为+∞。接着进入一个小的循环，循环次数为列表的长度，如     果table中对应元素的第四个存储信息为false并且该元素的第二个存储信息（即跳数）      小于最小值min，那么更新最小值min为新的跳数，下标temp也更新为该元素的位      置。循环结束后把temp对应的节点加到已经找到的最短路径的集合中。控制最外层   循环的count增加1。</p><p>​           紧接着进入第二个小的循环，循环次数仍然为table列表的长度，如果同时满足     ①table中该该元素的第四个存储信息为false②packets中对应位置的跳数不为+∞ ③   table的temp位置存储的跳数与packets中存储的跳数相加后的和小于table该位置    （i）的跳数三个条件，就更新它的最短路径与下一条路由器。更新结束后结束循环。</p><p>​      最后对table进行排序，排序结束后返回存储路由表信息的table。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    packets<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">#所有的链路状态分组</span>    nodes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#所有的节点</span>    node<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'请输入节点，以#结束：'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> node<span class="token operator">!=</span><span class="token string">'#'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">not</span> <span class="token keyword">in</span> nodes<span class="token punctuation">)</span><span class="token punctuation">:</span>            nodes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'节点%s的链路状态分组已存在！'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>            node <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点，以#结束：'</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        per<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        row<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>        <span class="token keyword">while</span> row<span class="token operator">!=</span><span class="token string">'*'</span><span class="token punctuation">:</span>            row<span class="token operator">=</span>row<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#以空格分割输入的字符串</span>            row<span class="token operator">=</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">True</span> <span class="token keyword">else</span> x <span class="token keyword">for</span> x <span class="token keyword">in</span> row<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#把度量置为整型</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#检查输入是否合理</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'输入违规！'</span><span class="token punctuation">)</span>                row <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">in</span> per<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#避免重复</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'节点%s的链路状态分组中已有此项！'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>                row <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>                <span class="token keyword">continue</span>            per<span class="token punctuation">[</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#向节点node的链路状态分组中添加表项</span>            row <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点%s的链路状态分组(相邻路由器，度量)，以空格隔开，以*结束：'</span> <span class="token operator">%</span> node<span class="token punctuation">)</span>        packets<span class="token punctuation">[</span>node<span class="token punctuation">]</span><span class="token operator">=</span>per  <span class="token comment" spellcheck="true">#向所有的链路状态分组中添加节点node的链路状态分组</span>        node <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入节点，以#结束：'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#将与每一节点未直接相邻的节点的度量置为无穷大（自身除外）</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> packets<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nodes<span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>key <span class="token operator">and</span> <span class="token punctuation">(</span>i <span class="token operator">not</span> <span class="token keyword">in</span> packets<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                packets<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>float<span class="token punctuation">(</span><span class="token string">'Inf'</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        node_route <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入你想查看路由表的节点：'</span><span class="token punctuation">)</span>        table<span class="token operator">=</span>dijkstra<span class="token punctuation">(</span>packets<span class="token punctuation">,</span>node_route<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'节点%s的路由表如下:'</span> <span class="token operator">%</span> node_route<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'目的网络  距离  下一跳路由器'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> table<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'   '</span><span class="token operator">+</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'      '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'       '</span><span class="token operator">+</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>   此为执行的主函数，先定义一个空字典packets存储所有的链路状态分组，定义一      个nodes空列表存储所有的结点。先让用户输入一个结点，如果输入的是“#”，代表    输入节点已经结束。否则输入的不是“#”，判断这个节点是否在nodes列表中，如果    不在就加入nodes的尾部，如果在列表中就告诉用户列表中已存在，继续输入其他节    点。节点输入后再让用户输入这个结点的链路状态分组，如果输入的为“<em>”就说明输      入完毕退出循环，否则不为“</em>”，获取用户的非“*”输入的字符串后，将字符串以空  格进行切割，再把切割后的第二个元素的数据类型调整为整形。调整后判断输入是否    合法，如果跳数为≤0的数，告诉用户输入不合法请重新输入，合法后检查是否在per     中，如果存在就告诉用户状态分组已经有了请重新输入。确定合法且不重复后向节点  node的链路状态添加这一个表项。循环继续执行，执行相同的操作，知道用户输入“#”     后退出循环，结束输入。</p><p>​           遍历字典packets中每个节点，如果节点位置不等于key并且这个位置不是    packets的key列表的键，就将跳数设置为无穷大。这步操作是扫描每个结点的链路状      态分组，确保链路状态分组中有所有的其他节点，如果的链路状态分组中没有就加上    去并将跳数设置为+∞表示不可达。</p><p>​           接下来是输出路由表，这是一个循环，一次让用户获取一个节点的路由表。先执      行dijkstra算法确定最短路径并存储在table中，然后依次输出这个节点路由表的所有  信息，包括目的网络、距离和下一条路由器这些信息。</p><h3 id="4-RIP编程实验以及代码分析"><a href="#4-RIP编程实验以及代码分析" class="headerlink" title="4. RIP编程实验以及代码分析"></a>4. RIP编程实验以及代码分析</h3><p>（1）RIP原理</p><p>RPI协议是一种内部网关协议（IGP），是一种动态路由选择协议，用于自治系统（AS）内的路由信息的传递。RIP协议基于距离矢量算法（DistanceVectorAlgorithms），使用“跳数”来衡量到达目标地址的路由距离。这种协议的路由器只关心自己周围的世界，只与自己相邻的路由器交换信息，范围限制在15跳(15度)之内。获取新的路由信息时：</p><p>a.  对本路由表中已有的路由项，当发送报文的网关相同时，不论跳数增大还是减少，都更新该路由表项的跳数。</p><p>b.  对本路由表中已有的路由项，当发送报文的网关不同时，只有在跳数减少时才更新该路由表项。</p><p>c.   对本路由表中不存在的路由项，在度量小于不可达的跳数时，在路由表中增加该路由项目。</p><p>（2）RIP Python 模拟实现</p><p>a.输入当前路由表行数为5.</p><p><img src="/images/compuer_net/image-20210211140331577.png" alt=""></p><p>b.输入路由表的内容（格式为【目的网络，距离，下一条】</p><p><img src="/images/compuer_net/image-20210211140345072.png" alt=""></p><p>c.输入新路由表来自的路由器A以及新路由表（格式为【目的网络，跳数】）</p><p><img src="/images/compuer_net/image-20210211140357897.png" alt=""></p><p>d.  获取更新后的路由表</p><p><img src="/images/compuer_net/image-20210211140413689.png" alt=""></p><p><strong>(3)**</strong>代码分析**</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Net</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>DesNet<span class="token punctuation">,</span>Dis<span class="token punctuation">,</span>NextHoop<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>DesNet <span class="token operator">=</span> DesNet     <span class="token comment" spellcheck="true">#目的网络</span>        self<span class="token punctuation">.</span>Dis <span class="token operator">=</span> Dis       <span class="token comment" spellcheck="true">#距离</span>        self<span class="token punctuation">.</span>NextHoop <span class="token operator">=</span> NextHoop     <span class="token comment" spellcheck="true">#下一跳</span>        self<span class="token punctuation">.</span>next <span class="token operator">=</span> None<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这是一个节点类，数据元素包括目的网络、距离、下一条的网络和下一个节点的位置。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Link</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造函数</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>head <span class="token operator">=</span> Net<span class="token punctuation">(</span>None<span class="token punctuation">,</span>None<span class="token punctuation">,</span>None<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 头节点为空</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> self<span class="token punctuation">.</span>head        self<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>为链路link类的构造函数，使用了带附加头节点链表的数据结构，初始头结点为空，     尾节点指向头结点，节点数为1（空的头结点）。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">      <span class="token comment" spellcheck="true"># 添加节点</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>DesNet<span class="token punctuation">,</span>Dis<span class="token punctuation">,</span>NextHoop<span class="token punctuation">)</span><span class="token punctuation">:</span>        net <span class="token operator">=</span> Net<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span>Dis<span class="token punctuation">,</span>NextHoop<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 创建新节点</span>        self<span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> net                    <span class="token comment" spellcheck="true"># 尾节点的下一个节点为新节点</span>        self<span class="token punctuation">.</span>tail <span class="token operator">=</span> net                         <span class="token comment" spellcheck="true"># 尾节点为新节点</span>        self<span class="token punctuation">.</span>size <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这个函数的作用为添加节点，先创建一个新节点（参数DesNet为目的网络，Dis为  距离，NextHoop为下一跳），让尾节点的下一个节点为这个新节点，此时尾节点为这  个新节点，节点个个数增加1。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 插入节点（此节点作为第index个节点）</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            insert_net <span class="token operator">=</span> Net<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next  <span class="token comment" spellcheck="true"># 推进到要插入的位置</span>            insert_net<span class="token punctuation">.</span>next <span class="token operator">=</span> net<span class="token punctuation">.</span>next            net<span class="token punctuation">.</span>next <span class="token operator">=</span> insert_net            self<span class="token punctuation">.</span>size <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这个函数的作用为在index位置插入节点，如果插入位置index大于节点个数，那么  无法插入，小于节点个数时，让“指针”net指向头结点，根据信息创建需要插入的    节点insert_net，再通过循环将net推进到需要插入的位置，此时插入节点insert_net  的下一个节点为net的下一个节点，net的下一个节点变为插入节点insert_net，节   点的个数增加1个。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 删除节点（索引为index）</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next            temp <span class="token operator">=</span> net<span class="token punctuation">.</span>next            net<span class="token punctuation">.</span>next <span class="token operator">=</span> temp<span class="token punctuation">.</span>next            self<span class="token punctuation">.</span>size <span class="token operator">=</span> self<span class="token punctuation">.</span>size <span class="token operator">-</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这个函数的功能为删除位置index的节点，如果位置index大于链表长度无法删除，  小于链表长度时，让“指针”net指向链表的头结点，然后通过循环将net推进到需  要删除的位置，用临时变量temp存储net的下一个节点，然后net的下一个节点改   编为temp的下一个节点，节点的个数减少1，删除完成。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 改变指定节点的数据</span>    <span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 推进到要改变节点的位置</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next            net<span class="token punctuation">.</span>DesNet <span class="token operator">=</span> DesNet            net<span class="token punctuation">.</span>Dis <span class="token operator">=</span> Dis            net<span class="token punctuation">.</span>NextHoop <span class="token operator">=</span> NextHoop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这个函数的作用为改变指定节点位置inedx的数据，如果位置index大于链表长度无  法删除。小于链表长度时，让“指针”net指向链表的头结点，然后通过循环将net    推进到需要改变节点的位置，将该节点的目的地址换为新的目的地址，距离换为新的   距离，下一跳地址更新为新的下一条地址。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 返回节点的数据</span>    <span class="token keyword">def</span> <span class="token function">getData</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> self<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 判断是否超过链表的长度</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'链表还没有这么长哟！请输入小一点的整数......'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            net <span class="token operator">=</span> self<span class="token punctuation">.</span>head            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>                net <span class="token operator">=</span> net<span class="token punctuation">.</span>next            <span class="token keyword">return</span> <span class="token punctuation">[</span>net<span class="token punctuation">.</span>DesNet<span class="token punctuation">,</span> net<span class="token punctuation">.</span>Dis<span class="token punctuation">,</span> net<span class="token punctuation">.</span>NextHoop<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>该函数的作用为返回位置为index的数据，如果果位置index大于链表长度无法返回。   小于链表长度时，让“指针”net指向链表的头结点，然后通过循环将net推进到需要  返回节点的位置，然后返回该节点的目的网络，距离和下一跳网络的信息。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># 返回节点的长度</span>    <span class="token keyword">def</span> <span class="token function">getSize</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>该函数的作用为返回节点的长度，直接返回节点的个数即可。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 获取这个链表的长度</span>        count <span class="token operator">=</span> <span class="token number">0</span>        cur <span class="token operator">=</span> self<span class="token punctuation">.</span>_head        <span class="token keyword">while</span> cur <span class="token operator">!=</span> None<span class="token punctuation">:</span>            count <span class="token operator">+=</span> <span class="token number">1</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next        <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>这个函数的作用为获取链表的长度，初始计数的长度count为0，指针cur指向头结  点，然后遍历指针，每遍历一个节点count增加1，遍历结束后返回count值就是返    回链表的长度。</p><p><strong>代码：</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    table <span class="token operator">=</span> Link<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始路由表</span>    NewTable <span class="token operator">=</span> Link<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 来自某个路由器的路由表</span>    FinalTable <span class="token operator">=</span> Link<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 最终形成的路由表</span>    temptable1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    temptable2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入初始路由表行数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入整个路由表：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>        DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        table<span class="token punctuation">.</span>add<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span>        FinalTable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> NextHoop<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'路由表初始化完成'</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'新路由表来自的路由器：'</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'新路由表的行数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入新路由表的信息：'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>        DesNet<span class="token punctuation">,</span> Dis <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        Dis <span class="token operator">=</span> int<span class="token punctuation">(</span>Dis<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        NewTable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>DesNet<span class="token punctuation">,</span> Dis<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        count <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            temptable1 <span class="token operator">=</span> NewTable<span class="token punctuation">.</span>getData<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            temptable2 <span class="token operator">=</span> FinalTable<span class="token punctuation">.</span>getData<span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> temptable2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果目标网络相同</span>                <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> temptable2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果目标网络和下一跳均相同</span>                    FinalTable<span class="token punctuation">.</span>change<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>                <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> temptable2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 如果目标网络一致，下一跳不同</span>                    <span class="token keyword">if</span> int<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> int<span class="token punctuation">(</span>temptable2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        FinalTable<span class="token punctuation">.</span>change<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>            <span class="token keyword">if</span> temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> temptable2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> int<span class="token punctuation">(</span>count<span class="token punctuation">)</span> <span class="token operator">==</span> int<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>            FinalTable<span class="token punctuation">.</span>add<span class="token punctuation">(</span>temptable1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> temptable1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'新的路由表为：'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'目的网络    距离    下一跳路由器'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>FinalTable<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        data <span class="token operator">=</span> FinalTable<span class="token punctuation">.</span>getData<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'        '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'         '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分析：</strong>   这位函数执行的主体，先初始化一个路由表，新路由表（来自某个路由器的路   表），最终形成的路由表这三个Link类型的变量，创建两个临时列表temptable1和  temptable2。然后让用户输入初始路由表的行数，再让用户输入整个路由表，遍历用   户输入的整个路由表，将每行进行切片处理，第一个数据为目的网络DesNet，第二个   数据为距离Dis，第三个数据为NextHoop下一条网络，切片处理一组数据，就将处理     完成的数据加入到初始路由表table和最终路由表FinalTable的尾部。处理完成后输    出路由表的初始化完成。</p><p>​        接着让用户输入新路由表来自的路由器和新路由表的行数，接着输入新路由表的     所有信息，遍历用户输入的整个新路由表，将每行进行切片处理，切片后的第一个数   据为目的网络DesNet，第二个数据为跳数Dis，然后将跳数增加1，在新路由表中加  入新的信息（包含目的网络，跳数，新路由表来自的路由器）。</p><p>​        执行一个循环（i为循环的轮次），循环次数为新路由表的行数，如果i为0就跳  过执行下一次循环，将count初始化为0，再执行一个内层循环（j为循环的轮次），    执行的次数为原来路由表的行数，临时变量temptable1存储新路由表NewTable第I  个位置的数据，临时变量temptable2存储最终路由表FinalTable第j个位置的数据信   息。如果temptable1的目标网络与temptable2的目标网络相同执行，分类后执行两  种操作：如果temptable1的下一条地址与temptable2的下一跳地址相同，最终路由   表的这条信息更新为新路由表中的信息；如果两者的下一跳网络不同并且temptable1   的跳数小于temptable2的跳数，也将最终路由表的这条信息更新为新路由表中的信     息，如果temptable1的跳数大于temptable2的跳数就不需要更新。如果temptable1  与temptable2的目的网络不同，那么count增加1，如果count的值与初始路由表行  数-1的值相等，说明之前的路由表没有这条信息，就在最终路由表的尾部加入这条路   由。</p><p>​        更新完毕后输出新的路由表，依次遍历最终路由表的信息，每条信息都输出目的     网络、距离和下一条路由器，将更新后的路由表呈现给用户。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第六次上机实习</title>
      <link href="2021/02/02/shu-ju-jie-gou-di-liu-ci-shang-ji/"/>
      <url>2021/02/02/shu-ju-jie-gou-di-liu-ci-shang-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="实习题目：排序算法应用及对比"><a href="#实习题目：排序算法应用及对比" class="headerlink" title="实习题目：排序算法应用及对比"></a>实习题目：排序算法应用及对比</h1><h2 id="一、-上机实习题目与要求"><a href="#一、-上机实习题目与要求" class="headerlink" title="一、 上机实习题目与要求"></a><strong>一、</strong> 上机实习题目与要求</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>分别写出快速排序（改进版），归并排序和堆排序的递归和非递归版本以及冒泡/插入排序这些算法来实现排序算法应用及对比。</p><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>（1）生成三组1000万个数，分别为随机数、基本正序(所有元素在正序的基础上整体左移  2位)、逆序（用什么数据结构？如果数据量达到1亿，10亿怎么办？）；</p><p>（2）实现快速排序（改进版），归并排序和堆排序的递归和非递归版本；</p><p>（3）要求从三组1000万数据中查找前d个最大的数（d是输入参数，请用快排，堆排序，  归并排序以及插入/冒泡 排序算法对所有数据排序后再查找最大的d个数，比较不同  排序算法以及递归和非递归算法的区别(运行时间)；</p><p>（4）不需要对1000万数据整体排序，从三组1000万数据中查找前d个最大和最小的数，  用什么数据结构？</p><h2 id="二、数据结构设计"><a href="#二、数据结构设计" class="headerlink" title="二、数据结构设计"></a>二、数据结构设计</h2><p>在这个题中要求使用1000万个数来试验排序算法，数量还是比较庞大的，全部存放在内存中会占用电脑较大的内存，本应该将这些数据存储在一个文本文件中，通过读取文件将这几组数进行排序处理。但是本程序为了方便，而且1000万个整型数据占用的内存也没有那么大，内存还是放的下的，因此选用了一个长度为1000万的数组来存放这1000万个数，将这组数进行相关的操作即可获得其他两组数。</p><h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>stdfax.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sort.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> SORT_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> SORT_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> M <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//交换x与y</span><span class="token keyword">void</span> <span class="token function">Swap</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> x<span class="token punctuation">,</span> T<span class="token operator">&amp;</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    T temp <span class="token operator">=</span> x<span class="token punctuation">;</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>    y <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//获取一个有n个随机数的序列</span>T<span class="token operator">*</span> <span class="token function">creat</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    T<span class="token operator">*</span> array <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//依次将n个随机数放到数组中存储</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> array<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//将正序数组转化为基本正序数组</span><span class="token keyword">void</span> <span class="token function">backward</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保存最左边的元素</span>    <span class="token keyword">int</span> temp1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 全部元素往左移动两个位置</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把最左边的元算放到最右边</span>    arr<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp1<span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//将正序数组转化为逆序数组</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//依次交换两边的数</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//复制数组</span>T<span class="token operator">*</span> <span class="token function">copy</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    T<span class="token operator">*</span> result <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将元素组的所有元素依次复制到新数组中</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//改进的快速排序</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//三数取中，选择中间的数作为基准</span>T <span class="token function">NumberOfThree</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对起始元素，末尾元素，中间元素进行一个简单排序，返回中间的数作为基准</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回大小为中间的数作为基准</span>    <span class="token keyword">return</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//对序列进行划分</span><span class="token keyword">int</span> <span class="token function">Partition</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//x为用三数取中的方法获取的基准数</span>    T x <span class="token operator">=</span> <span class="token function">NumberOfThree</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使i指针指向比基准大的数</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span> <span class="token operator">></span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//或者high指向比基准小的数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//i>=j时退出循环</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将基准元素放到j的位置</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//插入排序的算法</span><span class="token keyword">void</span> <span class="token function">InsertSort</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    T temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 用来存放临时的变量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//找到对应的位置，并将元素插入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> low<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//改进的快速排序</span><span class="token keyword">void</span> <span class="token function">QuickSort</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> pivotpos<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//一组中元素个数少于10个就使用插入排序</span>        <span class="token function">InsertSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//否则使用快排的方法</span>        pivotpos <span class="token operator">=</span> <span class="token function">Partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//进行划分</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> pivotpos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">QuickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> pivotpos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token comment" spellcheck="true">//合并两个有序的序列</span><span class="token keyword">void</span> <span class="token function">Merge</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">;</span>    k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    n1 <span class="token operator">=</span> mid <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    n2 <span class="token operator">=</span> end <span class="token operator">-</span> mid<span class="token punctuation">;</span>    T<span class="token operator">*</span> L <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span> R <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将arr的左部分赋给L</span>        L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>start <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将arr的右部分赋给R</span>        R<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    k <span class="token operator">=</span> start<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//合并</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>         <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n1<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 左部分没处理完继续处理</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 右部分没处理完继续处理</span>        arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> R<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        k<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> L<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> R<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">typename</span> T<span class="token operator">></span><span class="token comment" spellcheck="true">//归并排序</span><span class="token keyword">void</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//start>=end时为递归出口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//下滑操作 </span><span class="token keyword">void</span> <span class="token function">ShiftDown</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> temp<span class="token punctuation">;</span>    i <span class="token operator">=</span> start<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//让j为i的子女</span>    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获取两个子女中较大者</span>        <span class="token punctuation">{</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果双亲比子女小，那么上移较大的子女结点</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            i <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//i为父</span>            j <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//j为子女</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//否则，则结束循环</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把temp暂存的值放到正确的位置</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//堆排序非递归算法</span><span class="token keyword">void</span> <span class="token function">HeapSortOFF</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> Current<span class="token punctuation">,</span> i<span class="token punctuation">,</span> temp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Current需要下滑的结点</span>    <span class="token comment" spellcheck="true">//先用下滑的方法建成最大堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Current <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Current <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> Current<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ShiftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> Current<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将堆顶点元素与数组中n-1位置的数交换位置</span>    <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//然后重复上面的操作，直到处理完毕</span>        <span class="token function">ShiftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//堆排序的递归算法</span><span class="token comment" spellcheck="true">//调整堆</span><span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            max <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            max <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//否则交换位置后继续调整</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">!=</span> x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> max<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//建立大根堆</span><span class="token keyword">void</span> <span class="token function">buildHeap</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> Current<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//Current需要下滑的结点</span>    <span class="token comment" spellcheck="true">//用下滑的方法建成最大堆</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Current <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Current <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> Current<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">ShiftDown</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> Current<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//堆排序的递归算法</span><span class="token keyword">void</span> <span class="token function">heapSortON</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">buildHeap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">adjust</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//冒泡排序</span><span class="token keyword">void</span> <span class="token function">BubbleSort</span><span class="token punctuation">(</span>T<span class="token operator">*</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//falg为交换标志</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> i<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">Swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SORT_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sort.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> d<span class="token punctuation">;</span>    clock_t start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token keyword">double</span> runTime<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入元素的个数n："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> array<span class="token operator">=</span>creat<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*reverse(array, n);    cout &lt;&lt; "逆序序列:" &lt;&lt; endl;    for (int i = 0; i &lt; n;i++)    {        cout &lt;&lt; array[i] &lt;&lt; " ";    }    cout &lt;&lt; endl;    backward(array, n);    cout &lt;&lt; "基本正序序列:" &lt;&lt; endl;    for (int i = 0; i &lt; n;i++)    {        cout &lt;&lt; array[i] &lt;&lt; " ";    }    cout &lt;&lt; endl;*/</span>    <span class="token comment" spellcheck="true">//测试随机序列中改进的快速排序算法的用时</span>    <span class="token keyword">int</span><span class="token operator">*</span> ori <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"随机序列：改进的快速排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"逆序序列：改进的快速排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">backward</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">QuickSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"部分正序序列：改进的快速排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入需要获得的最大数的个数d："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> d<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大的d个数为："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ori<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ori <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"随机序列：二路归并排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"逆序序列：二路归并排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">backward</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MergeSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"部分正序序列：二路归并排序的用时为：："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大的d个数为："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ori<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ori <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapSortOFF</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"随机序列：非递归堆排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapSortOFF</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"逆序序列：非递归堆排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">backward</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">HeapSortOFF</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"部分正序序列：非递归堆排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大的d个数为："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ori<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ori <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">heapSortON</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"随机序列：递归堆排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    ori <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">heapSortON</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"逆置序列：递归堆排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">backward</span><span class="token punctuation">(</span>ori<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将数组转置</span>    ori <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">heapSortON</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"部分正序序列：递归堆排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大的d个数为："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BubbleSort</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    runTime <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"改进的冒泡排序的用时为："</span> <span class="token operator">&lt;&lt;</span> runTime <span class="token operator">&lt;&lt;</span> <span class="token string">"s"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大的d个数为："</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> d<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第五次上机实习</title>
      <link href="2021/01/29/shu-ju-jie-gou-di-wu-ci-shang-ji/"/>
      <url>2021/01/29/shu-ju-jie-gou-di-wu-ci-shang-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="实习题目：图的三种算法的同步演示"><a href="#实习题目：图的三种算法的同步演示" class="headerlink" title="实习题目：图的三种算法的同步演示"></a>实习题目：图的三种算法的同步演示</h1><h2 id="一、-上机实习题目与要求"><a href="#一、-上机实习题目与要求" class="headerlink" title="一、 上机实习题目与要求"></a><strong>一、</strong> 上机实习题目与要求</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>分别写出深度优先遍历、Prim算法与Dijkstra算法这三个算法，同时动态显示出相应的构造过程。</p><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>（1）基于第3页ppt的图例构造图（权值可以自行设计添加）；</p><p>（2）分别使用深度优先遍历(DFS)、Prim、Dijkstra算法从任意用户输入的顶点开始对图进行遍历、求MST及最短路径；</p><p>（3）三个算法同时动态显示构造过程； </p><p>（4）每一步都要求显示/打印所有试探的路径(见第4页 ppt)；</p><p>（5）掌握单步调试；</p><h2 id="二、数据结构设计"><a href="#二、数据结构设计" class="headerlink" title="二、数据结构设计"></a>二、数据结构设计</h2><p>选择图的邻接表作为存储结构。因为邻接矩阵大量的元素都为0，这么多的冗余的零元素会造成存储空间的巨大浪费，但是邻接表可以解决这个问题，并且与邻接矩阵相比，邻接表更加的灵活，更便于操作。</p><h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>stdfx.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>graph.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> GRAPH_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> GRAPH_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//图中边结点的定义</span><span class="token keyword">struct</span> Edge <span class="token punctuation">{</span>     <span class="token keyword">int</span> dest<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//边的另一顶点位置</span>    E weight<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//表上的权值</span>    Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> link<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//下一条边链的指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//顶点的定义</span><span class="token keyword">struct</span> Vertex <span class="token punctuation">{</span>     T data<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//顶点的关键值</span>    Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> ptr<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//边链表的头指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//用邻接表表示的图的类定义</span><span class="token keyword">class</span> <span class="token class-name">Graphlnk</span> <span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> maxVertices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//图中顶点的最大数量</span>    <span class="token keyword">int</span> numEdges<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//当前的边数</span>    <span class="token keyword">int</span> numVertices<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前的顶点个数</span>    Vertex<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> NodeTable<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//顶点表</span><span class="token keyword">public</span><span class="token operator">:</span>           <span class="token keyword">const</span> E maxWeight <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//无穷大的值</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">Graphlnk</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//默认数据大小为30个</span>        maxVertices <span class="token operator">=</span> sz<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//顶点的最大数量为sz</span>        numEdges <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//当前的边数为0</span>        numVertices <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//当前顶点数为0</span>        NodeTable <span class="token operator">=</span> <span class="token keyword">new</span> Vertex<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token punctuation">[</span>maxVertices<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建顶点表数组</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>NodeTable <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//分配失败时报错</span>            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"存储空间分配错误！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//将顶点表数组初始化</span>            NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">Graphlnk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 删除每个边链表中的结点</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>               Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为对应链表的首结点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//重复删除第一个结点，直到删除完毕</span>                NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>link<span class="token punctuation">;</span>                <span class="token keyword">delete</span> p<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//释放掉p的空间</span>                p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> NodeTable<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 删除顶点表的数组</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取顶点vertex在图中的位置</span>    <span class="token keyword">int</span> <span class="token function">getVertexPos</span><span class="token punctuation">(</span>T vertex<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numVertices<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//在顶点表中遍历，找到即返回在图中的位置信息</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>NodeTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> vertex<span class="token punctuation">)</span>                <span class="token keyword">return</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//插入顶点</span>    <span class="token keyword">bool</span> <span class="token function">insertVertex</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> vertex<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果顶点表满，不能插入图中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>numVertices <span class="token operator">==</span> maxVertices<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        NodeTable<span class="token punctuation">[</span>numVertices<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> vertex<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将这个顶点放在表的最后位置</span>        numVertices<span class="token operator">++</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//当前顶点数量增加1个</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//插入边</span>    <span class="token keyword">bool</span> <span class="token function">insertEdge</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex1<span class="token punctuation">,</span> <span class="token keyword">int</span> vertex2<span class="token punctuation">,</span> E weight<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先要确保边的两个顶点是否合理</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex1 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> vertex1 <span class="token operator">&lt;</span> numVertices <span class="token operator">&amp;&amp;</span> vertex2 <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> vertex2 <span class="token operator">&lt;</span> numVertices<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> q<span class="token punctuation">;</span>            Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>vertex1<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取vertex1对应的边链表头指针</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-</span><span class="token operator">></span>dest <span class="token operator">!=</span> vertex2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//寻找邻接顶点vertex2</span>                p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>link<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果这条边已经存在，不插入，返回false</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> <span class="token keyword">new</span> Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建新的结点</span>            p<span class="token operator">-</span><span class="token operator">></span>dest <span class="token operator">=</span> vertex2<span class="token punctuation">;</span>            p<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>            p<span class="token operator">-</span><span class="token operator">></span>link <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>vertex1<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将其链入vertex1的边链表</span>            NodeTable<span class="token punctuation">[</span>vertex1<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr <span class="token operator">=</span> p<span class="token punctuation">;</span>            q <span class="token operator">=</span> <span class="token keyword">new</span> Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token punctuation">;</span>            q<span class="token operator">-</span><span class="token operator">></span>dest <span class="token operator">=</span> vertex1<span class="token punctuation">;</span>            q<span class="token operator">-</span><span class="token operator">></span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>            q<span class="token operator">-</span><span class="token operator">></span>link <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>vertex2<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将其链入v2边链表</span>            NodeTable<span class="token punctuation">[</span>vertex2<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr <span class="token operator">=</span> q<span class="token punctuation">;</span>            numEdges<span class="token operator">++</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//当前的边数增加1个</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//建立邻接表表示的图</span>    <span class="token keyword">void</span> <span class="token function">CreatGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//分别存储顶点树和边数</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//i用于控制循环，j与k存储顶点在图中的位置</span>        T vertex1<span class="token punctuation">,</span> vertex2<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//顶点</span>        E weight<span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//边的权值</span>        <span class="token comment" spellcheck="true">//获取用户输入的顶点数量和边的数量</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入顶点数和边数："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入所有的顶点："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> vertex1<span class="token punctuation">;</span>            <span class="token function">insertVertex</span><span class="token punctuation">(</span>vertex1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将这个顶点插入图中</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取图中的边信息</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入图的各边的信息："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            cin <span class="token operator">>></span> vertex1 <span class="token operator">>></span> vertex2 <span class="token operator">>></span> weight<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取两个顶点的位置信息</span>            j <span class="token operator">=</span> <span class="token function">getVertexPos</span><span class="token punctuation">(</span>vertex1<span class="token punctuation">)</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> <span class="token function">getVertexPos</span><span class="token punctuation">(</span>vertex2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不存在这两个定点时报错</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"边两端点信息有误，请重新输入！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                <span class="token function">insertEdge</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//在图中插入这条边</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回当前顶点数</span>    <span class="token keyword">int</span> <span class="token function">numberOfVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> numVertices<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取顶点v的第一个邻接顶点</span>    <span class="token keyword">int</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为对应链表第一个边结点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果边结点不为空，则返回第一个邻接顶点</span>                <span class="token keyword">return</span> p<span class="token operator">-</span><span class="token operator">></span>dest<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则第一个邻接顶点不存在，返回-1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取顶点v的邻接顶点w的下一邻接顶点</span>    <span class="token keyword">int</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为对应链表第一个边结点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-</span><span class="token operator">></span>dest <span class="token operator">!=</span> w<span class="token punctuation">)</span>             <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//寻找vertex的邻接顶点w</span>                p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>link<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-</span><span class="token operator">></span>link <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//返回vertex的下一个邻接顶点</span>                <span class="token keyword">return</span> p<span class="token operator">-</span><span class="token operator">></span>link<span class="token operator">-</span><span class="token operator">></span>dest<span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则下一个邻接顶点不存在，返回-1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取位置为x的顶点的值</span>    T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//x为合法位置时返回对应位置的值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;</span> numVertices<span class="token punctuation">)</span>            <span class="token keyword">return</span> NodeTable<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//否则返回-1</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回边（vertex1，vertex2）上的权值 </span>    E <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex1<span class="token punctuation">,</span> <span class="token keyword">int</span> vertex2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//两个顶点必须在图中存在</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>vertex1 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> vertex2 <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Edge<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> p <span class="token operator">=</span> NodeTable<span class="token punctuation">[</span>vertex1<span class="token punctuation">]</span><span class="token punctuation">.</span>ptr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p为vertex1第一条关联的边</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> p<span class="token operator">-</span><span class="token operator">></span>dest <span class="token operator">!=</span> vertex2<span class="token punctuation">)</span>            <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//寻找邻接顶点vertex2</span>                p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>link<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//符合条件，返回两个顶点之间的权值</span>                <span class="token keyword">return</span> p<span class="token operator">-</span><span class="token operator">></span>weight<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxWeight<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//否则边(vertex1, vertex2)不存在</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//深度优先搜索</span>    <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> vertex<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> loc<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token function">numberOfVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//获取图中的顶点个数</span>        <span class="token keyword">bool</span><span class="token operator">*</span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//创建辅助数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                             <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//辅助数组visited初始化</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        loc <span class="token operator">=</span> <span class="token function">getVertexPos</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//获取当前顶点的位置</span>        <span class="token function">DFS</span><span class="token punctuation">(</span>loc<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//从顶点vertex开始深度优先搜索</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//遍历完成后释放辅助数组visited的空间</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//深度优先搜索的子过程</span>    <span class="token keyword">void</span> <span class="token function">DFS</span><span class="token punctuation">(</span><span class="token keyword">int</span> vertex<span class="token punctuation">,</span> <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"搜索到的顶点为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">getValue</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问顶点v</span>        visited<span class="token punctuation">[</span>vertex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                                 <span class="token comment" spellcheck="true">//将已经访问过的顶点作访问标记</span>        <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//找顶点vertex的第一个邻接顶点w</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>w <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                                    <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果邻接顶点w已经访问过，则需要回退</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"回退的顶点为:"</span> <span class="token operator">&lt;&lt;</span> <span class="token function">getValue</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//如果w没有访问过，递归访问顶点w</span>            <span class="token punctuation">{</span>                <span class="token function">DFS</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            w <span class="token operator">=</span> <span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>vertex<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取vertex排在w后面的下一个邻接顶点</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span>    </span><span class="token comment" spellcheck="true">// !GRAPH_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>prim.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> Prim_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> Prim_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"graph.h"</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//最小生成树边结点结构体</span><span class="token keyword">struct</span> MSTEdgeNode <span class="token punctuation">{</span>     <span class="token keyword">int</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 两顶点位置</span>    E weight<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// 边上权值</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">MSTEdgeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">head</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">weight</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//对&lt;的重构</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">const</span> MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">&amp;</span> v1<span class="token punctuation">,</span> <span class="token keyword">const</span> MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">&amp;</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">.</span>weight <span class="token operator">></span> v2<span class="token punctuation">.</span>weight<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//最小生成树的类定义</span><span class="token keyword">class</span> <span class="token class-name">MinSpanTree</span><span class="token punctuation">{</span> <span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> maxSize<span class="token punctuation">,</span> currentSize<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//数组的最大的元素个数和当前元素个数</span>    MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">*</span> edgeValue<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//用边值数组存储树</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//构造函数，默认为40个</span>    <span class="token function">MinSpanTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>         maxSize <span class="token operator">=</span> sz<span class="token punctuation">;</span>        currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//当前元素个数为0个</span>        edgeValue <span class="token operator">=</span> <span class="token keyword">new</span> MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token punctuation">[</span>sz<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建数组存放边值</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">MinSpanTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span>edgeValue<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放边值数组空间</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//插入结点</span>    <span class="token keyword">bool</span> <span class="token function">Insert</span><span class="token punctuation">(</span>MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">&amp;</span> value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentSize <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//数组已经满了，无法存储</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"已满，无法存储！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将元素插入数组</span>        edgeValue<span class="token punctuation">[</span>currentSize<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//Prim算法</span>    <span class="token keyword">void</span> <span class="token function">Prim</span><span class="token punctuation">(</span>Graphlnk<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">&amp;</span> G<span class="token punctuation">,</span> <span class="token keyword">const</span> T vertice<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span> ed<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//ed为边结点辅助单元</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> start<span class="token punctuation">,</span> v<span class="token punctuation">,</span> count<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">numberOfVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//n为图当前的顶点数</span>        start <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getVertexPos</span><span class="token punctuation">(</span>vertice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//start为起始顶点号</span>        priority_queue<span class="token operator">&lt;</span>MSTEdgeNode<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">>></span> H<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//H为最小堆</span>        <span class="token keyword">bool</span><span class="token operator">*</span> Vmst<span class="token punctuation">;</span>        Vmst <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//Vmst为最小生成树顶点集合</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">//初始化为未访问过</span>        <span class="token punctuation">{</span>            Vmst<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Vmst<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//start作为第一顶点加入生成树</span>        count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//一共有n个顶点，那么一共要找n-1条边来生成最小生成树</span>            <span class="token comment" spellcheck="true">//先找到与v相连并且未被访问过的邻接顶点，然后把相应的边放到最小堆中</span>            v <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getFirstNeighbor</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//v为u的第一个邻接顶点</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检测u的所有邻接顶点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Vmst<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果这个顶点没有被访问过，加入最小堆中</span>                    ed<span class="token punctuation">.</span>tail <span class="token operator">=</span> start<span class="token punctuation">;</span>                    ed<span class="token punctuation">.</span>head <span class="token operator">=</span> v<span class="token punctuation">;</span>                    ed<span class="token punctuation">.</span>weight <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>                    H<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                v <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getNextNeighbor</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//找顶点start的邻接顶点v的下一个邻接顶点</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//找当前顶点start与其他未访问的邻接顶点之间最小权值的边</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>H<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                ed <span class="token operator">=</span> H<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//从最小堆中删除最小权值的边ed</span>                H<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Vmst<span class="token punctuation">[</span>ed<span class="token punctuation">.</span>head<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果这个顶点没有被访问过，就插入到最小生成树中</span>                    <span class="token function">Insert</span><span class="token punctuation">(</span>ed<span class="token punctuation">)</span><span class="token punctuation">;</span>                     start <span class="token operator">=</span> ed<span class="token punctuation">.</span>head<span class="token punctuation">;</span>                    Vmst<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将访问的结点标记为true</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//打印MST树</span>    <span class="token keyword">void</span> <span class="token function">printMST</span><span class="token punctuation">(</span>Graphlnk<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">&amp;</span> G<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> tail<span class="token punctuation">,</span> head<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//顶点所在位置</span>        T v1<span class="token punctuation">,</span> v2<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//两顶点</span>        E weight<span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//权值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> currentSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            tail <span class="token operator">=</span> edgeValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>tail<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//找到第一个顶点所在位置</span>            head <span class="token operator">=</span> edgeValue<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>head<span class="token punctuation">;</span>               v1 <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//获取顶点对应的值</span>            v2 <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>            weight <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span>tail<span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取(tail, head)的权值</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> v2 <span class="token operator">&lt;&lt;</span> <span class="token string">","</span> <span class="token operator">&lt;&lt;</span> weight <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span>    </span><span class="token comment" spellcheck="true">// !Prim_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Dijkstra.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> DIJKSTRA_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> DIJKSTRA_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"graph.h"</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//Dijkstra算法</span><span class="token keyword">void</span> <span class="token function">Dijkstra</span><span class="token punctuation">(</span>Graphlnk<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">&amp;</span> G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> E dist<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//G为一个带权的有向图，从v出发寻找最短路径</span>    <span class="token comment" spellcheck="true">//dist存放从顶点v到顶点j的最短路径的长度，path存放最短路径的路径过程</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">numberOfVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//顶点数</span>    <span class="token keyword">bool</span><span class="token operator">*</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">bool</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//s为最短路径顶点集</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> u<span class="token punctuation">;</span>    E w<span class="token punctuation">,</span> min<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用(v,i)边的权值初始化数组</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//所有顶点初始化为false表示未访问</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>maxWeight<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//顶点i为顶点v的邻接顶点</span>        <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//相邻时将v标记为顶点i的最短路径</span>            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//不相邻时设置为-1</span>            path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    s<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//访问过的顶点v加入s集合中</span>    dist<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        min <span class="token operator">=</span> G<span class="token punctuation">.</span>maxWeight<span class="token punctuation">;</span>        u <span class="token operator">=</span> v<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//选择不在集合S中具有最短路径的顶点u</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                 u <span class="token operator">=</span> j<span class="token punctuation">;</span>                min <span class="token operator">=</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        s<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将顶点u加入到集合s</span>        <span class="token comment" spellcheck="true">//找到v的权值最小并且未被访问过的邻接顶点w</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            w <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getWeight</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> w <span class="token operator">&lt;</span> G<span class="token punctuation">.</span>maxWeight <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">)</span> <span class="token operator">&lt;</span> dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//如果顶点k没有被访问过，并且从v->u->k的路径比v->k的路径短，则进行更新</span>                dist<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">+</span> w<span class="token punctuation">;</span>                path<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">E</span><span class="token operator">></span><span class="token comment" spellcheck="true">//输出最短路径</span><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>Graphlnk<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> E<span class="token operator">></span><span class="token operator">&amp;</span> G<span class="token punctuation">,</span> <span class="token keyword">int</span> v<span class="token punctuation">,</span> E dist<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> path<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">numberOfVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//获取当前的顶点个数</span>    <span class="token keyword">int</span><span class="token operator">*</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//输出到每个顶点的最短路径长度以及路径信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> v<span class="token punctuation">)</span>         <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//不是顶点v时</span>            j <span class="token operator">=</span> i<span class="token punctuation">;</span>            k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> v<span class="token punctuation">)</span>             <span class="token punctuation">{</span>                d<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                j <span class="token operator">=</span> path<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"到顶点"</span> <span class="token operator">&lt;&lt;</span> G<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"的最短路径为："</span> <span class="token operator">&lt;&lt;</span> G<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//依次输出最短路径的每个结点</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> G<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span><span class="token operator">--</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//输出最短路径的长度</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"，其中最短路径长度为："</span> <span class="token operator">&lt;&lt;</span> dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span>    </span><span class="token comment" spellcheck="true">// !DIJKSTRA_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"graph.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Dijkstra.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"prim.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Graphlnk<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> G<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 声明图对象</span>    MinSpanTree<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> MST<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明最小生成树对象</span>    <span class="token keyword">int</span> vertex<span class="token punctuation">;</span>    <span class="token keyword">int</span> dist<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//dist为两顶点间的最短路径长度，path为最短路径</span>    <span class="token comment" spellcheck="true">// 创建图</span>    G<span class="token punctuation">.</span><span class="token function">CreatGraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入第一个顶点vertex:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> vertex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//深度遍历输出</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"深度遍历："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    G<span class="token punctuation">.</span><span class="token function">DFS</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试prim函数</span>    MST<span class="token punctuation">.</span><span class="token function">Prim</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> vertex<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"根据Prim算法得到的最小生成树为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印最小生成树</span>    MST<span class="token punctuation">.</span><span class="token function">printMST</span><span class="token punctuation">(</span>G<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试Dijkstra函数</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"测试Dijkstra算法："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    v <span class="token operator">=</span> G<span class="token punctuation">.</span><span class="token function">getVertexPos</span><span class="token punctuation">(</span>vertex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//v为起始顶点的位置</span>    <span class="token function">Dijkstra</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">print</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span> v<span class="token punctuation">,</span> dist<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出到各个顶点的最短路径</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第四次上机实习</title>
      <link href="2021/01/26/shu-ju-jie-gou-di-si-ci-shang-ji/"/>
      <url>2021/01/26/shu-ju-jie-gou-di-si-ci-shang-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="实习题目：搜索效率比较"><a href="#实习题目：搜索效率比较" class="headerlink" title="实习题目：搜索效率比较"></a>实习题目：搜索效率比较</h1><h2 id="一、-上机实习题目与要求"><a href="#一、-上机实习题目与要求" class="headerlink" title="一、 上机实习题目与要求"></a><strong>一、</strong> 上机实习题目与要求</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>生成N个整数序列，序列分为两组：顺序序列和随机序列，在其中搜索最大的n个数。   对顺序序列采用顺序搜索、折半搜索、二叉排序树、平衡二叉排序树进行搜索；对随机序列采用顺序搜索、二叉排序树、平衡二叉排序树进行搜索。其中， N=500,1000,2000,5000,10000,20000,30000,50000。 n=N/100；</p><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>（1）分析最坏情况下不同搜索算法的复杂度；</p><p>（2）统计分析并比较不同搜索算法在N取值不同时的性能，完成以下三个方面： </p><p>对每个测试数据集，统计计算不同搜索算法搜索成功的ASL；</p><p>对每个测试数据集运行多次获得不同搜索算法的 运行时间的平均值；</p><p>绘制算法实际运行结果（ASL和运行时间）的曲线图，验证和理论分析的时间复杂度的吻合性。</p><h2 id="二、数据结构设计"><a href="#二、数据结构设计" class="headerlink" title="二、数据结构设计"></a>二、数据结构设计</h2><p>选择带头结点的单链表存储稀疏多项式。</p><p>顺序搜索和折半搜索均选择数组作为存储结构：在搜索表中，数据对象存放于数组中，利用数组元素的下标作为数据对象的存放地址更加方便快捷。</p><p>二叉排序树搜索选择二叉树作为数据的存储结构：每个结点都存放一个作为搜索依据的关键码，其中左子树上所有结点的关键码都小于根节点的关键码，右子树的所有结点的关键码都大于根节点的关键码，其中左子树和右子树也是二叉搜索树。</p><h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>stdfax.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ctime></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>search.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> SEARCH_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> SEARCH_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token comment" spellcheck="true">//冒泡排序将无序序列转换为顺序序列</span><span class="token keyword">void</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//先在N个数中找到最大的n个数</span><span class="token comment" spellcheck="true">//array为待检查的数组，N为数组长度，n为需要取出的最大的n个数</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">TopK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token operator">*</span> flag<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> result<span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//用于标记这个数是否已经被提取过</span>    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//用于存储这n个最大的数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//选择排序n次获取n个最大的数</span>        <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//最大数的位置</span>        <span class="token keyword">int</span> maxNum <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//保存最大数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> maxNum <span class="token operator">&amp;&amp;</span> flag<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果大于最大数并且没有被取出来过就记录下来</span>            <span class="token punctuation">{</span>                maxNum <span class="token operator">=</span> array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                maxIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        flag<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将此次遍历的最大数的位置标记为-1，防止再次被取出</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxNum<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存入该最大数</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//顺序搜索</span><span class="token keyword">int</span> <span class="token function">SequenceSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在顺序搜索中在N个数中找到最大的n个数</span><span class="token comment" spellcheck="true">//original为原始序列，maxNum为需要搜索的数字，N为原始序列长度，n为需要取出的最大的n个数</span><span class="token keyword">void</span> <span class="token function">SeqSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> maxNum<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"顺序搜索后最大的"</span><span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span><span class="token string">"个数为:"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">SequenceSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> maxNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//二分搜索（折半搜索)</span><span class="token keyword">int</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> low<span class="token punctuation">,</span> high<span class="token punctuation">,</span> mid<span class="token punctuation">;</span>    low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    high <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">)</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span>            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> value<span class="token punctuation">)</span>            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//在二分搜索中在N个数中找到最大的n个数</span><span class="token comment" spellcheck="true">//original为原始序列，maxNum为需要搜索的数字，N为原始序列长度，n为需要取出的最大的n个数</span><span class="token keyword">void</span> <span class="token function">BinSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> maxNum<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二分搜索后最大的"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"个数为:"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">BinarySearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> maxNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> result <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//二叉排序树搜索</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    Node<span class="token operator">*</span> left<span class="token punctuation">;</span>    Node<span class="token operator">*</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">BST</span>                       <span class="token comment" spellcheck="true">//二叉树搜索类</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> root<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//二叉搜索树根指针</span>    <span class="token function">BST</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">root</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token comment" spellcheck="true">//中序遍历输出树的序列</span>    <span class="token keyword">void</span> <span class="token function">InOrderPrint</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span>            <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>         <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">InOrderPrint</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">InOrderPrint</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//释放树的存储空间</span>    <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span>            <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">release</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">release</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//二叉树的插入</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">&amp;</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>                <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//树根为空时，建立根节点</span>        <span class="token punctuation">{</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//插入值大于当前值，插入右子树</span>        <span class="token punctuation">{</span>            <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//插入值等于当前值，不插入</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//插入值小于当前值，插入左子树</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//二叉树的建立</span>    <span class="token keyword">void</span> <span class="token function">Creat</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//根据提供的数据数组A[n]建立二叉树</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//二叉树的搜索</span>    <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">&amp;</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">&amp;</span> result<span class="token punctuation">)</span>            <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//搜索失败的情况</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//查找的值小于当前值，在左子树搜索</span>        <span class="token punctuation">{</span>            <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//查找的值等于当前值，搜索成功</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token operator">&amp;</span>root<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>                        <span class="token comment" spellcheck="true">//否则查找的值大于于当前值，在右子树搜索</span>        <span class="token punctuation">{</span>            <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在二叉排序树中在N个数中找到最大的n个数</span><span class="token comment" spellcheck="true">//original为原始序列，maxNum为需要搜索的数字，N为原始序列长度，n为需要取出的最大的n个数</span><span class="token keyword">void</span> <span class="token function">BSTSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> maxNum<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">;</span>    BST tree<span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">Creat</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二叉排序树搜索后最大的"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"个数为:"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tree<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">,</span> maxNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//AVL搜索树</span><span class="token keyword">class</span> <span class="token class-name">AVL</span>                       <span class="token comment" spellcheck="true">//二叉树搜索类</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> root<span class="token punctuation">;</span>                      <span class="token comment" spellcheck="true">//二叉搜索树根指针</span>    <span class="token function">AVL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">root</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token comment" spellcheck="true">//中序输出AVL树</span>    <span class="token keyword">void</span> <span class="token function">AVLInOrderPrint</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">AVLInOrderPrint</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token function">AVLInOrderPrint</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//AVL树的空间释放</span>    <span class="token keyword">void</span> <span class="token function">AVLrelease</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">AVLrelease</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">AVLrelease</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">delete</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//平衡因子的获取</span>    <span class="token keyword">int</span> <span class="token function">BalanceFactor</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> bf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//平衡因子</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//左右子树都存在</span>        <span class="token punctuation">{</span>            bf <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">-</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">-</span><span class="token operator">></span>height<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//平衡因子为左子树高度减去右子树的高度</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//只存在左子树，不存在右子树</span>        <span class="token punctuation">{</span>            bf <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>height<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//平衡因子为左子树的高度</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//只存在右子树，不存在左子树</span>        <span class="token punctuation">{</span>            bf <span class="token operator">=</span> <span class="token operator">-</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">-</span><span class="token operator">></span>height<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//平衡因子为右子树的高度</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bf<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//结点的高度计算</span>    <span class="token keyword">void</span> <span class="token function">Height</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//左右子树都存在</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">></span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">?</span><span class="token comment" spellcheck="true">//高度为左（右）子树中高度较大的+1</span>                root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//只存在左子树，不存在右子树</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//高度为左子树高度+1</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//只存在右子树，不存在左子树</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//高度为右子树高度+1</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            root<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//右单旋</span>    <span class="token keyword">void</span> <span class="token function">RotateR</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">&amp;</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">*</span> subR <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//要右旋转的结点</span>        root <span class="token operator">=</span> subR<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//原根的左子女</span>        subR<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//root成为新根前卸掉右边负载</span>        root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> subR<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//右单旋转，root成为新根</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//左单旋</span>    <span class="token keyword">void</span> <span class="token function">RotateL</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">&amp;</span> root<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">*</span> subR <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//要左旋转的结点</span>        root <span class="token operator">=</span> subR<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//原根的右子女</span>        subR<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//root成为新根前卸掉左边负载</span>        root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> subR<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//左单旋转，root成为新根</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//平衡二叉树的插入操作</span>    <span class="token keyword">bool</span> <span class="token function">AVLinsert</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">&amp;</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//根节点为空时，创建新结点存储</span>        <span class="token punctuation">{</span>            root <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>            root<span class="token operator">-</span><span class="token operator">></span>height <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">></span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//插入值大于当前值，插入右子树</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">AVLinsert</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//插入右子树可能引起右边不平衡，如果不平衡进行左单旋</span>                <span class="token keyword">int</span> bf <span class="token operator">=</span> <span class="token function">BalanceFactor</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">RotateL</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//原来树中存在这个值，不插入</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>                            <span class="token comment" spellcheck="true">//插入值小于当前值，插入左子树</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">AVLinsert</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//插入右子树可能引起左边不平衡，如果不平衡进行右单旋</span>                <span class="token keyword">int</span> bf <span class="token operator">=</span> <span class="token function">BalanceFactor</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bf <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">RotateR</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">Height</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//AVL树的建立</span>    <span class="token keyword">void</span> <span class="token function">Creat</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//根据提供的数据数组A[n]建立二叉树</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">AVLinsert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//AVL树的搜索算法</span>    <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token operator">&amp;</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">&amp;</span> result<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">//查找的值小于当前值，在左子树中搜索</span>        <span class="token punctuation">{</span>            <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">//查找的值等于当前值，搜索成功</span>        <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token operator">&amp;</span>root<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>                                        <span class="token comment" spellcheck="true">//否则查找的值大于当前值，在右子树中搜索</span>        <span class="token punctuation">{</span>            <span class="token function">search</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> key<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在AVL树中在N个数中找到最大的n个数</span><span class="token comment" spellcheck="true">//original为原始序列，maxNum为需要搜索的数字，N为原始序列长度，n为需要取出的最大的n个数</span><span class="token keyword">void</span> <span class="token function">AVLSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> original<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> maxNum<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    Node<span class="token operator">*</span><span class="token operator">*</span> result<span class="token punctuation">;</span>    AVL tree<span class="token punctuation">;</span>    tree<span class="token punctuation">.</span><span class="token function">Creat</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"AVL树搜索后最大的"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"个数为:"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        tree<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">,</span> maxNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">// !SEARCH_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"search.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    clock_t start<span class="token punctuation">,</span> end<span class="token punctuation">;</span>    <span class="token keyword">double</span> time<span class="token punctuation">;</span>    <span class="token keyword">int</span> N<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入元素的个数N:"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取元素个数n    </span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> N <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> original<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> result<span class="token punctuation">;</span>    original <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取一个由N个随机数组成的一个随机序列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        original<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result <span class="token operator">=</span> <span class="token function">TopK</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试顺序搜索无序序列耗时</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SeqSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> result<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"顺序搜索无序序列耗时为"</span> <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"s."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试二叉排序树搜索无序序列耗时</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BSTSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> result<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token operator">/</span>CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二叉排序树搜索无序序列耗时为"</span> <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"s."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试AVL树搜索无序序列耗时</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AVLSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> result<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"AVL树搜索无序序列耗时为"</span> <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"s."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//无序序列转化为顺序序列</span>    <span class="token function">sort</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span>original<span class="token operator">+</span>N<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试顺序搜索顺序序列耗时</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SeqSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> result<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"顺序搜索顺序序列耗时为"</span> <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"s."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试折半搜索顺序序列耗时</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BinSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> result<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"折半搜索顺序序列耗时为"</span> <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"s."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试二叉排序树搜索顺序序列耗时</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">BSTSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> result<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二叉排序树搜索顺序序列耗时为"</span> <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"s."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//测试AVL树搜索顺序序列耗时</span>    start <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">AVLSearch</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> result<span class="token punctuation">,</span> N<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    end <span class="token operator">=</span> <span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    time <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> CLOCKS_PER_SEC<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"AVL树搜索顺序序列耗时为"</span> <span class="token operator">&lt;&lt;</span> time <span class="token operator">&lt;&lt;</span> <span class="token string">"s."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第三次上机实习</title>
      <link href="2021/01/24/shu-ju-jie-gou-di-san-ci-shang-ji/"/>
      <url>2021/01/24/shu-ju-jie-gou-di-san-ci-shang-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="实习题目：唯一的确定一棵二叉树"><a href="#实习题目：唯一的确定一棵二叉树" class="headerlink" title="实习题目：唯一的确定一棵二叉树"></a>实习题目：唯一的确定一棵二叉树</h1><h2 id="一、-上机实习题目与要求"><a href="#一、-上机实习题目与要求" class="headerlink" title="一、 上机实习题目与要求"></a><strong>一、</strong> 上机实习题目与要求</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>如果给出了遍历二叉树的前序序列和中序序列，则可以构造出唯一的一棵二叉树。试编写实现上述功能的程序。</p><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>已知一棵二叉树的前序和中序序列，试设计完成下列任务的一个算法：</p><p>（1）构造一棵二叉树； </p><p>（2）证明构造正确（即分别以前序和中序遍历该树，将得到的结果与给出的序列进行比较）。 （3）对该二叉树进行后序遍历，输出后序遍历序列。</p><p>（4）用凹入法输出该二叉树。</p><h2 id="二、数据结构设计"><a href="#二、数据结构设计" class="headerlink" title="二、数据结构设计"></a>二、数据结构设计</h2><p>选择二叉链表的二叉树作为存储结构。</p><p>这个题主要是构建一颗二叉树以及进行对应的遍历与输出函数，因此数据结构类型肯定选择二叉树。一般来说，形态剧烈变化的二叉树不适合使用数组存储，相比较而言二叉链表更加灵活，便于树形态的改变。这个题不管是选择数组还是二叉链表都差不多，没有太大差别，但是二叉链表的存储结构便于以后程序的拓展，可以更轻松得增加其他功能，因此最终选择了二叉链表。</p><h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>stdfax.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>BinTree.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> POSTFIX_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> POSTFIX_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">struct</span> BinTreeNode<span class="token punctuation">{</span>    <span class="token keyword">char</span> data<span class="token punctuation">;</span>    BinTreeNode<span class="token operator">*</span> leftChild<span class="token punctuation">,</span> <span class="token operator">*</span> rightChild<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//前序遍历  </span><span class="token keyword">void</span> <span class="token function">preOrder</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>leftChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>rightChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//中序遍历  </span><span class="token keyword">void</span> <span class="token function">inOrder</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>leftChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>rightChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//后序遍历</span><span class="token keyword">void</span> <span class="token function">postOrder</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>leftChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>rightChild<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据前序遍历和中序遍历创建二叉树</span><span class="token comment" spellcheck="true">//参数pre为前序序列，参数in为中序序列，n为序列长度</span>BinTreeNode<span class="token operator">*</span> <span class="token function">CreateBinTree</span><span class="token punctuation">(</span>string pre<span class="token punctuation">,</span> string in<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinTreeNode<span class="token operator">*</span> node <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//node为创建的新二叉树</span>    <span class="token keyword">char</span> leftpre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> rightpre<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//分别为左子树和右子树的前序序列的内容</span>    <span class="token keyword">char</span> leftin<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">,</span> rightin<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//分别为左子树和右子树的中序序列的内容</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true">//序列长度为0时说明没有序列返回空</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    node <span class="token operator">=</span> <span class="token keyword">new</span> BinTreeNode<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//前序序列的第一个元素一定为根结点</span>    node<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">=</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据根结点将中序序列分为左子树和右子数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n1<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            leftin<span class="token punctuation">[</span>n1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pre<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rightin<span class="token punctuation">[</span>n2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//树的前序序列的长度等于中序序列的长度</span>    <span class="token comment" spellcheck="true">//且前序遍历是先左子树再右子树,无论前序还是中序,左子树和右子树的长度都是固定的</span>    <span class="token comment" spellcheck="true">//从i=1开始 前序遍历的第一个是根 </span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//n1为左子树的长度</span>        <span class="token punctuation">{</span>            leftpre<span class="token punctuation">[</span>m1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            rightpre<span class="token punctuation">[</span>m2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    node<span class="token operator">-</span><span class="token operator">></span>leftChild <span class="token operator">=</span> <span class="token function">CreateBinTree</span><span class="token punctuation">(</span>leftpre<span class="token punctuation">,</span> leftin<span class="token punctuation">,</span> n1<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-</span><span class="token operator">></span>rightChild <span class="token operator">=</span> <span class="token function">CreateBinTree</span><span class="token punctuation">(</span>rightpre<span class="token punctuation">,</span> rightin<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//用凹入法输出该二叉树</span><span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span>BinTreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>rightChild<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"   "</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> root<span class="token operator">-</span><span class="token operator">></span>data <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Print</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>leftChild<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !POSTFIX_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"BinTree.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string preNode<span class="token punctuation">;</span>    string inNode<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinTreeNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入前序序列:"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> preNode<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入中序序列:"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> inNode<span class="token punctuation">;</span>    n <span class="token operator">=</span> inNode<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">CreateBinTree</span><span class="token punctuation">(</span>preNode<span class="token punctuation">,</span> inNode<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"二叉树构建成功。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//证明构造的正确性，将前序遍历与中序遍历与原序列分别对比，检查是否一致</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"前序序列:"</span><span class="token punctuation">;</span>    <span class="token function">preOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"中序序列:"</span><span class="token punctuation">;</span>    <span class="token function">inOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//后序遍历的结果</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"后序序列:"</span><span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该二叉树为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">Print</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第二次上机实习</title>
      <link href="2021/01/21/shu-ju-jie-gou-di-er-ci-shang-ji/"/>
      <url>2021/01/21/shu-ju-jie-gou-di-er-ci-shang-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="实习题目：表达式的后缀表示"><a href="#实习题目：表达式的后缀表示" class="headerlink" title="实习题目：表达式的后缀表示"></a>实习题目：表达式的后缀表示</h1><h2 id="一、-上机实习题目与要求"><a href="#一、-上机实习题目与要求" class="headerlink" title="一、 上机实习题目与要求"></a><strong>一、</strong> 上机实习题目与要求</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>表达式的后缀表示：</p><p>表达式中包含运算对象、运算符和圆括号等，习惯上使用中缀表示（指运算符夹在两运算符对象中间）形式。计算表达式的值，涉及到运算符的优先级别，如先乘除后加减。括在一对 圆括号中的子表达式必须先计算，因此，圆括号可视为特殊的 运算符，具有最高优先级别。圆括号可以任意嵌套，这意味着 左圆括号后面又是表达式，形成表达式的递归定义。为了直接 指明表达式中各运算对象的先后计算顺序，可将表达式的中缀 形式转换成后缀（指运算符放在二运算对象的后面）形式。例 如，表达式a<em>b-(c+d)/e，这是通常的中缀形式，其后缀表示是 ab</em>cd+e/-,其中圆括号在后缀形式中已不见了。 </p><p>设计一转换程序，将输入的任一表达式转换成相应的后缀形 式后输出。</p><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>为简单起见，假定运算对象只含变量，且每个变量名以单字母 表示；运算符仅含+、-、*、/和圆括号；表达式以分号“；”结尾。在 转换过程中，要求作必要的语法检查，例如圆括号是否配对，单词 是否合法等。</p><p>要求分别编写转换程序的非递归与递归算法。</p><h2 id="二、数据结构设计"><a href="#二、数据结构设计" class="headerlink" title="二、数据结构设计"></a>二、数据结构设计</h2><p>选择栈作为运算符作为运算符的存储结构。</p><p>对于一个表达式，从左到右依次扫描时并不能确定当前运算符的优先级，在右边可能存在优先级更高的运算符，因此需要一个栈将运算符暂时存下来，而且当需要这个运算符的，恰好要的是最后存储的那个运算符，与栈的定义完全相同，因此可以选择栈作为运算符的临时存储结构。</p><h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>stdfax.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;assert.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>postfix.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> POSTFIX_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> POSTFIX_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfx.h"</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token comment" spellcheck="true">//栈类</span><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    T<span class="token operator">*</span> elements<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//存放元素的栈数组</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//栈顶指针</span>    <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//栈能容纳元素的最大个数</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">Stack</span><span class="token punctuation">(</span><span class="token keyword">int</span> sz <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxSize</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个元素个数为maxSize的数组</span>        elements <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>maxSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">assert</span><span class="token punctuation">(</span>elements <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">~</span><span class="token function">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数    </span>    <span class="token comment" spellcheck="true">//栈扩充函数</span>    <span class="token keyword">void</span> <span class="token function">overflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//每次扩充20个元素</span>        <span class="token keyword">const</span> <span class="token keyword">int</span> add <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        T<span class="token operator">*</span> newArray <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>maxSize <span class="token operator">+</span> add<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newArray <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cerr <span class="token operator">&lt;&lt;</span> <span class="token string">"存储分配失败！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>top<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//将旧栈的元素移动到新栈中</span>                newArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//复制完毕后释放原来栈的空间，最大容纳量增加</span>        maxSize <span class="token operator">+</span><span class="token operator">=</span> add<span class="token punctuation">;</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断栈是否为空</span>    <span class="token keyword">bool</span> <span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断栈是否为满</span>    <span class="token keyword">bool</span> <span class="token function">Full</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> maxSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取栈顶元素的值</span>    T <span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>     <span class="token punctuation">{</span> <span class="token keyword">return</span> elements<span class="token punctuation">[</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//进栈函数</span>    <span class="token keyword">void</span> <span class="token function">Push</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> elements<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//出栈函数</span>    T <span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> elements<span class="token punctuation">[</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//判断字符是否合法</span><span class="token keyword">bool</span> <span class="token function">legal</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'/'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">';'</span>         <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判断括号是否匹配</span><span class="token keyword">bool</span> <span class="token function">MatchPairs</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> equation<span class="token punctuation">)</span><span class="token punctuation">{</span>    Stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> s<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//存储括号</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>equation<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"括号不匹配！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> s<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"括号不匹配！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//优先级排序</span><span class="token keyword">int</span> <span class="token function">priority</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'*'</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//中缀表达式转化为后缀表达式的非递归算法</span>string <span class="token function">change1</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> equation<span class="token punctuation">)</span> <span class="token punctuation">{</span>     string postfix<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//字符串str1为后缀表达式</span>    Stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> opera<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//定义一个char类型的栈opera用于存储运算符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">MatchPairs</span><span class="token punctuation">(</span>equation<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入的表达式括号不匹配！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"error"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//依次处理每个字符</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> equation<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">legal</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先判断字符是否合法</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入的表达式不合法！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//为结束标识符'；'退出循环操作</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">';'</span><span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果是数字或字母，直接进入后缀表达式</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            postfix <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>                                     <span class="token comment" spellcheck="true">//否则为运算符</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true">//如果是左括号，入栈</span>                opera<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span>             <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果是右括号，但栈顶不是左括号，就依次弹出并加入到后缀表达式，直到为左括号</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    postfix <span class="token operator">+</span><span class="token operator">=</span> opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//弹出左括号，但不输出</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>             <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">priority</span><span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//栈顶优先级大于等于当前运算符，则输出</span>                    postfix <span class="token operator">+</span><span class="token operator">=</span> opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//如果栈为空，停止输出</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                opera<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把当前运算符入栈</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">false</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//最后，如果栈不空，则弹出所有元素并输出</span>        postfix <span class="token operator">+</span><span class="token operator">=</span> opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> postfix<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//中缀表达式转化为后缀表达式的递归算法</span>string postfix <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                         <span class="token comment" spellcheck="true">//字符串str1为后缀表达式</span>Stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> opera<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//定义一个char类型的栈opera用于存储运算符</span>string <span class="token function">change2</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> equation<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>equation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> postfix<span class="token punctuation">;</span>    string temp <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果是数字或字母，直接进入后缀表达式</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>equation<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> postfix<span class="token punctuation">;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> equation<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        postfix <span class="token operator">+</span><span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">change2</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>                                     <span class="token comment" spellcheck="true">//否则为运算符</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span>                     <span class="token comment" spellcheck="true">//如果是左括号，入栈</span>        <span class="token punctuation">{</span>            opera<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">change2</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">')'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果是右括号，但栈顶不是左括号，就依次弹出并加入到后缀表达式，直到为左括号</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                postfix <span class="token operator">+</span><span class="token operator">=</span> opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//弹出左括号，但不输出</span>            <span class="token keyword">return</span> <span class="token function">change2</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">priority</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">priority</span><span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//栈顶优先级大于等于当前运算符，则输出</span>                postfix <span class="token operator">+</span><span class="token operator">=</span> opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//如果栈为空，停止输出</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            opera<span class="token punctuation">.</span><span class="token function">Push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把当前运算符入栈</span>            <span class="token keyword">return</span> <span class="token function">change2</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>string <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> postfix<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>opera<span class="token punctuation">.</span><span class="token function">Empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//最后，如果栈不空，则弹出所有元素并输出</span>        postfix <span class="token operator">+</span><span class="token operator">=</span> opera<span class="token punctuation">.</span><span class="token function">Top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opera<span class="token punctuation">.</span><span class="token function">Pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> postfix<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !POSTFIX_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"postfix.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfx.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    string infix<span class="token punctuation">;</span>    string postfix<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入中缀表达式："</span> <span class="token operator">&lt;&lt;</span> infix<span class="token punctuation">;</span>    cin <span class="token operator">>></span> infix<span class="token punctuation">;</span>    postfix<span class="token operator">=</span><span class="token function">change1</span><span class="token punctuation">(</span>infix<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"非递归后缀表达式为："</span> <span class="token operator">&lt;&lt;</span> postfix <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    postfix <span class="token operator">=</span> <span class="token function">change2</span><span class="token punctuation">(</span>infix<span class="token punctuation">)</span><span class="token punctuation">;</span>    postfix <span class="token operator">=</span> <span class="token function">print</span><span class="token punctuation">(</span>postfix<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"递归后缀表达式为："</span> <span class="token operator">&lt;&lt;</span> postfix <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构第一次上机实习</title>
      <link href="2021/01/19/shu-ju-jie-gou-di-yi-ci-shang-ji/"/>
      <url>2021/01/19/shu-ju-jie-gou-di-yi-ci-shang-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="实习题目：一元稀疏多项式运算器"><a href="#实习题目：一元稀疏多项式运算器" class="headerlink" title="实习题目：一元稀疏多项式运算器"></a>实习题目：一元稀疏多项式运算器</h1><h2 id="一、-上机实习题目与要求"><a href="#一、-上机实习题目与要求" class="headerlink" title="一、 上机实习题目与要求"></a><strong>一、</strong> 上机实习题目与要求</h2><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>设计一个一元稀疏多项式简单计算器。</p><h3 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h3><p>（1）输入并建立两个多项式； </p><p>（2）多项式a与b相加，建立和多项式c； </p><p>（3）多项式a与b相减，建立差多项式d； </p><p>（3）输出多项式a,b,c,d。输出格式：比如多项式a为： A(x)=c1x^e1+ c2x^e2+…+ cmx^em，其中，ci和ei分别为第i项的系数和指数，且各项按指数的升幂排列，即0≤e1＜e2＜… ＜em。</p><h2 id="二、数据结构设计"><a href="#二、数据结构设计" class="headerlink" title="二、数据结构设计"></a>二、数据结构设计</h2><p>选择带头结点的单链表存储稀疏多项式。</p><p>原因是稀疏多项式相邻两项的系数差距可能比较大，若使用数组会由较大存储空间的浪费，若系数过大甚至还会有项数溢出的现象；系数还可能为小数，数组没有办法为每一个系数预先分配好空间；多项式的运算中存在项数的增减，有频繁的插入和删除操作，若存在数组中会有大量数据的移动。选择带头结点的单链表来存储稀疏多项式，不存在存储空间的浪费与溢出的情况，对大部分项数都能灵活应对，在进行加减运算时可以直接利用利用原多项式的存储空间。</p><h2 id="三、源代码"><a href="#三、源代码" class="headerlink" title="三、源代码"></a>三、源代码</h2><p>stdfx.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> STDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>multinomial.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> MULTINOMIAL_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> MULTINOMIAL_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfx.h"</span></span><span class="token keyword">struct</span> Node                    <span class="token comment" spellcheck="true">//多项式结点</span><span class="token punctuation">{</span>    <span class="token keyword">float</span> coef<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//多项式的系数</span>    <span class="token keyword">int</span> exp<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//多项式的指数</span>    Node<span class="token operator">*</span> next<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//链表指针</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> coef <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> exp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">Node</span><span class="token punctuation">(</span><span class="token keyword">float</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">,</span> Node<span class="token operator">*</span> link <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token punctuation">{</span>        coef <span class="token operator">=</span> c<span class="token punctuation">;</span> exp <span class="token operator">=</span> e<span class="token punctuation">;</span>next <span class="token operator">=</span> link<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Node<span class="token operator">*</span> <span class="token function">InsertAfter</span><span class="token punctuation">(</span><span class="token keyword">float</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//在链表插入元素</span>    <span class="token punctuation">{</span>        next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> e<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Poly</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    Node<span class="token operator">*</span> first<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//指向多项式的头节点</span>    Node<span class="token operator">*</span> <span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> first<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//获取多项式的表头指针</span>    <span class="token keyword">friend</span> Poly <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Poly<span class="token operator">&amp;</span><span class="token punctuation">,</span> Poly<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">friend</span> Poly <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>Poly<span class="token operator">&amp;</span><span class="token punctuation">,</span> Poly<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//多项式构造函数,只有头节点的链表</span>    <span class="token function">Poly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//拷贝构造函数</span>    <span class="token function">Poly</span><span class="token punctuation">(</span>Poly<span class="token operator">&amp;</span> R<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node<span class="token operator">*</span> desptr <span class="token operator">=</span> first<span class="token punctuation">,</span> <span class="token operator">*</span> srcptr <span class="token operator">=</span> R<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>srcptr <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将数据逐个拷贝</span>            desptr<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>srcptr<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> srcptr<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            srcptr <span class="token operator">=</span> srcptr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            desptr <span class="token operator">=</span> desptr<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数</span>    <span class="token operator">~</span><span class="token function">Poly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//通过用户输入建立多项式</span>    <span class="token keyword">void</span> <span class="token function">Creat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        Node<span class="token operator">*</span> value <span class="token operator">=</span> first<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入多项式的项数："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"项数应该大于0"</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//将每一项依次存入链表中</span>            value<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>            value <span class="token operator">=</span> value<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            value<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入该项的系数与指数："</span><span class="token punctuation">;</span>            cin <span class="token operator">>></span> value<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">>></span> value<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取多项式的长度</span>    <span class="token keyword">int</span> <span class="token function">Getlength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">*</span> current <span class="token operator">=</span> first<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//多项式为空时返回0</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该多项式为空！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//每有一个元素，计数增加1</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>            current <span class="token operator">=</span> current<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将多项式降序排序与合并同类项</span>    <span class="token keyword">void</span> <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Node<span class="token operator">*</span> current <span class="token operator">=</span> first<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        Node<span class="token operator">*</span> follow <span class="token operator">=</span> first<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        Node<span class="token operator">*</span> t <span class="token operator">=</span> first<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//冒泡排序</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>               <span class="token punctuation">{</span>            current <span class="token operator">=</span> t<span class="token punctuation">;</span>            follow <span class="token operator">=</span> current<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>follow<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果当前项指数小于后一项，继续往下走</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">&lt;</span> follow<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span>                 <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>follow<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                        follow <span class="token operator">=</span> follow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//系数相同时合并同类项</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">==</span> follow<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//用一个临时结点存放两项的和</span>                    current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">+</span><span class="token operator">=</span> follow<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>                    Node<span class="token operator">*</span> temp <span class="token operator">=</span> first<span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>temp<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> follow<span class="token punctuation">)</span>                        temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>follow<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        follow <span class="token operator">=</span> temp<span class="token punctuation">;</span>                        temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                        follow<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                        <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>                        follow <span class="token operator">=</span> follow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        follow <span class="token operator">=</span> temp<span class="token punctuation">;</span>                        temp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                        <span class="token keyword">delete</span> temp<span class="token punctuation">;</span>                        follow<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//交换两节点指数和系数的位置</span>                    Node<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> Node<span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">=</span> current<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>                    temp<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">=</span> current<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">;</span>                    current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">=</span> follow<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>                    current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">=</span> follow<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">;</span>                    follow<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>                    follow<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">=</span> temp<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>follow<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                        follow <span class="token operator">=</span> follow<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token operator">-</span><span class="token operator">></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                t <span class="token operator">=</span> t<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//多项式的输出</span>    <span class="token keyword">void</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> h <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        Node <span class="token operator">*</span>current <span class="token operator">=</span> first<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//多项式为空时无输出</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该多项式为空！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"+"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                h <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">&lt;&lt;</span><span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                     <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"x"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"x^"</span> <span class="token operator">&lt;&lt;</span> current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span><span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> current<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">&lt;&lt;</span> <span class="token string">"x^"</span> <span class="token operator">&lt;&lt;</span> current<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                current <span class="token operator">=</span> current<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对运算符+的重载，实现运算符的加法运算</span>Poly <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Poly<span class="token operator">&amp;</span> A<span class="token punctuation">,</span> Poly<span class="token operator">&amp;</span> B<span class="token punctuation">)</span><span class="token punctuation">{</span>    A<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    B<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token operator">*</span> pa<span class="token punctuation">,</span> <span class="token operator">*</span> pb<span class="token punctuation">,</span> <span class="token operator">*</span> pc<span class="token punctuation">,</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">float</span> temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两个多项式相加的结果为多项式C</span>    Poly C<span class="token punctuation">;</span>    pc <span class="token operator">=</span> C<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//pa与pb分别指A与B的第一个结点，相加后的元素指针后移</span>    pa <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    pb <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pa <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pb <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//都不为空时先进行比较</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pa<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">==</span> pb<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//相等时两系数相加,指针均后移</span>            temp <span class="token operator">=</span> pa<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">+</span> pb<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//相加后系数不为0时，将元素加入C链</span>                pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> pa<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pa <span class="token operator">=</span> pa<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pa<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">&lt;</span> pb<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果pa指数较小，将pa指向的元素链入C链</span>            pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>pa<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> pa<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>pb<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> pb<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理剩余链</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> p <span class="token operator">=</span> pa<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span> p <span class="token operator">=</span> pb<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> p<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span>Poly <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span>Poly<span class="token operator">&amp;</span> A<span class="token punctuation">,</span> Poly<span class="token operator">&amp;</span> B<span class="token punctuation">)</span><span class="token punctuation">{</span>    A<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    B<span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Node<span class="token operator">*</span> pa<span class="token punctuation">,</span> <span class="token operator">*</span> pb<span class="token punctuation">,</span> <span class="token operator">*</span> pc<span class="token punctuation">;</span>    <span class="token keyword">float</span> temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//两个多项式相减的结果为多项式C</span>    Poly C<span class="token punctuation">;</span>    pc <span class="token operator">=</span> C<span class="token punctuation">.</span>first<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//pa与pb分别指A与B的第一个结点，相减后的元素指针后移</span>    pa <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    pb <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">getHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pa <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> pb <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//都不为空时先进行比较</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pa<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">==</span> pb<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//相等时两系数相减,指针均后移</span>            temp <span class="token operator">=</span> pa<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">-</span> pb<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//相减后系数不为0时，将元素加入C链</span>                pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> pa<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pa <span class="token operator">=</span> pa<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pa<span class="token operator">-</span><span class="token operator">></span>exp <span class="token operator">&lt;</span> pb<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果pa指数较小，将pa指向的元素链入C链</span>            pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>pa<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> pa<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            pb<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">=</span> pb<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>            pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>pb<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> pb<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理剩余链</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pa <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>pa <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>pa<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> pa<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            pa <span class="token operator">=</span> pa<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>     <span class="token punctuation">{</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>pb <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pb<span class="token operator">-</span><span class="token operator">></span>coef <span class="token operator">=</span> <span class="token operator">-</span>pb<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">;</span>            pc <span class="token operator">=</span> pc<span class="token operator">-</span><span class="token operator">></span><span class="token function">InsertAfter</span><span class="token punctuation">(</span>pb<span class="token operator">-</span><span class="token operator">></span>coef<span class="token punctuation">,</span> pb<span class="token operator">-</span><span class="token operator">></span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>            pb <span class="token operator">=</span> pb<span class="token operator">-</span><span class="token operator">></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !MULTINOMIAL_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"multinomial.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfx.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Poly A<span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">Creat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A链为："</span><span class="token punctuation">;</span>    A<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Poly B<span class="token punctuation">;</span>    B<span class="token punctuation">.</span><span class="token function">Creat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B链为："</span><span class="token punctuation">;</span>    B<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Poly C<span class="token punctuation">;</span>    C <span class="token operator">=</span> A <span class="token operator">+</span> B<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"相加后的C链为："</span><span class="token punctuation">;</span>    C<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    C <span class="token operator">=</span> A <span class="token operator">-</span> B<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"相减后的C链为："</span><span class="token punctuation">;</span>    C<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练9</title>
      <link href="2020/08/21/c-bian-cheng-xun-lian-9/"/>
      <url>2020/08/21/c-bian-cheng-xun-lian-9/</url>
      
        <content type="html"><![CDATA[<p> 滴滴打车是目前出行的一种选择，打车时根据选择车型不同，实际行驶路程进行计费。武汉市的滴滴打车目前提供了 4 种车型，分别为快车、出租车、专车和豪华车。不同车型的 起步价以及起步价内的行驶路程不同，同时，每公里的计费标准也不相同；例如武汉市的快 车起步价为 8 元，起步价路程为 3Km，超出 3Km后，每公里计费 2.2 元。通过上述描述， 进行程序设计，当给定车型和行驶路程后，计算乘车费用。</p><p>​                                                                    表 1 武汉市滴滴计费标准</p><table><thead><tr><th>车辆类型</th><th>起步价（元）</th><th>起步价路程（km）</th><th>超出距离计费（元/公里）</th></tr></thead><tbody><tr><td>快车</td><td>8.0</td><td>3</td><td>2.2</td></tr><tr><td>出租车</td><td>10.0</td><td>4</td><td>2.7</td></tr><tr><td>专车</td><td>14.0</td><td>3</td><td>3.6</td></tr><tr><td>豪华车</td><td>18.0</td><td>3</td><td>3.9</td></tr></tbody></table><p>要求： </p><p>1) 滴滴司机每跑完一个订单，形成一个记录，记入该司机名下；订单记录信息含如下内容： 订单号、起始时间、终止时间、行驶路程、订单支付金额。司机可随时查询指定时间段 内所完成的订单信息，统计收入金额。<br>2) 保存订单记录的数据结构可采用第一题的数组或 STL 中的容器。</p><p>编程思路：因为一共只有4种车，则用一个枚举类型将四种车存入其中。在分别创建滴滴车类（可以计算每个订单的费用），订单类用于存储每个订单的信息，由于要记录时间，可以创建一个时间类方便处理时间.最后创建一个司机类用于存储订单和车，以及能够让司机随时查找订单的功能。完成后测试时只需要创建一辆对应的车给司机，再把订单给司机即可。用于存储订单的列表需要用到之前编写的数组类。</p><p>头文件stdfx.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDAFX_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> STDAFX_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstdlib></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myarray.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"didi.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// STDAFX_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件myarray.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> MYARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token comment" spellcheck="true">//自定义的异常类型</span><span class="token keyword">class</span> <span class="token class-name">OutOfRange</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">OutOfRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">OutOfRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_len</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取具体的错误信息</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//容器中定义的长度</span>    <span class="token keyword">int</span> m_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前用户要访问的下标</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> OutOfRange<span class="token operator">::</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Error: out of range( continents length "</span><span class="token operator">&lt;&lt;</span>m_len        <span class="token operator">&lt;&lt;</span><span class="token string">", access index "</span><span class="token operator">&lt;&lt;</span>m_index<span class="token operator">&lt;&lt;</span><span class="token string">" )"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现动态数组的类模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> DT<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ArrayT</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//initialize 初始化</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        nums <span class="token operator">=</span> nums <span class="token operator">></span> <span class="token number">0</span><span class="token operator">?</span> nums <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_pData <span class="token operator">=</span> <span class="token punctuation">(</span>DT<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DT<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nums <span class="token operator">+</span> m_stepSize<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        m_capacity <span class="token operator">=</span> nums <span class="token operator">+</span> m_stepSize<span class="token punctuation">;</span>        m_len <span class="token operator">=</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//ctor</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">init</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">,</span>DT val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m_len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//copy ctor</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token keyword">const</span> ArrayT <span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化一个同obj相同的空间</span>        <span class="token function">init</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>m_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将元素进行拷贝</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>m_len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//copy assignment 拷贝赋值</span>    ArrayT <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> ArrayT <span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//self assignment pred 自我赋值判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_pData <span class="token operator">==</span> obj<span class="token punctuation">.</span>m_pData<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//capacity 如果目标空间大于源空间，则不需要申请内存空间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_capacity <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>m_capacity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对原有空间进行扩容，即已经有的数值保持不变,现有空间同obj的空间相同</span>            m_pData <span class="token operator">=</span> <span class="token punctuation">(</span>DT<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span> m_pData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DT<span class="token punctuation">)</span> <span class="token operator">*</span> obj<span class="token punctuation">.</span>m_capacity <span class="token punctuation">)</span><span class="token punctuation">;</span>            m_capacity <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_capacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将元素进行拷贝</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>m_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        m_len <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_len<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//dtor</span>    <span class="token operator">~</span><span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_pData<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span>m_pData<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_pData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//member of function</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//overload operator []</span>    DT<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> index<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> index<span class="token operator">>=</span>m_len <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//抛出异常（创建一个临时的匿名对象）</span>            <span class="token keyword">throw</span> <span class="token function">OutOfRange</span><span class="token punctuation">(</span>m_len<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>m_pData <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在末尾插入元素,返回当前插入元素的索引号</span>    <span class="token keyword">int</span> <span class="token function">push_back</span><span class="token punctuation">(</span>DT ele<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_len <span class="token operator">>=</span> m_capacity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果容量不足就扩容</span>            m_capacity <span class="token operator">+</span><span class="token operator">=</span> m_stepSize<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//扩容 原有元素保持不变</span>            m_pData <span class="token operator">=</span> <span class="token punctuation">(</span>DT<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span> m_pData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DT<span class="token punctuation">)</span> <span class="token operator">*</span> m_capacity <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span><span class="token punctuation">(</span>m_pData <span class="token operator">+</span> m_len<span class="token punctuation">)</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span>        m_len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m_len<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在末尾弹出数组元素,返回该元素</span>    DT <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">OutOfRange</span><span class="token punctuation">(</span>m_len<span class="token punctuation">,</span>m_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抛出异常（创建一个匿名对象）</span>        <span class="token punctuation">}</span>        m_len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>m_pData <span class="token operator">+</span> m_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取数组长度</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span> <span class="token keyword">return</span> m_len<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取开始位置的指针</span>    DT <span class="token operator">*</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> m_pData<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取超尾位置的指针</span>    DT <span class="token operator">*</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_pData<span class="token operator">+</span>m_len<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//member of data</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//数组长度</span>    <span class="token keyword">int</span> m_capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当前的内存能容纳多少个元素</span>    DT <span class="token operator">*</span>m_pData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//具体数据内容的内存指针</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> m_stepSize <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//每次扩容的步长</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// MYARRAY_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件didi.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> DIDI_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> DIDI_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用枚举类型放4种车(快车，出租车，专车，豪华车）</span><span class="token keyword">enum</span> <span class="token keyword">class</span> <span class="token class-name">DIDITYPE</span><span class="token punctuation">{</span> QUICK_CAR<span class="token punctuation">,</span> TAXI<span class="token punctuation">,</span> PRIVATE_CAR<span class="token punctuation">,</span> LUXURY_CAR <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//车类</span><span class="token keyword">class</span> <span class="token class-name">didicar</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">didicar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">didicar</span><span class="token punctuation">(</span>DIDITYPE dv<span class="token punctuation">,</span> <span class="token keyword">float</span> fsp<span class="token punctuation">,</span> <span class="token keyword">float</span> fsd<span class="token punctuation">,</span> <span class="token keyword">float</span> fp<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">_type</span><span class="token punctuation">(</span>dv<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_fSPrice</span><span class="token punctuation">(</span>fsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_fSDis</span><span class="token punctuation">(</span>fsd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_fPrice</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">protected</span><span class="token operator">:</span>    DIDITYPE _type<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//车类</span>    <span class="token keyword">float</span> _fSPrice<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//起步价</span>    <span class="token keyword">float</span> _fSDis<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//起步距离</span>    <span class="token keyword">float</span> _fPrice<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//每公里价格</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//计算费用,形参为距离</span>    <span class="token keyword">float</span> <span class="token function">calFee</span><span class="token punctuation">(</span><span class="token keyword">float</span> dis<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">float</span> fprice<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果在起步距离内，价格为起步价，否则另行计算</span>        fprice <span class="token operator">=</span> dis <span class="token operator">></span> _fSDis <span class="token operator">?</span> _fSPrice <span class="token operator">:</span> _fSPrice <span class="token operator">+</span> <span class="token punctuation">(</span>dis <span class="token operator">-</span> _fSDis<span class="token punctuation">)</span> <span class="token operator">*</span> _fPrice<span class="token punctuation">;</span>        <span class="token keyword">return</span> fprice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//日期类</span><span class="token keyword">class</span> <span class="token class-name">datatime</span><span class="token punctuation">{</span><span class="token keyword">protected</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//一个日期由年月日时分秒构成</span>    <span class="token keyword">int</span> _year<span class="token punctuation">;</span>    <span class="token keyword">int</span> _mouth<span class="token punctuation">;</span>    <span class="token keyword">int</span> _day<span class="token punctuation">;</span>    <span class="token keyword">int</span> _hour<span class="token punctuation">;</span>    <span class="token keyword">int</span> _min<span class="token punctuation">;</span>    <span class="token keyword">int</span> _sec<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">datatime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">_year</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_mouth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_day</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_hour</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_sec</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">datatime</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> mouth<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">,</span> <span class="token keyword">int</span> min<span class="token punctuation">,</span><span class="token keyword">int</span> sec<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">_year</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_mouth</span><span class="token punctuation">(</span>mouth<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_day</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_hour</span><span class="token punctuation">(</span>hour<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_min</span><span class="token punctuation">(</span>min<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_sec</span><span class="token punctuation">(</span>sec<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出时间函数</span>    <span class="token keyword">void</span> <span class="token function">outdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> _year <span class="token operator">&lt;&lt;</span> <span class="token string">"年"</span> <span class="token operator">&lt;&lt;</span> _mouth <span class="token operator">&lt;&lt;</span> <span class="token string">"月"</span> <span class="token operator">&lt;&lt;</span> _day <span class="token operator">&lt;&lt;</span> <span class="token string">"日"</span>            <span class="token operator">&lt;&lt;</span> _hour <span class="token operator">&lt;&lt;</span> <span class="token string">"时"</span> <span class="token operator">&lt;&lt;</span> _min <span class="token operator">&lt;&lt;</span> <span class="token string">"分"</span> <span class="token operator">&lt;&lt;</span> _sec <span class="token operator">&lt;&lt;</span> <span class="token string">"秒"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重载==判断时间是否相等</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> datatime<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_year <span class="token operator">==</span> _year<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_mouth <span class="token operator">==</span> _mouth<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_day <span class="token operator">==</span> _day<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_hour <span class="token operator">==</span> _hour<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_min <span class="token operator">==</span> _min<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>_sec <span class="token operator">==</span> _sec<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重载>=用于判断是否在指定时间内</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">>=</span><span class="token punctuation">(</span><span class="token keyword">const</span> datatime<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_year <span class="token operator">></span> obj<span class="token punctuation">.</span>_year<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_year <span class="token operator">==</span> obj<span class="token punctuation">.</span>_year<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_mouth <span class="token operator">></span> obj<span class="token punctuation">.</span>_mouth<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_mouth <span class="token operator">==</span> obj<span class="token punctuation">.</span>_mouth<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>_day <span class="token operator">></span> obj<span class="token punctuation">.</span>_day<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_day <span class="token operator">==</span> obj<span class="token punctuation">.</span>_day<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>_hour <span class="token operator">></span> obj<span class="token punctuation">.</span>_hour<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_hour <span class="token operator">==</span> obj<span class="token punctuation">.</span>_hour<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>_min <span class="token operator">></span> obj<span class="token punctuation">.</span>_min<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_min <span class="token operator">==</span> obj<span class="token punctuation">.</span>_min<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>_sec <span class="token operator">>=</span> obj<span class="token punctuation">.</span>_min<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//重载&lt;=用于判断是否在指定时间内</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">&lt;=</span><span class="token punctuation">(</span><span class="token keyword">const</span> datatime<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_year <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>_year<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_year <span class="token operator">==</span> obj<span class="token punctuation">.</span>_year<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_mouth <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>_mouth<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_mouth <span class="token operator">==</span> obj<span class="token punctuation">.</span>_mouth<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>_day <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>_day<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_day <span class="token operator">==</span> obj<span class="token punctuation">.</span>_day<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>_hour <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>_hour<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_hour <span class="token operator">==</span> obj<span class="token punctuation">.</span>_hour<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>_min <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>_min<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_min <span class="token operator">==</span> obj<span class="token punctuation">.</span>_min<span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>_sec <span class="token operator">&lt;=</span> obj<span class="token punctuation">.</span>_min<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//订单类</span><span class="token keyword">class</span> <span class="token class-name">order</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> ID<span class="token punctuation">;</span>    datatime _begin<span class="token punctuation">;</span>    datatime _end<span class="token punctuation">;</span>    <span class="token keyword">float</span> _fDistance<span class="token punctuation">;</span>    <span class="token keyword">float</span> _fFee<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构造函数</span>    <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">order</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> datatime begin<span class="token punctuation">,</span> datatime end<span class="token punctuation">,</span> <span class="token keyword">float</span> distance<span class="token punctuation">,</span><span class="token keyword">float</span> fee<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">ID</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_begin</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_end</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_fDistance</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">_fFee</span><span class="token punctuation">(</span>fee<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出一个订单的相关信息</span>    <span class="token keyword">void</span> <span class="token function">outOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"订单号为："</span> <span class="token operator">&lt;&lt;</span> ID <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出时间</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"起始时间为："</span><span class="token punctuation">;</span>        _begin<span class="token punctuation">.</span><span class="token function">outdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"起始时间为："</span><span class="token punctuation">;</span>        _end<span class="token punctuation">.</span><span class="token function">outdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"行驶路程为："</span> <span class="token operator">&lt;&lt;</span> _fDistance <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"订单支付金额为："</span> <span class="token operator">&lt;&lt;</span> _fFee<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\n"</span><span class="token operator">&lt;&lt;</span><span class="token string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//司机类</span><span class="token keyword">class</span> <span class="token class-name">driver</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    didicar _carobj<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义一个车类</span>    ArrayT<span class="token operator">&lt;</span>order<span class="token operator">></span> _arOder<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用于存放订单的数组</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//根据日期查询订单,只要是在此期间的订单都显示出来</span>    <span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span>datatime<span class="token operator">&amp;</span> objbeg<span class="token punctuation">,</span> datatime<span class="token operator">&amp;</span> objend<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> nnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用于记录在这个区间中有多少个订单</span>        <span class="token keyword">float</span> allmoney <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//用于记录这段时间的总收入</span>        <span class="token comment" spellcheck="true">//但是在实际过程中，录入的订单一般是已经排好序的，采用二分法更好</span>        <span class="token comment" spellcheck="true">//由于此题的订单可能是乱序的，避免重新排序，使用顺序法</span>        <span class="token keyword">int</span> m_len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取数组长度</span>        m_len <span class="token operator">=</span> _arOder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m_len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>objbeg <span class="token operator">&lt;=</span> _arOder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_begin <span class="token operator">&amp;&amp;</span> objend <span class="token operator">>=</span> _arOder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_end<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这段时间的订单："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                _arOder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">outOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                allmoney <span class="token operator">+</span><span class="token operator">=</span> _arOder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>_fFee<span class="token punctuation">;</span>                <span class="token operator">++</span>nnum<span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这段时间的总收入为："</span> <span class="token operator">&lt;&lt;</span> allmoney <span class="token operator">&lt;&lt;</span> <span class="token string">"元"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"记录中没有这段时间的订单！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">return</span> nnum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//根据订单号查询</span>    <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> norderID<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> m_len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取数组长度</span>        m_len <span class="token operator">=</span> _arOder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历数组，查看是否有该订单</span>        <span class="token comment" spellcheck="true">//每个订单号都是独一无二的，不存在一个订单号有几个订单</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> m_len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>norderID <span class="token operator">==</span> _arOder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"该订单在记录中，相关信息为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                _arOder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">outOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//如果没有订单告诉司机</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"记录中没有"</span> <span class="token operator">&lt;&lt;</span> norderID <span class="token operator">&lt;&lt;</span> <span class="token string">"这个订单号！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !DIDI_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//构建一辆车</span>    DIDITYPE dv <span class="token operator">=</span> DIDITYPE<span class="token operator">::</span>QUICK_CAR<span class="token punctuation">;</span>    didicar <span class="token function">didiobj</span><span class="token punctuation">(</span>dv<span class="token punctuation">,</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//构建一个司机</span>    driver zztobj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把车给司机</span>    zztobj<span class="token punctuation">.</span>_carobj <span class="token operator">=</span> didiobj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//跑完一单后的钱 </span>    <span class="token keyword">float</span> nfee <span class="token operator">=</span> zztobj<span class="token punctuation">.</span>_carobj<span class="token punctuation">.</span><span class="token function">calFee</span><span class="token punctuation">(</span><span class="token number">26.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建初始时间与结束时间</span>    datatime <span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datatime <span class="token function">end</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建订单并放入订单数组中</span>    order <span class="token function">objorder</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> begin<span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">26.5</span><span class="token punctuation">,</span> nfee<span class="token punctuation">)</span><span class="token punctuation">;</span>    zztobj<span class="token punctuation">.</span>_arOder<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>objorder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出这个订单的信息</span>    zztobj<span class="token punctuation">.</span>_arOder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">outOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过时间段来查找订单</span>    <span class="token comment" spellcheck="true">//确定起止区间,让订单在其中，再根据时间查找</span>    datatime <span class="token function">one_begin</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    datatime <span class="token function">one_end</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    zztobj<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>one_begin<span class="token punctuation">,</span> one_end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//确定起止区间,让订单不在其中，再根据时间查找</span>    <span class="token comment" spellcheck="true">/*    datatime two_begin(2030, 1, 1, 0, 0, 0);    datatime two_end(2030, 12, 31, 0, 0, 0);    zztobj.query(two_begin, two_end);    */</span>    <span class="token comment" spellcheck="true">//通过ID的方法查找订单</span>    <span class="token comment" spellcheck="true">/*    zztobj.query(1);        //订单号存在时    zztobj.query(123);        //订单号不存在时    */</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练8</title>
      <link href="2020/08/20/c-bian-cheng-xun-lian-8/"/>
      <url>2020/08/20/c-bian-cheng-xun-lian-8/</url>
      
        <content type="html"><![CDATA[<p>已提供代码文件如下：</p><p> stdafx.h 文件，包含程序所需的文件； myarray.h 文件 动态数组类模板文件，实现了动态数组的基本操作；提供了[], begin(),end() 等，同时提供了异常处理的类，当访问数组时出现越界异常，则会抛出异常。</p><p> 要求： 1）实现 replaceValue 函数，该函数为一个全局函数，其说明见所给的main.cpp 文件 template<typename DT> size_t replaceValue(DT <em> first,DT </em> last,DT oldValue,DT newValue)</p><p> 2）利用main 函数中的测试用例，测试该函数的有效性。</p><p>头文件stdafx.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> SYDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> SYDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件myarray.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> MYARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> MYARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token comment" spellcheck="true">//自定义的异常类型</span><span class="token keyword">class</span> <span class="token class-name">OutOfRange</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">OutOfRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">OutOfRange</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_len</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取具体的错误信息</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//容器中定义的长度</span>    <span class="token keyword">int</span> m_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//当前用户要访问的下标</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> OutOfRange<span class="token operator">::</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Error: out of range( continents length "</span><span class="token operator">&lt;&lt;</span>m_len        <span class="token operator">&lt;&lt;</span><span class="token string">", access index "</span><span class="token operator">&lt;&lt;</span>m_index<span class="token operator">&lt;&lt;</span><span class="token string">" )"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现动态数组的类模板</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> DT<span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">ArrayT</span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//initialize 初始化</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        nums <span class="token operator">=</span> nums <span class="token operator">></span> <span class="token number">0</span><span class="token operator">?</span> nums <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        m_pData <span class="token operator">=</span> <span class="token punctuation">(</span>DT<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DT<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nums <span class="token operator">+</span> m_stepSize<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        m_capacity <span class="token operator">=</span> nums <span class="token operator">+</span> m_stepSize<span class="token punctuation">;</span>        m_len <span class="token operator">=</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//ctor</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">init</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token keyword">int</span> nums<span class="token punctuation">,</span>DT val<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">init</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m_len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//copy ctor</span>    <span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token keyword">const</span> ArrayT <span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//初始化一个同obj相同的空间</span>        <span class="token function">init</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>m_len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将元素进行拷贝</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>m_len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//copy assignment 拷贝赋值</span>    ArrayT <span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> ArrayT <span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//self assignment pred 自我赋值判断</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_pData <span class="token operator">==</span> obj<span class="token punctuation">.</span>m_pData<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//capacity 如果目标空间大于源空间，则不需要申请内存空间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_capacity <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>m_capacity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//对原有空间进行扩容，即已经有的数值保持不变,现有空间同obj的空间相同</span>            m_pData <span class="token operator">=</span> <span class="token punctuation">(</span>DT<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span> m_pData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DT<span class="token punctuation">)</span> <span class="token operator">*</span> obj<span class="token punctuation">.</span>m_capacity <span class="token punctuation">)</span><span class="token punctuation">;</span>            m_capacity <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_capacity<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//将元素进行拷贝</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>obj<span class="token punctuation">.</span>m_len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_pData<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        m_len <span class="token operator">=</span> obj<span class="token punctuation">.</span>m_len<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//dtor</span>    <span class="token operator">~</span><span class="token function">ArrayT</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_pData<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">free</span><span class="token punctuation">(</span>m_pData<span class="token punctuation">)</span><span class="token punctuation">;</span>            m_pData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//member of function</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//overload operator []</span>    DT<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token keyword">const</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断是否越界</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> index<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> index<span class="token operator">>=</span>m_len <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//抛出异常（创建一个临时的匿名对象）</span>            <span class="token keyword">throw</span> <span class="token function">OutOfRange</span><span class="token punctuation">(</span>m_len<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>m_pData <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在末尾插入元素,返回当前插入元素的索引号</span>    <span class="token keyword">int</span> <span class="token function">push_back</span><span class="token punctuation">(</span>DT ele<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_len <span class="token operator">>=</span> m_capacity<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果容量不足就扩容</span>            m_capacity <span class="token operator">+</span><span class="token operator">=</span> m_stepSize<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//扩容 原有元素保持不变</span>            m_pData <span class="token operator">=</span> <span class="token punctuation">(</span>DT<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span> m_pData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>DT<span class="token punctuation">)</span> <span class="token operator">*</span> m_capacity <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">*</span><span class="token punctuation">(</span>m_pData <span class="token operator">+</span> m_len<span class="token punctuation">)</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span>        m_len<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m_len<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在末尾弹出数组元素,返回该元素</span>    DT <span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m_len <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">OutOfRange</span><span class="token punctuation">(</span>m_len<span class="token punctuation">,</span>m_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//抛出异常（创建一个匿名对象）</span>        <span class="token punctuation">}</span>        m_len<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token punctuation">(</span>m_pData <span class="token operator">+</span> m_len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取数组长度</span>    <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span> <span class="token keyword">return</span> m_len<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取开始位置的指针</span>    DT <span class="token operator">*</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> m_pData<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取超尾位置的指针</span>    DT <span class="token operator">*</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token keyword">return</span> m_pData<span class="token operator">+</span>m_len<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//member of data</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//数组长度</span>    <span class="token keyword">int</span> m_capacity <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//当前的内存能容纳多少个元素</span>    DT <span class="token operator">*</span>m_pData <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//具体数据内容的内存指针</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> m_stepSize <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//每次扩容的步长</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// MYARRAY_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"myarray.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//算法的说明</span><span class="token comment" spellcheck="true">//将区间 [first,last)之间的值进行替换</span><span class="token comment" spellcheck="true">//当该区间的值为旧值oldValue时，替换为新值 newValue</span><span class="token comment" spellcheck="true">//返回替换值的个数</span><span class="token comment" spellcheck="true">//形参列表的说明</span><span class="token comment" spellcheck="true">//DT * first 区间 [first,last)第一个元素的指针</span><span class="token comment" spellcheck="true">//DT * last 区间 [first,last)最后一个元素的指针</span><span class="token comment" spellcheck="true">//DT oldValue 待替换的值</span><span class="token comment" spellcheck="true">//DT newValue 替换后的值</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> DT<span class="token operator">></span>size_t <span class="token function">replaceValue</span><span class="token punctuation">(</span>DT<span class="token operator">*</span> first<span class="token punctuation">,</span> DT<span class="token operator">*</span> last<span class="token punctuation">,</span> DT oldValue<span class="token punctuation">,</span> DT newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//完善该代码</span>    size_t nsize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在此处填写代码</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>first <span class="token operator">!=</span> last<span class="token punctuation">;</span><span class="token operator">++</span>first<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>first <span class="token operator">==</span> oldValue<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">*</span>first <span class="token operator">=</span> newValue<span class="token punctuation">;</span>            <span class="token operator">++</span>nsize<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> nsize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//测试所写的函数是否正确</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">49</span><span class="token punctuation">;</span>    ArrayT<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">objint</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> objint<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span> objint<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//原数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"替换前的数组为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> objint<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    size_t nn <span class="token operator">=</span> <span class="token function">replaceValue</span><span class="token punctuation">(</span>objint<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> objint<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//调整后的数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"替换后的数组为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> objint<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"替换的个数为"</span> <span class="token operator">&lt;&lt;</span> nn <span class="token operator">&lt;&lt;</span> <span class="token string">"个。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练7</title>
      <link href="2020/08/19/c-bian-cheng-xun-lian-7/"/>
      <url>2020/08/19/c-bian-cheng-xun-lian-7/</url>
      
        <content type="html"><![CDATA[<p>学生信息管理 定义学生类，包含学号 姓名 年龄 绩点这些成员 </p><p>要求：</p><ol><li>通过键盘输入学生信息，保存到文件中（文本文件、二进制文件全都要）</li><li>能够读取要求 1 中的文件，在屏幕上显示学生信息；</li><li>根据学生的绩点、年龄、学号进行排序，排序完成后，输出到文件和屏幕。</li></ol><p>思路：首先创建一个结构体用于存储学生的信息，再编写获取学生信息的函数，获取信息后分别将学生信息加载到txt与dat文本中，编写相应的函数打印文件内容，加载文本文件后编写程序将信息按照学号、年龄、绩点排序的相关函数，再编写按照姓名（学号/绩点）查找学生的函数。编写完成后在main函数中测试每一个函数的功能。</p><p>头文件sadfx.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> SYDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> SYDFAX_H_INCLUDE</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !SYDFAX_H_INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件Student.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STUDENT_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> STUDENT_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sadfx.h"</span></span><span class="token comment" spellcheck="true">//使用类存储每位学生的信息</span><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">double</span> ID<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">float</span> GPA<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100000</span><span class="token punctuation">;</span><span class="token keyword">static</span> Student<span class="token operator">*</span> pas <span class="token operator">=</span> <span class="token keyword">new</span> Student<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将学生信息加载到txt文本中</span><span class="token keyword">void</span> <span class="token function">intxt</span><span class="token punctuation">(</span>string filename<span class="token punctuation">)</span><span class="token punctuation">{</span>    ofstream <span class="token function">file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> ios<span class="token operator">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将学生信息导入txt文本中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        file <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span>            <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将学生信息加载到dat文本中</span><span class="token keyword">void</span> <span class="token function">indat</span><span class="token punctuation">(</span>string filename<span class="token punctuation">)</span><span class="token punctuation">{</span>    ofstream <span class="token function">file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        file<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取学生信息</span><span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学生的总数N: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请依次输入一个学生的姓名，学号,年龄以及绩点: "</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将学生信息导入txt文本中</span>    <span class="token function">intxt</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将学生信息导入dat二进制中</span>    <span class="token function">indat</span><span class="token punctuation">(</span><span class="token string">"student.dat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//清除内存</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">)</span>     <span class="token punctuation">{</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pas<span class="token punctuation">;</span>    pas <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过txt文件在屏幕上显示学生信息</span><span class="token keyword">void</span> <span class="token function">txtshow</span><span class="token punctuation">(</span>string filename<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> line<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    fstream file<span class="token punctuation">;</span>    file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> ios<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"读取文本文件的内容为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"学号"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"绩点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        file<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> line <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//通过dat文件在屏幕上显示学生信息</span><span class="token keyword">void</span> <span class="token function">datshow</span><span class="token punctuation">(</span>string filename<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ifstream <span class="token function">file</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> ios<span class="token operator">::</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"读取文本文件的内容为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"学号"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"绩点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"over!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        file<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span>             <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//将txt文件中的数据加载到pas中</span><span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入文件中学生的的总数N: "</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    ifstream <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        file <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    file<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//输出所有学生信息</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span>Student<span class="token operator">*</span> pas<span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"学号"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"绩点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span>            <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按照学号排序</span><span class="token keyword">void</span> <span class="token function">IDsort</span><span class="token punctuation">(</span><span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//默认排序顺序为从小到大，如果需要重大到小需要输入参数false</span><span class="token punctuation">{</span>    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">></span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在屏幕上输出</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"按学号从小到大的排序结果为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">output</span><span class="token punctuation">(</span>pas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将信息输入到IDsort.txt文件中</span>    <span class="token function">intxt</span><span class="token punctuation">(</span><span class="token string">"IDsort.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按照年龄排序</span><span class="token keyword">bool</span> <span class="token function">cmpAGE_1</span><span class="token punctuation">(</span>Student<span class="token operator">&amp;</span> obj1<span class="token punctuation">,</span> Student<span class="token operator">&amp;</span> obj2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>age <span class="token operator">></span> obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmpAGE_2</span><span class="token punctuation">(</span>Student<span class="token operator">&amp;</span> obj1<span class="token punctuation">,</span> Student<span class="token operator">&amp;</span> obj2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>age <span class="token operator">&lt;</span> obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">using</span> PFCMP2 <span class="token operator">=</span> <span class="token keyword">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Student<span class="token operator">&amp;</span><span class="token punctuation">,</span> Student<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认从小到大排序，若需要从大到小只需要将参数修改为cmpAGE_2</span><span class="token keyword">void</span> <span class="token function">Agesort</span><span class="token punctuation">(</span>PFCMP2 pf<span class="token operator">=</span> cmpAGE_1<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> N <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pf</span><span class="token punctuation">(</span>pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pas<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pas<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                pas<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在屏幕上输出</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"按年龄从小到大的排序结果为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">output</span><span class="token punctuation">(</span>pas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将信息输入到IDsort.txt文件中</span>    <span class="token function">intxt</span><span class="token punctuation">(</span><span class="token string">"AGEsort.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按照绩点排序</span><span class="token comment" spellcheck="true">//默认从小到大排序，若需要从大到小只需要将参数修改为false</span><span class="token keyword">void</span> <span class="token function">GPAsort</span><span class="token punctuation">(</span><span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Student temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">></span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    temp <span class="token operator">=</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在屏幕上输出</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"按绩点从小到大的排序结果为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">output</span><span class="token punctuation">(</span>pas<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将信息输入到IDsort.txt文件中</span>    <span class="token function">intxt</span><span class="token punctuation">(</span><span class="token string">"GPAsort.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按照姓名查找学生</span><span class="token keyword">void</span> <span class="token function">searchNAME</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string youNAME<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入姓名："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> youNAME<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>youNAME <span class="token operator">==</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这位同学的信息为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"学号"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"绩点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span>                <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"系统中没有这个学生的信息。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按照学号查找学生</span><span class="token keyword">void</span> <span class="token function">searchID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> youID<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学号："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> youID<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>youID <span class="token operator">==</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这位同学的信息为："</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"学号"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"绩点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span>                <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"系统中没有这个学生的信息。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按照年龄查找学生</span><span class="token keyword">void</span> <span class="token function">searchAGE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> youAge<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入年龄："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> youAge<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>youAge <span class="token operator">==</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这位同学的信息为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"学号"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"绩点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span>                <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"系统中没有这个学生的信息。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//按照绩点查找学生</span><span class="token keyword">void</span> <span class="token function">searchGPA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> youGPA<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入绩点："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> youGPA<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>youGPA <span class="token operator">==</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">)</span>         <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这位同学的信息为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"姓名"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"学号"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"年龄"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"绩点"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span>                <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"系统中没有这个学生的信息。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !STUDENT_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"sadfx.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Student.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//input();     //获取用户输入并存储到文件中</span>    <span class="token function">txtshow</span><span class="token punctuation">(</span><span class="token string">"student.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//在屏幕上打印出txt文本信息</span>    <span class="token comment" spellcheck="true">//datshow("student.dat");            //在屏幕上打印出dat文本信息</span>    <span class="token function">IDsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按照学号排序并存入txt文本</span>    <span class="token comment" spellcheck="true">//Agesort();    //按照年龄排序并存入txt文本</span>    <span class="token comment" spellcheck="true">//GPAsort();    //按照绩点排序并存入txt文本</span>    <span class="token function">searchNAME</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//按照学号在txt文本查找用户</span>    <span class="token comment" spellcheck="true">//searchID();        //按照学号在txt文本查找用户        </span>    <span class="token comment" spellcheck="true">//searchAGE();    //按照年龄在txt文本查找用户</span>    <span class="token comment" spellcheck="true">//searchGPA();    //按照绩点在txt文本查找用户</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练6</title>
      <link href="2020/08/18/c-bian-cheng-xun-lian-6/"/>
      <url>2020/08/18/c-bian-cheng-xun-lian-6/</url>
      
        <content type="html"><![CDATA[<p>图形管理系统，根据图形类派生出多种图形，计算每种图形的周长和面积。</p><p>![2UR4(P<code>XS1YTL9YT$A50%{J](F:\study\转专业\C++暑期补课\作业\shape\2UR4(P</code>XS1YTL9YT$A50%{J.png)</p><p>头文件stdfax.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDFAX__H__INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> STDFAX__H__INCLUDED</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !STDFAX__H__INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件figure.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> FIGURE__H__INCLUDE</span><span class="token macro property">#<span class="token directive keyword">define</span> FIGURE__H__INCLUDE</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">define</span> pai 3.14159</span><span class="token comment" spellcheck="true">//平面图形类</span><span class="token keyword">class</span> <span class="token class-name">shape</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//分别定义周长和面积的虚函数</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">virtual</span> <span class="token keyword">double</span> <span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//矩形类</span><span class="token keyword">class</span> <span class="token class-name">rectangle</span> <span class="token operator">:</span><span class="token keyword">public</span> shape<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> length<span class="token punctuation">,</span> width<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取矩形的长度与宽度</span>    <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请分别输入矩形的长度和宽度："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> length <span class="token operator">>></span> width<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求矩形的周长</span>    <span class="token keyword">double</span> <span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Zc<span class="token punctuation">;</span>        Zc <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>length <span class="token operator">+</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Zc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求矩形的面积</span>    <span class="token keyword">double</span> <span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Area<span class="token punctuation">;</span>        Area <span class="token operator">=</span> length <span class="token operator">*</span> width<span class="token punctuation">;</span>        <span class="token keyword">return</span> Area<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//圆形类</span><span class="token keyword">class</span> <span class="token class-name">circle</span> <span class="token operator">:</span><span class="token keyword">public</span> shape<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> r<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取圆的半径</span>    <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入圆的半径："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求圆的周长</span>    <span class="token keyword">double</span> <span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Zc<span class="token punctuation">;</span>        Zc<span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> pai <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> Zc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求圆的面积</span>    <span class="token keyword">double</span> <span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Area<span class="token punctuation">;</span>        Area <span class="token operator">=</span> pai <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">;</span>        <span class="token keyword">return</span> Area<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//椭圆类</span><span class="token keyword">class</span> <span class="token class-name">oval</span> <span class="token operator">:</span><span class="token keyword">public</span> shape<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取椭圆的长半轴与短半轴</span>    <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请分别输入椭圆的长半轴长与短半轴长："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求椭圆的周长</span>    <span class="token keyword">double</span> <span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Zc<span class="token punctuation">;</span>        Zc <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> pai <span class="token operator">*</span> b <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Zc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求椭圆的面积</span>    <span class="token keyword">double</span> <span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Area<span class="token punctuation">;</span>        Area <span class="token operator">=</span> pai <span class="token operator">*</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>        <span class="token keyword">return</span> Area<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//三角形类</span><span class="token keyword">class</span> <span class="token class-name">triangle</span> <span class="token operator">:</span><span class="token keyword">public</span> shape<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请分别输入三角形三条边的长： "</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求三角形的周长</span>    <span class="token keyword">double</span> <span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Zc<span class="token punctuation">;</span>        Zc <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token keyword">return</span> Zc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求三角形的面积</span>    <span class="token keyword">double</span> <span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Area<span class="token punctuation">,</span> p<span class="token punctuation">;</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        Area <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>p <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Area<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正五边形类</span><span class="token keyword">class</span> <span class="token class-name">pentagon</span> <span class="token operator">:</span><span class="token keyword">public</span> shape<span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">double</span> a<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入正五边形的边长： "</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求正五边形的周长</span>    <span class="token keyword">double</span> <span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Zc<span class="token punctuation">;</span>        Zc <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> a<span class="token punctuation">;</span>        <span class="token keyword">return</span> Zc<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//求正五边形的面积</span>    <span class="token keyword">double</span> <span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">double</span> Area<span class="token punctuation">;</span>        Area <span class="token operator">=</span> <span class="token number">1.72048</span> <span class="token operator">*</span> a <span class="token operator">*</span> a<span class="token punctuation">;</span>        <span class="token keyword">return</span> Area<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>string<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">new</span> string<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span><span class="token operator">*</span> ptrZc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span><span class="token operator">*</span> ptrArea <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建任意多个对象</span><span class="token keyword">void</span> <span class="token function">inputData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入图形的个数："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入这一个图形的名称(在rectangl，circle"</span><span class="token operator">&lt;&lt;</span>            <span class="token string">"，oval，triangle和pentagon中选择）: "</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//算出每个对象的周长和面积以及所有图形的面积（周长）的和</span><span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> sumSz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sumArea<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"rectangle"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            rectangle obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumSz <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrZc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrArea<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"circle"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            circle obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumSz <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrZc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrArea<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"oval"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            oval obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumSz <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrZc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrArea<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"triangle"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            triangle obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumSz <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrZc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrArea<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"pentagon"</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pentagon obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumSz <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrZc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ptrArea<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积为"</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这"</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长之和为："</span> <span class="token operator">&lt;&lt;</span> sumSz <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这"</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积之和为："</span> <span class="token operator">&lt;&lt;</span> sumArea <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//指出第n个图形算出周长和面积</span><span class="token keyword">void</span> <span class="token function">oneResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请问你想要第几个图形的周长和面积："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长为"</span> <span class="token operator">&lt;&lt;</span> ptrZc<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积为"</span> <span class="token operator">&lt;&lt;</span> ptrArea<span class="token punctuation">[</span>n<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//每当用户输入不同的图形时就执行不同的处理</span><span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入图形的总个数N："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> name<span class="token punctuation">;</span>        <span class="token keyword">double</span> sumZc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sumArea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1（矩形）,2（圆形），3（椭圆）,4（三角）, 5（正五边形）"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的名称："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> name<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            pentagon obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"周长="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"    面积="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumZc <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            triangle obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"周长="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"    面积="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumZc <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            oval obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"周长="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"    面积="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumZc <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            circle obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"周长="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"    面积="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumZc <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            rectangle obj<span class="token punctuation">;</span>            obj<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"周长="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"    面积="</span> <span class="token operator">&lt;&lt;</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumZc <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calZc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sumArea <span class="token operator">+</span><span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">calArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的周长之和为"</span> <span class="token operator">&lt;&lt;</span> sumZc <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"个图形的面积之和为"</span> <span class="token operator">&lt;&lt;</span> sumArea <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// !FIGURE__H__INCLUDE</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdfax.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"figure.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取用户输入</span>    <span class="token function">inputData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//N个对象的总面积和总周长</span>    <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指定图形的面积和周长</span>    <span class="token function">oneResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练5</title>
      <link href="2020/08/17/c-bian-cheng-xun-lian-5/"/>
      <url>2020/08/17/c-bian-cheng-xun-lian-5/</url>
      
        <content type="html"><![CDATA[<p>编写一个动态数组类， 要求如下： 1) 编写构造函数、拷贝构造函数、析构函数； 2) 获取任意一个位置的元素； 3) 能够实现数组动态扩容； 4) 删除任意指定位置的元素。</p><p>头文件stdafx.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> STDAFX__H__INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> STDAFX__H__INCLUDED</span><span class="token macro property">#<span class="token directive keyword">pragma</span> once</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Array.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// STDAFX__H__INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件Array.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> ARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> ARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Array</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//函数成员</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//动态数组中的元素个数</span>    <span class="token keyword">int</span> Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指向动态数组的指针</span>    T<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _ncapacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//无参数构造函数</span>    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参数构造函数，参数为元素个数与元素数值</span>    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> T nvalue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Size <span class="token operator">=</span> m <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> m <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        ptr <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> Size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nvalue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//拷贝构造函数</span>    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">const</span> Array<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ptr <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>obj<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Size <span class="token operator">=</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数，释放空间</span>    <span class="token operator">~</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr<span class="token punctuation">;</span>            ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//=运算符的重载</span>    Array<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Array<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>ptr <span class="token operator">==</span> obj<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr<span class="token punctuation">;</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            T<span class="token operator">*</span> ptemp <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>obj<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ptemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ptr <span class="token operator">=</span> ptemp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Size <span class="token operator">=</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对[]运算符的重载</span>    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> npos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ptr<span class="token punctuation">[</span>npos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//获取数组元素的个数</span>    <span class="token keyword">int</span> <span class="token function">getLenth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Size<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取任意一个位置的元素</span>    T<span class="token operator">&amp;</span> <span class="token function">At</span><span class="token punctuation">(</span><span class="token keyword">int</span> npos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>npos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> npos <span class="token operator">></span> Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span>  <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ptr<span class="token punctuation">[</span>npos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在数组的最后位置增加元素</span>    <span class="token keyword">bool</span> <span class="token function">pushback</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> nvalue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Size <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果原来一个元素都没有，指针为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nvalue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token operator">*</span> ptemp <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptemp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ptemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ptemp<span class="token punctuation">[</span>Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nvalue<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//释放原有空间</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ptr <span class="token operator">=</span> ptemp<span class="token punctuation">;</span>            ptemp <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除数组中的指定位置元素</span>    <span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> npos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Size <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> npos<span class="token number">-1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> Size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// MYARRAY_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//测试</span>    <span class="token comment" spellcheck="true">//定义一个数组，并赋值</span>    Array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//先打印出初始数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"初始数组为： "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数组中元素的个数</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"元素的个数为"</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">getLenth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取任意位置的元素</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第1个元素为"</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">At</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除数组中的某个元素</span>    a<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印删除某个元素后的数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除第1个元素后的数组为:"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">getLenth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练4</title>
      <link href="2020/08/04/c-bian-cheng-xun-lian-4/"/>
      <url>2020/08/04/c-bian-cheng-xun-lian-4/</url>
      
        <content type="html"><![CDATA[<p>观察复数对象 a+bi，抽提出这类对象共有的属性和方法，封装为一个类。 </p><p>要求如下： 1) 编写构造函数，拷贝构造函数 </p><p>2) 实现复数的相加、相减操作</p><p>头文件stdafx.h</p><pre class="line-numbers language-c++"><code class="language-c++">#ifndef STDAFX__H__INCLUDED#define STDAFX__H__INCLUDED#pragma once#include <iostream>#include "Array.h"using namespace std;#endif // STDAFX__H__INCLUDED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>头文件Array.h</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">ifndef</span> ARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">define</span> ARRAY_H_INCLUDED</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Array</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//函数成员</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//动态数组中的元素个数</span>    <span class="token keyword">int</span> Size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//指向动态数组的指针</span>    T<span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _ncapacity <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//无参数构造函数</span>    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有参数构造函数，参数为元素个数与元素数值</span>    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> T nvalue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Size <span class="token operator">=</span> m <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> m <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        ptr <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> Size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nvalue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//拷贝构造函数</span>    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">const</span> Array<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ptr <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>obj<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Size <span class="token operator">=</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//析构函数，释放空间</span>    <span class="token operator">~</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr<span class="token punctuation">;</span>            ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//=运算符的重载</span>    Array<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Array<span class="token operator">&amp;</span> obj<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-</span><span class="token operator">></span>ptr <span class="token operator">==</span> obj<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr<span class="token punctuation">;</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            T<span class="token operator">*</span> ptemp <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>obj<span class="token punctuation">.</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ptemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">.</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ptr <span class="token operator">=</span> ptemp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Size <span class="token operator">=</span> obj<span class="token punctuation">.</span>Size<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//对[]运算符的重载</span>    T<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> npos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ptr<span class="token punctuation">[</span>npos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//获取数组元素的个数</span>    <span class="token keyword">int</span> <span class="token function">getLenth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> Size<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取任意一个位置的元素</span>    T<span class="token operator">&amp;</span> <span class="token function">At</span><span class="token punctuation">(</span><span class="token keyword">int</span> npos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>npos <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> npos <span class="token operator">></span> Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">throw</span>  <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ptr<span class="token punctuation">[</span>npos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//在数组的最后位置增加元素</span>    <span class="token keyword">bool</span> <span class="token function">pushback</span><span class="token punctuation">(</span>T<span class="token operator">&amp;</span> nvalue<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Size <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果原来一个元素都没有，指针为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            ptr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nvalue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span><span class="token operator">*</span> ptemp <span class="token operator">=</span> <span class="token keyword">new</span> T<span class="token punctuation">[</span>Size<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptemp <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ptemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ptemp<span class="token punctuation">[</span>Size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nvalue<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//释放原有空间</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ptr<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ptr<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ptr <span class="token operator">=</span> ptemp<span class="token punctuation">;</span>            ptemp <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//删除数组中的指定位置元素</span>    <span class="token keyword">void</span> <span class="token function">Delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> npos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Size <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> npos<span class="token number">-1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> Size<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> ptr<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span> </span><span class="token comment" spellcheck="true">// MYARRAY_H_INCLUDED</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件main.cpp</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdafx.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//测试</span>    <span class="token comment" spellcheck="true">//定义一个数组，并赋值</span>    Array<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//先打印出初始数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"初始数组为： "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取数组中元素的个数</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"元素的个数为"</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">getLenth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取任意位置的元素</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第1个元素为"</span> <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span><span class="token function">At</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除数组中的某个元素</span>    a<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//打印删除某个元素后的数组</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除第1个元素后的数组为:"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span><span class="token function">getLenth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"\t"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练3</title>
      <link href="2020/08/03/c-bian-cheng-xun-lian-3/"/>
      <url>2020/08/03/c-bian-cheng-xun-lian-3/</url>
      
        <content type="html"><![CDATA[<p>1.定义个字符型数组 char 数组，将顺序反置，acvkd -&gt;dkvca;</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> <span class="token punctuation">(</span><span class="token operator">*</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入一串字母:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> fp<span class="token punctuation">;</span>    <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> fp<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        fp<span class="token punctuation">[</span>len <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> fp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        fp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> fp<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.定义一个 int 类型的二维数组， 问 ：计算上三角阵的和；</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//随意创建一个二位数组</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//i,j用于控制循环,sum为上三角阵的和</span>    <span class="token comment" spellcheck="true">//如果为任意数组a[m][n]，则第一个for的5修改为m,第二个for的j=4修改为j=n-1</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">+</span><span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"上三角阵的和为："</span> <span class="token operator">&lt;&lt;</span> sum <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.有 50 个人，围坐成一圈，然后开始报数，从 0 开始报数，报数是从 0-7，报到 7 的人，退 出这个圈子，然后下一人开始从 0 报，问报数 15 轮后，哪些人会留下来，原来他所在的位 置。把留下来的人输出原本他所在的位置.</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> people<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> people<span class="token punctuation">,</span> count<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//为每个人编号</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">*</span>p <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">++</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将退出的人逐个淘汰</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//每数一轮报数清零</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//如果超出上限，清零</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">50</span><span class="token punctuation">)</span>                j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//自动跳过被重置的人，没被重置的继续数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//每一轮都有人被淘汰，j+1确保退出的人+未退出的人总数为50</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//退出的人清零</span>        people<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">"个退出的是"</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出剩下的人的位置</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"剩下的人的位置分别为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>people<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> people<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练2</title>
      <link href="2020/08/02/c-bian-cheng-xun-lian-2/"/>
      <url>2020/08/02/c-bian-cheng-xun-lian-2/</url>
      
        <content type="html"><![CDATA[<p>1.有 3 个强盗，抢了一个珠宝箱，打开一看，里面很多颗珠宝，分轮次来，老大拿 3 个，老 二拿 2 个，老三拿一个，构成一个轮次，接着开始下一轮，直到拿完宝箱中的珠宝。目前已 知老三拿了 25 颗珠宝，请问 1）宝箱里面原来有多少颗珠宝；2）老大和老二拿了多少颗。 输出所有可能的结果。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*此代码只能用于解决这一个问题的几种情况，若老三的珠宝数是一个未知数，则需要另外编写程序，使用穷举法解决问题，每个人按照顺序依次增加，打印出相应的结果*/</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//老三有25颗，那么起码分了25轮</span>    <span class="token comment" spellcheck="true">//最少的情况是老大75，老二50，老三25</span>    <span class="token comment" spellcheck="true">//数组中第一个存老大，第二个存老二，第三个存老三</span>    <span class="token keyword">int</span> ngems<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">75</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">25</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//n用于存储情况的数量,total为总数</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每个循环存储一种情况</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先老大逐个增加，最多增加3个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ngems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">78</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ngems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">75</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>                total <span class="token operator">=</span> ngems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ngems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> ngems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"种情况为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"宝箱里面原来有"</span> <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> <span class="token string">"颗珠宝"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老大的数量为"</span> <span class="token operator">&lt;&lt;</span> ngems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老二的数量为"</span> <span class="token operator">&lt;&lt;</span> ngems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老三的数量为"</span> <span class="token operator">&lt;&lt;</span> ngems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"。\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ngems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>                total <span class="token operator">=</span> ngems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ngems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> ngems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                n <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">"种情况为："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"宝箱里面原来有"</span> <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> <span class="token string">"颗珠宝"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老大的数量为"</span> <span class="token operator">&lt;&lt;</span> ngems<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老二的数量为"</span> <span class="token operator">&lt;&lt;</span> ngems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>                cout <span class="token operator">&lt;&lt;</span> <span class="token string">"老三的数量为"</span> <span class="token operator">&lt;&lt;</span> ngems<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"。\n"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ngems<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">52</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.定义一个学生结构体，成员包括学生姓名、学号、性别、上学期学分绩点；用一个数组去 保存学生信息，共计N个， 问 1：然后进行排序，1）按照学号排序；2）按照绩点排序。排序方法 3 种，交换、选择、 冒泡都要用。 问 2：查找数组中是否有指定学号的学生，如果有，显示出该学生的基本信息，查找方法， 采用顺序查找和折半查找。 问 3：这些学生的平均绩点是多少。哪些人低于平均绩点，要显示出来。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用结构体存储每位学生的信息</span>    <span class="token keyword">struct</span> Student <span class="token punctuation">{</span>        string name<span class="token punctuation">;</span>        <span class="token keyword">double</span> ID<span class="token punctuation">;</span>        string sex<span class="token punctuation">;</span>        <span class="token keyword">float</span> GPA<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//N为学生数量，i和j用于控制循环</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学生的总数N:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    Student<span class="token operator">*</span> pas <span class="token operator">=</span> <span class="token keyword">new</span> Student<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请依次输入一个学生的姓名，学号，性别以及上学期的绩点:"</span><span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">>></span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//问1（1）按照学号排序</span>    <span class="token comment" spellcheck="true">//交换排序法</span>    Student temp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">;</span>j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">></span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>                temp <span class="token operator">=</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"按学号从小到大的排序结果为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout<span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>             <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//问1（2）按照绩点排序</span>    <span class="token comment" spellcheck="true">//选择排序法</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> min_GPA <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> N<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;</span> pas<span class="token punctuation">[</span>min_GPA<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min_GPA <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> min_GPA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            temp <span class="token operator">=</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> pas<span class="token punctuation">[</span>min_GPA<span class="token punctuation">]</span><span class="token punctuation">;</span>            pas<span class="token punctuation">[</span>min_GPA<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"按上学期绩点从小到大的排序结果为:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>            <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//问1（2）按照绩点排序</span>    <span class="token comment" spellcheck="true">//冒泡排序法</span>    <span class="token comment" spellcheck="true">/*for (i = 0;i &lt; N - 1;i++) {        for (j = 0;j &lt; N - i - 1;++j) {            if (pas[j].GPA > pas[j + 1].GPA)                temp = pas[j];                pas[j] = pas[j + 1];                pas[j + 1] = temp;        }    }    cout &lt;&lt; "按上学期绩点从小到大的排序结果为:" &lt;&lt; endl;    for (i = 0;i &lt; N;++i) {        cout &lt;&lt; pas[i].name &lt;&lt; " " &lt;&lt; pas[i].ID &lt;&lt; " "            &lt;&lt; pas[i].sex &lt;&lt; " " &lt;&lt; pas[i].GPA &lt;&lt; endl;    }*/</span>    <span class="token comment" spellcheck="true">//问2</span>    <span class="token keyword">double</span> youID<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入学号："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> youID<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//顺序法</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>youID <span class="token operator">==</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这位同学的信息为："</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ID <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>                <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sex <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"系统中没有这个学生的信息。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//二分法查找</span>    <span class="token comment" spellcheck="true">/*int begin = 0, end = N, mid;    while (begin &lt;= end) {        mid = (begin + end) / 2;        if (youID == pas[mid].ID) {            cout &lt;&lt; pas[mid].name &lt;&lt; " " &lt;&lt; pas[mid].ID &lt;&lt; " "                &lt;&lt; pas[mid].sex &lt;&lt; " " &lt;&lt; pas[mid].GPA &lt;&lt; endl;            flag = false;            break;        }        else if (youID > pas[mid].ID) {            begin = mid;        }        else {            end = mid;        }    }    if (flag) {        cout &lt;&lt; "系统中没有这个学生的信息。" &lt;&lt; endl;    }*/</span>    <span class="token comment" spellcheck="true">//问3</span>    <span class="token keyword">float</span> ave_GPA <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">,</span> sum_GPA <span class="token operator">=</span> <span class="token number">0.0f</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum_GPA <span class="token operator">+</span><span class="token operator">=</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ave_GPA <span class="token operator">=</span> sum_GPA <span class="token operator">/</span> N<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这些学生的平均学分绩点为："</span> <span class="token operator">&lt;&lt;</span> ave_GPA <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>GPA <span class="token operator">&lt;</span> ave_GPA<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> pas<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">"的学分绩点低于平均学分绩点."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pas<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pas<span class="token punctuation">;</span>        pas <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++编程训练1</title>
      <link href="2020/08/01/c-bian-cheng-xun-lian-1/"/>
      <url>2020/08/01/c-bian-cheng-xun-lian-1/</url>
      
        <content type="html"><![CDATA[<p>1.输入任意 3 个数，然后按照从小到大的顺序进行输出。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//a,b,c用于存储用户输入的数据，temp用于交换两个数的位置的临时变量</span>    <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please enter three number:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b <span class="token operator">>></span> c<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取用户输入的数字</span>    <span class="token comment" spellcheck="true">//利用中间变量调整数字的位置，使a&lt;b&lt;c</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> a<span class="token punctuation">;</span>        a <span class="token operator">=</span> c<span class="token punctuation">;</span>        c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> b<span class="token punctuation">;</span>        b <span class="token operator">=</span> c<span class="token punctuation">;</span>        c <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//按从小到大的顺序输出结果</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.假设有一个函数，是一个线性分段的函数</p><p>​            X^2（X&gt;0)</p><p>Y =      0       (X=0)</p><p>​            KX+b(X&lt;0)</p><p>如果说给定任意一个X，计算出 Y 出来。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">double</span> X <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> K <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> B <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入X&lt;0时的斜率K与截距B："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取用户输入的斜率和截距</span>    cin <span class="token operator">>></span> K <span class="token operator">>></span> B<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入X的值："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取自变量X</span>    cin <span class="token operator">>></span> X<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据X与0的关系计算出对应的Y值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Y <span class="token operator">=</span> X <span class="token operator">*</span> X<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            Y <span class="token operator">=</span> K <span class="token operator">*</span> X <span class="token operator">+</span> B<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出Y值</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Y="</span> <span class="token operator">&lt;&lt;</span> Y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.快递公司送包裹的费用计算，包裹的重量，包裹送的里程数，在一个 </p><p>0-500KM 1.0 元/公里 </p><p>500-1200KM 1.4 元/公里 </p><p>1200-2000KM 2.1 元/公里 </p><p>2000KM以上 3.2 元/公里</p><p> 起步价（10 元）+ 包裹重量 <em> 单价 </em> 公里数 = 寄件费用</p><p> 输入包裹重量和要寄送目的地的公里数，计算出价格出来。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">double</span> weight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mile <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入包裹的重量和要寄送目的地的公里数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> weight <span class="token operator">>></span> mile<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据公里数判断单价属于哪一个层次再进行计算</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mile <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">3.2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mile <span class="token operator">>=</span> <span class="token number">1200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">2.1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mile <span class="token operator">>=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">1.4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        price <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    total <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> weight <span class="token operator">*</span> price <span class="token operator">*</span> mile<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出寄件费用</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"寄件费用为："</span> <span class="token operator">&lt;&lt;</span> total <span class="token operator">&lt;&lt;</span> <span class="token string">"元。"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.一个弹性的小球，从一定高度落下，假设高度为 h，然后到达地面后弹起，弹起的高度是原来 高度的 f*h；（0.2&lt;f&lt;0.8）,当小球在地上不再弹起时，计算小球在空中经过的高度。（输入 h，f）</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token keyword">double</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> f <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请分别输入高度和弹跳系数f(0.2&lt;f&lt;0.8):"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> h <span class="token operator">>></span> f<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算小球在空中弹跳的总高度，高度为0时小球停下</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>h<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        total <span class="token operator">+</span><span class="token operator">=</span> h<span class="token punctuation">;</span>        h <span class="token operator">*</span><span class="token operator">=</span> f<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"小球在空中经过的高度为："</span> <span class="token operator">&lt;&lt;</span> total<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.假设有这个一个数列</p><p> 2/1，3/2，5/3，8/5…… </p><p>要求计算这个数列的前 N项之和，要求输入 N，得到结果。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//lfnum为当前数，lfsum为前n项和</span>    <span class="token comment" spellcheck="true">//m和n分别为分子分母，temp为临时变量</span>    <span class="token keyword">double</span> lfnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lfsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入N的值："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>N <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">--</span>N<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//先将当前项加到lfnum中</span>        lfnum <span class="token operator">=</span> m <span class="token operator">/</span> n<span class="token punctuation">;</span>        lfsum <span class="token operator">+</span><span class="token operator">=</span> lfnum<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调整位置，使m为下一个数的分子，n为下一个数的分母</span>        temp <span class="token operator">=</span> n<span class="token punctuation">;</span>        n <span class="token operator">=</span> m<span class="token punctuation">;</span>        m <span class="token operator">=</span> m <span class="token operator">+</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"这个数列的前"</span> <span class="token operator">&lt;&lt;</span> N <span class="token operator">&lt;&lt;</span> <span class="token string">"项和为："</span> <span class="token operator">&lt;&lt;</span> lfsum<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.公式 S = 1+1/（1+2）+1/（1+2+3）+…+1/（1+2+3+…n）输入 n 的值，计算 S 的值。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//a为分母</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//S为前n项和,lfnum为当前数</span>    <span class="token keyword">double</span> S <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> lfnum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入n的值："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//得到每一项的值后将这一项加入到S中</span>        lfnum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>        S <span class="token operator">+</span><span class="token operator">=</span> lfnum<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//相加后算出下一项的分母</span>        a <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出S</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"S="</span><span class="token operator">&lt;&lt;</span>S<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.任意给定两个正整数，计算他们的最大公约数和最小公倍数。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//na与nb为用户输入的两个整数</span>    <span class="token comment" spellcheck="true">//m为最大公约数，n为最小公倍数,temp为临时变量</span>    <span class="token keyword">int</span> na <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入2个正整数："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> na <span class="token operator">>></span> nb<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求最大公约数</span>    <span class="token comment" spellcheck="true">// 让temp为na与nb中较小的那一个</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>na <span class="token operator">></span> nb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> nb<span class="token punctuation">;</span>        n <span class="token operator">=</span> na<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> na<span class="token punctuation">;</span>        n <span class="token operator">=</span> nb<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//利用穷举法从大到小依次试验，直到找到最大公约数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>na <span class="token operator">%</span> temp<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nb <span class="token operator">%</span> temp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token operator">--</span>temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    m <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//求最小公倍数</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> na <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> nb <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token operator">++</span>n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"最大公约数为"</span> <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> <span class="token string">"\n最小公倍数为"</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.根据下图，输入 x1，x2 计算曲线和 x 轴包围的面积，x 用弧度制</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//y为函数值，temp为临时变量，area为面积</span>    <span class="token comment" spellcheck="true">//把区域分成足够多的小矩形，总面积近似看作为每个矩形面积的和</span>    <span class="token comment" spellcheck="true">//步长distance越小，结果越精确</span>    <span class="token keyword">double</span> x1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> x2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>        area<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> distance <span class="token operator">=</span> <span class="token number">0.0000001</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请分别输入x1与x2的值："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> x1 <span class="token operator">>></span> x2<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使x1>x2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        temp <span class="token operator">=</span> x1<span class="token punctuation">;</span>        x1 <span class="token operator">=</span> x2<span class="token punctuation">;</span>        x2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算曲线与x轴围成的面积</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x1 <span class="token operator">&lt;=</span> x2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        y <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据y与0的大小关系确定计算方法</span>        <span class="token comment" spellcheck="true">//也可以用fobs（）直接获取y的绝对值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            area <span class="token operator">+</span><span class="token operator">=</span> distance <span class="token operator">*</span> y<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            area <span class="token operator">+</span><span class="token operator">=</span> distance <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        x1 <span class="token operator">+</span><span class="token operator">=</span> distance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//输出面积</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"曲线与x轴所包围的面积为"</span> <span class="token operator">&lt;&lt;</span> area<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.编写程序，计算出 1000 以内的素数，然后输出到屏幕上。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从2开始用枚举法逐个检验</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> i <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.从键盘输入任意个英文字符，分别取出每个字符出来，然后将其进行加密，加密的规则：如果 是 A-&gt;C,Y-&gt;A,Z-&gt;B。</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>    string password<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入由任意个字符组成的字符串:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过网络获知可以用这个方法逐个读取每个字符</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> ch <span class="token operator">:</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果是Y,Z,y,z这4个字符之一单独处理</span>        <span class="token comment" spellcheck="true">//其他的+2即可，为对应的ASCII码表的下2个</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch <span class="token operator">=</span> <span class="token string">'A'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'Z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch <span class="token operator">=</span> <span class="token string">'B'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'z'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ch <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            ch <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> ch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++编程训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 上机实习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python第三次上机实习</title>
      <link href="2020/07/12/python-di-san-ci-shang-ji-shi-xi/"/>
      <url>2020/07/12/python-di-san-ci-shang-ji-shi-xi/</url>
      
        <content type="html"><![CDATA[<p>1、 已知“score”文件夹下 score.txt 中保存有 10 个评委对 3 个候选人的打分情况，示例如 下 Judge1,75,85,81 Judge2,84,87,76 ……<br>从左到右各个字段的含义分别为：评委号，1 号候选人得分，2 号候选人得分，3 号候选 人得分，各字段之间用逗号分隔。 要求设计 Python 程序，（1）读取该 txt 文件，将每个候选人的得分去掉一个最高分和一 个最低分，（2）计算剩余得分的平均数作为该候选人最终成绩，（3）找出最终成绩最高 的候选人的编号及最终成绩，分别输出到 socre 文件夹下 score.xlsx 文件的 score 工作簿 中A1 和 B1 单元格，如下图所示。<img src="C:%5CUsers%5C12399%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200624182711260.png" alt="image-20200624182711260"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> openpyxl<span class="token keyword">from</span> openpyxl <span class="token keyword">import</span> Workbook<span class="token comment" spellcheck="true"># 创建三个空列表来存储每个候选人的分数s</span>player1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>player2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>player3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>play <span class="token operator">=</span> <span class="token punctuation">[</span>player1<span class="token punctuation">,</span> player2<span class="token punctuation">,</span> player3<span class="token punctuation">]</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 创建一个字典存储每个人的最终得分</span>result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"score.txt"</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 先打开文本将所有的分数存入每个人的列表</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        scores <span class="token operator">=</span> fp<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>        player1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        player2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        player3<span class="token punctuation">.</span>append<span class="token punctuation">(</span>int<span class="token punctuation">(</span>scores<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 去掉每个人的最高分并计算平均分</span><span class="token keyword">for</span> i <span class="token keyword">in</span> play<span class="token punctuation">:</span>    maxScore <span class="token operator">=</span> max<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>maxScore<span class="token punctuation">)</span>    minScore <span class="token operator">=</span> min<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>minScore<span class="token punctuation">)</span>    averageScore <span class="token operator">=</span> sum<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 将每个候选人的序号及其对应分数放入字典</span>    player <span class="token operator">=</span> <span class="token string">'player'</span> <span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span>    j <span class="token operator">+=</span> <span class="token number">1</span>    result<span class="token punctuation">[</span>player<span class="token punctuation">]</span> <span class="token operator">=</span> averageScore<span class="token comment" spellcheck="true"># 获取得分最高的候选人及其分数</span>winner <span class="token operator">=</span> max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token operator">=</span>result<span class="token punctuation">.</span>get<span class="token punctuation">)</span>winnerScore <span class="token operator">=</span> result<span class="token punctuation">[</span>max<span class="token punctuation">(</span>result<span class="token punctuation">,</span> key<span class="token operator">=</span>result<span class="token punctuation">.</span>get<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将成绩最高的候选人的编号及其最终成绩输出到score文件夹</span>fn <span class="token operator">=</span> <span class="token string">'score.xlsx'</span>wb <span class="token operator">=</span> Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span>title<span class="token operator">=</span><span class="token string">'score'</span><span class="token punctuation">)</span>ws<span class="token punctuation">[</span><span class="token string">'A1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> winnerws<span class="token punctuation">[</span><span class="token string">'B1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> winnerScorewb<span class="token punctuation">.</span>save<span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、 sensor 文件夹下存在两个 Python 源文件，分别对应两个问题。请按照文件内说明修改 代码，实现以下功能： 下面所示为一套由公司职员随身佩戴的位置传感器采集的数据,文件名称为 “sensor.txt”,其内容示例如下 2016/5/31 0:05, vawelon001,1,1 2016/5/31 0:20, arpa001,1,1 2016/5/31 2:26, arpa001,1,6 … (略) 第一列是传感器获取数据的时间,第二列是传感器的编号,第三列是传感器所在的楼层, 第四列是传感器所在的位置区域编号，各字段之间用逗号分隔。<br>问题 1：在 PY301_1.py 文件中修改代码，读入 sensor.txt 文件中的数据,提取出传感器 编号为 arpa001 的所有数据，将结果输出保存到“arpa001.txt”文件。 输出文件格式要求：原数据文件中的每行记录写入新文件中,行尾无空格,无空行。参考 格式如下：<br>2016/5/31 7:11, arpa001,2,4 2016/5/31 8:02, arpa001,3,4 2016/5/31 9:22, arpa001,3,4 …(略)</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 以下代码为提示框架</span><span class="token comment" spellcheck="true"># 请在...处使用一行或多行代码替换</span><span class="token comment" spellcheck="true"># 请在______处使用一行代码替换</span><span class="token comment" spellcheck="true"># 打开sensor.txt来读取数据</span><span class="token comment" spellcheck="true"># 创建earpa001.txt来写入数据</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'sensor.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> fn<span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'earpa001.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">as</span> fo<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> fn<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 一行的内容写入一个列表，每个元素对应每一列的内容</span>            lst <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">" \n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 验证第二个元素是不是earpa001，若是，则将该行写入文本</span>            <span class="token keyword">if</span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">" earpa001"</span><span class="token punctuation">:</span>                fo<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'{},{},{},{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（选做）问题 2：在 PY301_2.py 文件中修改代码，读入“arpa001.txt”文件中的数据， 统计 arpa001 对应的职员在各楼层和区域出现的次数,保存到“earpa001_count.txt” 文件,每条记录一行,位置信息和出现的次数之间用英文半角逗号隔开，行尾无空格，无 空行。<br>参考格式如下 1-1,5 1-4,3 …(略) 含义如下：第 1 行“1-1,5”中 1-1 表示 1 楼 1 号区域,5 表示出现 5 次；第 2 行“14,3”中 1-4 表示 1 楼 4 号区域，3 表示出现 3 次。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 以下代码为提示框架</span><span class="token comment" spellcheck="true"># 请在...处使用一行或多行代码替换</span><span class="token comment" spellcheck="true"># 请在______处使用一行代码替换</span><span class="token comment" spellcheck="true"># 打开sensor.txt来读取数据</span><span class="token comment" spellcheck="true"># 创建earpa001.txt来写入数据</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'earpa001.txt'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token keyword">as</span> fn<span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'earpa001_count.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">as</span> fo<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建一个空字典用来存储哪个区域出现了几次</span>        d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> fn<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 一行的内容写入一个列表，每个元素对应每一列的内容</span>            ls <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">" \n"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 用site（键）表示几楼几号区域</span>            site<span class="token operator">=</span> ls<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> ls<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 值为出现的次数</span>            d<span class="token punctuation">[</span>site<span class="token punctuation">]</span> <span class="token operator">=</span> d<span class="token punctuation">.</span>get<span class="token punctuation">(</span>site<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        ls <span class="token operator">=</span> list<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        ls<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># ¸ÃÓï¾äÓÃÓÚÅÅÐò</span>        <span class="token comment" spellcheck="true"># 将相关内容写入文件</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fo<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'{},{}\n'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机实习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案8</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-8/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-8/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter9"><a href="#Chapter9" class="headerlink" title="Chapter9"></a>Chapter9</h1><p><strong>9-1 餐馆：</strong>创建一个名为Restaurant的类，其方法__init__()设置两个属性：restaurant_name和cuisine_type。创建一个名为describe_restaurant()的方法和一个名为open_restaurant()的方法，其中前者打印前述两项信息，而后者打印一条消息，指出餐馆正在营业。</p><p>​       根据这个类创建一个名为restaurant的实例，分别打印其两个属性，再调用前述两个方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Restaurant</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与餐馆有关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> restaurant_name<span class="token punctuation">,</span> cuisine_type<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化属性restaurant和cuisine_type"""</span>        self<span class="token punctuation">.</span>restaurant_name <span class="token operator">=</span> restaurant_name        self<span class="token punctuation">.</span>cuisine_type <span class="token operator">=</span> cuisine_type    <span class="token keyword">def</span> <span class="token function">describe_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""有关餐馆的一些基础信息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" The restaurant name is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>restaurant_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The restaurant's cuisine type is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cuisine_type<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""说明餐馆正在营业"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} is opening now."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>restaurant_name<span class="token punctuation">)</span><span class="token punctuation">)</span>restaurant <span class="token operator">=</span> Restaurant<span class="token punctuation">(</span><span class="token string">"Yangxin"</span><span class="token punctuation">,</span> <span class="token string">"Chinese"</span><span class="token punctuation">)</span>restaurant<span class="token punctuation">.</span>describe_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span>restaurant<span class="token punctuation">.</span>open_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-2 用户：</strong>创根据你为完成练习9-1而编写的类创建三个实例，并对每个实例调用方法describe_restaurant()。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Restaurant</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与餐馆有关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> restaurant_name<span class="token punctuation">,</span> cuisine_type<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化属性restaurant和cuisine_type"""</span>        self<span class="token punctuation">.</span>restaurant_name <span class="token operator">=</span> restaurant_name        self<span class="token punctuation">.</span>cuisine_type <span class="token operator">=</span> cuisine_type    <span class="token keyword">def</span> <span class="token function">describe_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""有关餐馆的一些基础信息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe restaurant name is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>restaurant_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The restaurant's cuisine type is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cuisine_type<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""说明餐馆正在营业"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} is opening now."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>restaurant_name<span class="token punctuation">)</span><span class="token punctuation">)</span>restaurant_1 <span class="token operator">=</span> Restaurant<span class="token punctuation">(</span><span class="token string">"Yangxin"</span><span class="token punctuation">,</span> <span class="token string">"Chinese"</span><span class="token punctuation">)</span>restaurant_1<span class="token punctuation">.</span>describe_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span>restaurant_1<span class="token punctuation">.</span>open_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span>restaurant_2 <span class="token operator">=</span> Restaurant<span class="token punctuation">(</span><span class="token string">"King"</span><span class="token punctuation">,</span> <span class="token string">"pizza"</span><span class="token punctuation">)</span>restaurant_2<span class="token punctuation">.</span>describe_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span>restaurant_3 <span class="token operator">=</span> Restaurant<span class="token punctuation">(</span><span class="token string">"Queen"</span><span class="token punctuation">,</span> <span class="token string">"sandwich"</span><span class="token punctuation">)</span>restaurant_3<span class="token punctuation">.</span>describe_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-3 用户：</strong>创建一个名为User的类，其中包含属性first_name和last_name，还有用户简介通常会存储的其他几个属性。在类User中定义一个名为describe_user()的方法，它打印用户信息摘要；再定义一个名为great_user()的方法，它向用户发出个性化的问候。</p><p>​     创建多个表示不同用户的实例，并对每个实例都调用上述两个方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与用户相关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> emile<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化各属性"""</span>        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>emile <span class="token operator">=</span> emile        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location    <span class="token keyword">def</span> <span class="token function">describe_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个描述用户信息的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {}'s username is {},his(her) emile is {},his(her) location is {}."</span>              <span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>last_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>emile<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个打招呼的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,{} {},next to meet you."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span>user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"Chen"</span><span class="token punctuation">,</span> <span class="token string">"Xili"</span><span class="token punctuation">,</span> <span class="token string">"fire wolf"</span><span class="token punctuation">,</span> <span class="token string">"1239968427@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"yangxin"</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>describe_user<span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>greet_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-4 就餐人数：</strong>在为完成练习9-1而编写的程序中，添加一个名为number_served的属性，并将其默认值设置为0。根据这个类创建一个名为restaurant的实例；打印有多少人在这家餐馆就餐过，然后修改这个值并再次打印它。</p><p>​    添加一个名为set_number_served()的方法，他让你能够设置就餐人数。调用这个方法并向它传递一个值，然后再次打印这个值。</p><p>​    添加一个名为increment_number_served()的方法，他让你能够将就餐人数递增。调用这个方法并向它传递一个这样的值：你认为这家店餐馆每天可能接待的就餐人数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Restaurant</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A class representing a restaurant."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> cuisine_type<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the restaurant."""</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cuisine_type <span class="token operator">=</span> cuisine_type        self<span class="token punctuation">.</span>number_served <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">describe_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a summary of the restaurant."""</span>        msg <span class="token operator">=</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" serves wonderful "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>cuisine_type <span class="token operator">+</span> <span class="token string">"."</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a message that the restaurant is open."""</span>        msg <span class="token operator">=</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" is open. Come on in!"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">set_number_served</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number_served<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Allow user to set the number of customers that have been served."""</span>        self<span class="token punctuation">.</span>number_served <span class="token operator">=</span> number_served    <span class="token keyword">def</span> <span class="token function">increment_number_served</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> additional_served<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Allow user to increment the number of customers served."""</span>        self<span class="token punctuation">.</span>number_served <span class="token operator">+=</span> additional_servedrestaurant <span class="token operator">=</span> Restaurant<span class="token punctuation">(</span><span class="token string">'the mean queen'</span><span class="token punctuation">,</span> <span class="token string">'pizza'</span><span class="token punctuation">)</span>restaurant<span class="token punctuation">.</span>describe_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nNumber served: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>restaurant<span class="token punctuation">.</span>number_served<span class="token punctuation">)</span><span class="token punctuation">)</span>restaurant<span class="token punctuation">.</span>number_served <span class="token operator">=</span> <span class="token number">430</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Number served: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>restaurant<span class="token punctuation">.</span>number_served<span class="token punctuation">)</span><span class="token punctuation">)</span>restaurant<span class="token punctuation">.</span>set_number_served<span class="token punctuation">(</span><span class="token number">1257</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Number served: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>restaurant<span class="token punctuation">.</span>number_served<span class="token punctuation">)</span><span class="token punctuation">)</span>restaurant<span class="token punctuation">.</span>increment_number_served<span class="token punctuation">(</span><span class="token number">239</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Number served: "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>restaurant<span class="token punctuation">.</span>number_served<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-5 尝试登录次数：</strong>在为完成练习9-3而编写的User类中，添加一个名为login_attempt的属性。编写一个名为increment_login_attempts()的方法，它将属性login_attempts的值加1.再编写一个名为reset_login_attempts()的方法，它将属性login_attempts的值重置为0。</p><p>​    根据User类创建一个实例。再调用方法increment_login_attempts()多次。打印属性login_attempts的值，确认它被正确地递增；然后，调用方法reset_login_attempts()。并再次打印属性login_attempts的值，确认它被重置为0。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与用户相关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> emile<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化各属性"""</span>        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>emile <span class="token operator">=</span> emile        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location        self<span class="token punctuation">.</span>login_attempts <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">describe_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个描述用户信息的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {}'s username is {},his(her) emile is {},his(her) location is {}."</span>              <span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>last_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>emile<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个打招呼的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,{} {},next to meet you."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">increment_login_attempts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""添加一个名为login——attempts的属性"""</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">reset_login_attempts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""将其重置为0"""</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">=</span> <span class="token number">0</span>user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">'chen'</span><span class="token punctuation">,</span> <span class="token string">"xili"</span><span class="token punctuation">,</span> <span class="token string">'fire_wolf'</span><span class="token punctuation">,</span> <span class="token string">'1239968427@qq.com'</span><span class="token punctuation">,</span> <span class="token string">'yangxin'</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>describe_user<span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>greet_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印调用多次后的值</span>user<span class="token punctuation">.</span>increment_login_attempts<span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>increment_login_attempts<span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>increment_login_attempts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Login attempt : {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>user<span class="token punctuation">.</span>login_attempts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>reset_login_attempts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Login attempt : {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>user<span class="token punctuation">.</span>login_attempts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-6 冰淇淋小店：</strong>冰淇淋小店是一种特殊的餐馆。编写一个名为IceCreamStand的类，让它继承你为练习9-1或练习9-4而编写的Restaurant类。这两个版本的Restaurant类都可以，挑选你更喜欢的那个即可。添加一个名为flavors的属性，用于存储一个由各种口味的冰淇淋组成的列表。编写一个显示这些冰淇淋的方法。创建一个IceCreamStand实例，并调用这个方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Restaurant</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与餐馆有关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> restaurant_name<span class="token punctuation">,</span> cuisine_type<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化属性restaurant和cuisine_type"""</span>        self<span class="token punctuation">.</span>restaurant_name <span class="token operator">=</span> restaurant_name        self<span class="token punctuation">.</span>cuisine_type <span class="token operator">=</span> cuisine_type    <span class="token keyword">def</span> <span class="token function">describe_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""有关餐馆的一些基础信息"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" The restaurant name is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>restaurant_name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The restaurant's cuisine type is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cuisine_type<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""说明餐馆正在营业"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} is opening now."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>restaurant_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">IceCreamStand</span><span class="token punctuation">(</span>Restaurant<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""冰淇淋小店的独特之处"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  name<span class="token punctuation">,</span> cuisine_type<span class="token operator">=</span><span class="token string">'ice_cream'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化冰淇淋小店的属性"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> cuisine_type<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>flavors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">show_flavors</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""展示不同口味的冰淇淋"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nWe have the following flavors available:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> flavor <span class="token keyword">in</span> self<span class="token punctuation">.</span>flavors<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> flavor<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>big_one <span class="token operator">=</span> IceCreamStand<span class="token punctuation">(</span><span class="token string">'The Big One'</span><span class="token punctuation">)</span>big_one<span class="token punctuation">.</span>flavors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'vanilla'</span><span class="token punctuation">,</span> <span class="token string">'chocolate'</span><span class="token punctuation">,</span> <span class="token string">'black cherry'</span><span class="token punctuation">]</span>big_one<span class="token punctuation">.</span>describe_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span>big_one<span class="token punctuation">.</span>show_flavors<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-7 管理员：</strong>管理员是一种特殊的用户。编写一个名为Admin的类，让它继承你为完成练习9-3或练习9-5而编写的User类。添加一个名为privileges的属性，用于存储一个由字符串（如”can add post”、”can delete post”、”can ban user”等）组成的列表。编写一个名为show_privileges()的方法，它显示管理员的权限。创建一个Admin实例，并调用这个方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与用户相关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化各属性"""</span>        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location    <span class="token keyword">def</span> <span class="token function">describe_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个描述用户信息的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {}'s username is {},his(her) emile is {},his(her) location is {}."</span>              <span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>last_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>email<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个打招呼的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,{} {},next to meet you."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这个用户的独特之处</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""重新定义这个特殊的用户"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>privileges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 展示这个用户的特殊信息</span>    <span class="token keyword">def</span> <span class="token function">show_privileges</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPrivileges:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> privilege <span class="token keyword">in</span> self<span class="token punctuation">.</span>privileges<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> privilege<span class="token punctuation">)</span>user <span class="token operator">=</span> Admin<span class="token punctuation">(</span><span class="token string">"Chen"</span><span class="token punctuation">,</span> <span class="token string">"Xili"</span><span class="token punctuation">,</span> <span class="token string">"fire wolf"</span><span class="token punctuation">,</span> <span class="token string">"1239968427@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"yangxin"</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>describe_user<span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>privileges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'can add post'</span><span class="token punctuation">,</span>                   <span class="token string">'can delete post'</span><span class="token punctuation">,</span>                   <span class="token string">'can ban user'</span><span class="token punctuation">,</span>                   <span class="token punctuation">]</span>user<span class="token punctuation">.</span>show_privileges<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-8 权限：</strong>编写一个名为Privileges的类，它只有一个属性——privileges，其中存储了练习9-7所说的字符串列表。将方法show_privileges()移到这个类中。在Admin类中，将一个Privileges实例用作其属性。创建一个Admin实例，并使用方法show_privileges()来显示其权限。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与用户相关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化各属性"""</span>        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location    <span class="token keyword">def</span> <span class="token function">describe_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个描述用户信息的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{} {}'s username is {},his(her) emile is {},his(her) location is {}."</span>              <span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>last_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>email<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个打招呼的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello,{} {},next to meet you."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这个用户的独特之处</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""重新定义这个特殊的用户"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>privileges <span class="token operator">=</span> Privileges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Privileges</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 一个贮存管理员的类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> privileges<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>privileges <span class="token operator">=</span> privileges    <span class="token keyword">def</span> <span class="token function">show_privileges</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPrivileges:"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>privileges<span class="token punctuation">:</span>            <span class="token keyword">for</span> privilege <span class="token keyword">in</span> self<span class="token punctuation">.</span>privileges<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> privilege<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"- This user has no privileges."</span><span class="token punctuation">)</span>eric <span class="token operator">=</span> Admin<span class="token punctuation">(</span><span class="token string">'eric'</span><span class="token punctuation">,</span> <span class="token string">'matthes'</span><span class="token punctuation">,</span> <span class="token string">'e_matthes'</span><span class="token punctuation">,</span> <span class="token string">'e_matthes@example.com'</span><span class="token punctuation">,</span> <span class="token string">'alaska'</span><span class="token punctuation">)</span>eric<span class="token punctuation">.</span>describe_user<span class="token punctuation">(</span><span class="token punctuation">)</span>eric<span class="token punctuation">.</span>privileges<span class="token punctuation">.</span>show_privileges<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nAdding privileges..."</span><span class="token punctuation">)</span>eric_privileges <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'can reset passwords'</span><span class="token punctuation">,</span>    <span class="token string">'can moderate discussions'</span><span class="token punctuation">,</span>    <span class="token string">'can suspend accounts'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>eric<span class="token punctuation">.</span>privileges<span class="token punctuation">.</span>privileges <span class="token operator">=</span> eric_privilegeseric<span class="token punctuation">.</span>privileges<span class="token punctuation">.</span>show_privileges<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-9 电瓶升级：</strong>在本节最后一个electric_car.py版本中，给Battery类添加一个名为upgrade_battery()的方法。这个方法检查电瓶容量，如果它不是85，就将它设置为85。创建一辆电瓶容量为默认值的电动汽车，调用方法get_range()，然后对电瓶进行升级，并再次调用get_range()。你会看到这辆汽车的续航里程增加了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A simple attempt to represent a car."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> manufacturer<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize attributes to describe a car."""</span>        self<span class="token punctuation">.</span>manufacturer <span class="token operator">=</span> manufacturer        self<span class="token punctuation">.</span>model <span class="token operator">=</span> model        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">get_descriptive_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Return a neatly formatted descriptive name."""</span>        long_name <span class="token operator">=</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>year<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>manufacturer <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>model        <span class="token keyword">return</span> long_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">read_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Print a statement showing the car's mileage."""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" miles on it."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mileage<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Set the odometer reading to the given value.        Reject the change if it attempts to roll the odometer back.        """</span>        <span class="token keyword">if</span> mileage <span class="token operator">>=</span> self<span class="token punctuation">.</span>odometer_reading<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>odometer_reading <span class="token operator">=</span> mileage        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't roll back an odometer!"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">increment_odometer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> miles<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Add the given amount to the odometer reading."""</span>        self<span class="token punctuation">.</span>odometer_reading <span class="token operator">+=</span> miles<span class="token keyword">class</span> <span class="token class-name">Battery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A simple attempt to model a battery for an electric car."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> battery_size<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the battery's attributes."""</span>        self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> battery_size    <span class="token keyword">def</span> <span class="token function">describe_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Print a statement describing the battery size."""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This car has a "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>battery_size<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-kWh battery."</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_range</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Print a statement about the range this battery provides."""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>battery_size <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">:</span>            range <span class="token operator">=</span> <span class="token number">140</span>        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>battery_size <span class="token operator">==</span> <span class="token number">85</span><span class="token punctuation">:</span>            range <span class="token operator">=</span> <span class="token number">185</span>        message <span class="token operator">=</span> <span class="token string">"This car can go approximately "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>range<span class="token punctuation">)</span>        message <span class="token operator">+=</span> <span class="token string">" miles on a full charge."</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">upgrade_battery</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 检查电瓶容量</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>battery_size <span class="token operator">==</span> <span class="token number">60</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>battery_size <span class="token operator">=</span> <span class="token number">85</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Upgraded the battery to 85 kWh."</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The battery is already upgraded."</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">ElectricCar</span><span class="token punctuation">(</span>Car<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Models aspects of a car, specific to electric vehicles."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> manufacturer<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Initialize attributes of the parent class.        Then initialize attributes specific to an electric car.        """</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>manufacturer<span class="token punctuation">,</span> model<span class="token punctuation">,</span> year<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>battery <span class="token operator">=</span> Battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Make an electric car, and check the battery:"</span><span class="token punctuation">)</span>my_tesla <span class="token operator">=</span> ElectricCar<span class="token punctuation">(</span><span class="token string">'tesla'</span><span class="token punctuation">,</span> <span class="token string">'model s'</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nUpgrade the battery, and check it again:"</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>upgrade_battery<span class="token punctuation">(</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nTry upgrading the battery a second time."</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>upgrade_battery<span class="token punctuation">(</span><span class="token punctuation">)</span>my_tesla<span class="token punctuation">.</span>battery<span class="token punctuation">.</span>describe_battery<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-10 导入Restaurant类：</strong>将最新的Restaurant类存储在一个模块中。在另一个文件中，导入Restaurant类，创建一个Restaurant实例，并调用Restaurant的一个方法，以确认import语句正确无误。</p><p><em>restaurant.py:</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Restaurant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A class representing a restaurant."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> cuisine_type<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the restaurant."""</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cuisine_type <span class="token operator">=</span> cuisine_type        self<span class="token punctuation">.</span>number_served <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">describe_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a summary of the restaurant."""</span>        msg <span class="token operator">=</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" serves wonderful "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>cuisine_type <span class="token operator">+</span> <span class="token string">"."</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">open_restaurant</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a message that the restaurant is open."""</span>        msg <span class="token operator">=</span> self<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" is open. Come on in!"</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">set_number_served</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> number_served<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Allow user to set the number of customers that have been served."""</span>        self<span class="token punctuation">.</span>number_served <span class="token operator">=</span> number_served    <span class="token keyword">def</span> <span class="token function">increment_number_served</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> additional_served<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Allow user to increment the number of customers served."""</span>        self<span class="token punctuation">.</span>number_served <span class="token operator">+=</span> additional_served<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> restaurant <span class="token keyword">import</span> Restaurantchannel_club <span class="token operator">=</span> Restaurant<span class="token punctuation">(</span><span class="token string">'the channel club'</span><span class="token punctuation">,</span> <span class="token string">'steak and seafood'</span><span class="token punctuation">)</span>channel_club<span class="token punctuation">.</span>describe_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span>channel_club<span class="token punctuation">.</span>open_restaurant<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-11 导入Admin类：</strong>以为完成练习9-8而做的工作为基础，将User、Privileges和Admin类存储在一个模块中，再创建一个文件，在其中创建一个Admin实例并对其调用方法show_privileges()，以确认一切都能正常地运行。</p><p><em>user.py:</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Represent a simple user profile."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the user."""</span>        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">describe_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a summary of the user's information."""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>first_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Username: "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Email: "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>email<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Location: "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>location<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a personalized greeting to the user."""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nWelcome back, "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">increment_login_attempts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Increment the value of login_attempts."""</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">reset_login_attempts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Reset login_attempts to 0."""</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A user with administrative privileges."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the admin."""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Initialize an empty set of privileges.</span>        self<span class="token punctuation">.</span>privileges <span class="token operator">=</span> Privileges<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Privileges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Stores privileges associated with an Admin account."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> privileges<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the privileges object."""</span>        self<span class="token punctuation">.</span>privilege <span class="token operator">=</span> privileges    <span class="token keyword">def</span> <span class="token function">show_privileges</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display the privileges this administrator has."""</span>        <span class="token keyword">for</span> privilege <span class="token keyword">in</span> self<span class="token punctuation">.</span>privileges<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"- "</span> <span class="token operator">+</span> privilege<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> user <span class="token keyword">import</span> Admineric <span class="token operator">=</span> Admin<span class="token punctuation">(</span><span class="token string">'eric'</span><span class="token punctuation">,</span> <span class="token string">'matthes'</span><span class="token punctuation">,</span> <span class="token string">'e_matthes'</span><span class="token punctuation">,</span> <span class="token string">'e_matthes@example.com'</span><span class="token punctuation">,</span> <span class="token string">'alaska'</span><span class="token punctuation">)</span>eric<span class="token punctuation">.</span>describe_user<span class="token punctuation">(</span><span class="token punctuation">)</span>eric_privileges <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'can reset passwords'</span><span class="token punctuation">,</span>    <span class="token string">'can moderate discussions'</span><span class="token punctuation">,</span>    <span class="token string">'can suspend accounts'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>eric<span class="token punctuation">.</span>privileges<span class="token punctuation">.</span>privileges <span class="token operator">=</span> eric_privileges<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe admin "</span> <span class="token operator">+</span> eric<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">" has these privileges: "</span><span class="token punctuation">)</span>eric<span class="token punctuation">.</span>privileges<span class="token punctuation">.</span>show_privileges<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-12 多个模块：</strong>将User类存储在一个模块中，并将Privileges和Admin类存储在另一个模块中。再创建一个文件，在其中创建一个Admin实例，并对其调用方法show_privileges()，以确认一切都依然能够正常地运行。</p><p><em>user.py:</em></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Represent a simple user profile."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the user."""</span>        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">describe_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a summary of the user's information."""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>first_name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Username: "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Email: "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>email<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Location: "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>location<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display a personalized greeting to the user."""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nWelcome back, "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">increment_login_attempts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Increment the value of login_attempts."""</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">reset_login_attempts</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Reset login_attempts to 0."""</span>        self<span class="token punctuation">.</span>login_attempts <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>admin.py:</em>    </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> user <span class="token keyword">import</span> User<span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""A user with administrative privileges."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the admin."""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Initialize an empty set of privileges.</span>        self<span class="token punctuation">.</span>privileges <span class="token operator">=</span> Privileges<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Privileges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Stores privileges associated with an Admin account."""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> privileges<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Initialize the privileges object."""</span>        self<span class="token punctuation">.</span>privilege <span class="token operator">=</span> privileges    <span class="token keyword">def</span> <span class="token function">show_privileges</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""Display the privileges this administrator has."""</span>        <span class="token keyword">for</span> privilege <span class="token keyword">in</span> self<span class="token punctuation">.</span>privileges<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"- "</span> <span class="token operator">+</span> privilege<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> admin <span class="token keyword">import</span> Admineric <span class="token operator">=</span> Admin<span class="token punctuation">(</span><span class="token string">'eric'</span><span class="token punctuation">,</span> <span class="token string">'matthes'</span><span class="token punctuation">,</span> <span class="token string">'e_matthes'</span><span class="token punctuation">,</span> <span class="token string">'e_matthes@example.com'</span><span class="token punctuation">,</span> <span class="token string">'alaska'</span><span class="token punctuation">)</span>eric<span class="token punctuation">.</span>describe_user<span class="token punctuation">(</span><span class="token punctuation">)</span>eric_privileges <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'can reset passwords'</span><span class="token punctuation">,</span>    <span class="token string">'can moderate discussions'</span><span class="token punctuation">,</span>    <span class="token string">'can suspend accounts'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>eric<span class="token punctuation">.</span>privileges<span class="token punctuation">.</span>privileges <span class="token operator">=</span> eric_privileges<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe admin "</span> <span class="token operator">+</span> eric<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">" has these privileges: "</span><span class="token punctuation">)</span>eric<span class="token punctuation">.</span>privileges<span class="token punctuation">.</span>show_privileges<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-13 使用OrderedDict：</strong>在练习6-4中，你使用了一个标准字典表示词汇表。请使用OrderdDict类来重写这个程序，并确认输出的顺序与你在字典中添加键-值对的顺序一致。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDictwords <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'循环方式'</span><span class="token punctuation">,</span>         <span class="token string">'print'</span><span class="token punctuation">:</span> <span class="token string">'打印输出在屏幕显示'</span><span class="token punctuation">,</span>         <span class="token string">'pop()'</span><span class="token punctuation">:</span> <span class="token string">'从列表结尾中删除数据'</span><span class="token punctuation">,</span>         <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token string">'按字母从小到大永久排序'</span><span class="token punctuation">,</span>         <span class="token string">'del'</span><span class="token punctuation">:</span> <span class="token string">'删除某个数据'</span><span class="token punctuation">,</span>         <span class="token string">'set()'</span><span class="token punctuation">:</span> <span class="token string">'找出列表中独一无二的元素'</span><span class="token punctuation">,</span>         <span class="token string">'value()'</span><span class="token punctuation">:</span> <span class="token string">'提取字典中包含的值'</span><span class="token punctuation">,</span>         <span class="token string">'if'</span><span class="token punctuation">:</span> <span class="token string">'假设语句'</span><span class="token punctuation">,</span>         <span class="token string">'keys()'</span><span class="token punctuation">:</span> <span class="token string">'只提取字典中包含的名称'</span><span class="token punctuation">,</span>         <span class="token string">'append()'</span><span class="token punctuation">:</span> <span class="token string">'添加数据'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9-14 骰子：</strong>模块random包含以各种方式生成随机数的函数，其中的randint()返回一个位于指定范围内的整数，例如，下面的代码返回一个1~6内的整数：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> randintx <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>请创建一个Die类，它包含一个名为sides的属性，该属性的默认值为6。编写一个名为roll_die()的方法，它打印位于1和骰子面数之间的随机数。创建一个6面的骰子，再掷10次。</p><p>​    创建一个10面的骰子和一个20面的骰子，并将它们都掷10次。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">class</span> <span class="token class-name">Die</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 创建一个Die类</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> slide<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 初始化</span>        self<span class="token punctuation">.</span>slide <span class="token operator">=</span> slide    <span class="token keyword">def</span> <span class="token function">roll_die</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>slide<span class="token punctuation">)</span>d6 <span class="token operator">=</span> Die<span class="token punctuation">(</span><span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> roll_number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> d6<span class="token punctuation">.</span>roll_die<span class="token punctuation">(</span><span class="token punctuation">)</span>    results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n10 rolls of a 6-sided die:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>d10 <span class="token operator">=</span> Die<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> roll_number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> d10<span class="token punctuation">.</span>roll_die<span class="token punctuation">(</span><span class="token punctuation">)</span>    results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n10 rolls of a 10-slide die:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span>d20 <span class="token operator">=</span> Die<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>results <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> roll_number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> d20<span class="token punctuation">.</span>roll_die<span class="token punctuation">(</span><span class="token punctuation">)</span>    results<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n10 rolls of a 20-slide die:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案9</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-9/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-9/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter10"><a href="#Chapter10" class="headerlink" title="Chapter10"></a>Chapter10</h1><p><strong>10-1 Python学习笔记：</strong>在文本编辑器中新建一个文件，写几句话来总结一下你至此学到的Python知识，其中每一行都以“In Python you can”打头。将这个文件命名为learning_Python.txt，并将其存储到为完成本章练习而编写的程序所在的目录中。编写一个程序，它读取这个文件，并将你所写的内容打印三次：第一次打印时读取整个文件；第二次打印时遍历文件对象；第三次打印时将各行存储在一个列表中，再在with代码块外打印它们。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>knowledge <span class="token operator">=</span> <span class="token string">'learning_python.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>knowledge<span class="token punctuation">)</span> <span class="token keyword">as</span> files<span class="token punctuation">:</span>    file <span class="token operator">=</span> files<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>knowledge<span class="token punctuation">)</span> <span class="token keyword">as</span> files<span class="token punctuation">:</span>    <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>knowledge<span class="token punctuation">)</span> <span class="token keyword">as</span> files<span class="token punctuation">:</span>    lines <span class="token operator">=</span> files<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-2 C语言学习笔记：</strong>可使用方法replace()将字符串中的特定单词都替换为另一个单词。下面是一个简单的示例，演示了如何将句子中的’dog’替换为’cat’：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> message <span class="token operator">=</span> <span class="token string">"I really like dogs."</span><span class="token operator">>></span><span class="token operator">></span> message<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">)</span><span class="token string">'I really like cats.'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>读取你刚才创建的文件learning_python.txt中的每一行，将其中的Python都替换为另一门语言的名称，如C。将修改后的各行都打印到屏幕上。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>knowledge <span class="token operator">=</span> <span class="token string">'learning_python.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>knowledge<span class="token punctuation">)</span> <span class="token keyword">as</span> files<span class="token punctuation">:</span>    file <span class="token operator">=</span> files<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>knowledge<span class="token punctuation">)</span> <span class="token keyword">as</span> files<span class="token punctuation">:</span>    <span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>        file <span class="token operator">=</span> file<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>knowledge<span class="token punctuation">)</span> <span class="token keyword">as</span> files<span class="token punctuation">:</span>    lines <span class="token operator">=</span> files<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Python'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-3 访客：</strong>编写一个程序，提示用户输入其名字；用户作出响应后，将其名字写入到文件guest.txt中。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>your_name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter you name:"</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">'guest.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>    file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>your_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-4 访客名单：</strong>编写一个while循环，提示用户输入其名字。用户输入其名字后，在屏幕上打印一句问候语，并将一条访问记录添加到文件guest_book.txt中。确保这个文件中的每条记录都独占一行。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>filename <span class="token operator">=</span> <span class="token string">'guest_book.txt'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter 'quit' when you are finished."</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter your name:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'\n'</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hi,{},you've been added to the guest book."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-5 关于编程的调查：</strong>编写一个while循环，询问用户为何喜欢编程。每当用户输入一个原因后，都将其添加到一个存储所有原因的文件中。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>filename <span class="token operator">=</span> <span class="token string">'programming_poll.txt'</span>responses <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"\nWhy do you like programming? "</span><span class="token punctuation">)</span>    responses<span class="token punctuation">.</span>append<span class="token punctuation">(</span>response<span class="token punctuation">)</span>    continue_poll <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Would you like to let someone else respond? (y/n) "</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> continue_poll <span class="token operator">!=</span> <span class="token string">'y'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> response <span class="token keyword">in</span> responses<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>response <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-6 加法运算：</strong>提示用户提供数值输入时，常出现的一个问题是，用户提供的是文本而不是数字。在这种情况下，当你尝试将输入转化为整数时，将引发ValueError异常。编写一个程序，提示用户输入两个数字，再将它们相加并打印结果，在用户输入的任何一个值不是数字时都捕获ValueError异常，并打印一条友好的错误信息。对你编写的程序进行测试：先输入两个数字，再输入一些文本而不是数字</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">try</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Give me a number: "</span><span class="token punctuation">)</span>    x <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Give me another number: "</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry, I  needed a number."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    z <span class="token operator">=</span> x <span class="token operator">+</span> y    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The sum of "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-7 加法计算器：</strong>将你为完成练习10-6而编写的代码放在一个while循环中，让用户犯错（输入的是文本而不是数字）后能够继续输入数字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Enter 'q' at any time to quit.\n"</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"\nGive me a number: "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        x <span class="token operator">=</span> int<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"\nGive me another number: "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> y <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        y <span class="token operator">=</span> int<span class="token punctuation">(</span>y<span class="token punctuation">)</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry, I really needed a number."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        sum <span class="token operator">=</span> x <span class="token operator">+</span> y        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The sum of {} and {} is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-8 猫和狗：</strong>创建两个文件cats.txt和dogs.txt，在第一个文件中至少存储三只猫的名字，在第二个文件中至少存储三条狗的名字。编写一个程序，尝试读取这些文件，并将其内容打印到屏幕上。将这些代码放在一个try-except代码块中，以便在文件不存在时捕获DileNotfound错误，并打印一条友好的消息。将其中一个文件移到另一个地方，并确认except代码块中的代码将正确地执行。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>file1 <span class="token operator">=</span> <span class="token string">'cats.txt'</span>file2 <span class="token operator">=</span> <span class="token string">'dogs.txt'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file1<span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        f1 <span class="token operator">=</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is cat's name:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> f1<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Sorry, I can't find that file."</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file2<span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>        f2 <span class="token operator">=</span> f2<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is dog's name:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> f2<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"  Sorry, I can't find that file."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-9 沉默的猫和狗：</strong>修改你在练习10-8中编写的except代码块，让程序在文件不存在时一言不发。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>file1 <span class="token operator">=</span> <span class="token string">'cats.txt'</span>file2 <span class="token operator">=</span> <span class="token string">'dogs.txt'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file1<span class="token punctuation">)</span> <span class="token keyword">as</span> f1<span class="token punctuation">:</span>        f1 <span class="token operator">=</span> f1<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is cat's name:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> f1<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file2<span class="token punctuation">)</span> <span class="token keyword">as</span> f2<span class="token punctuation">:</span>        f2 <span class="token operator">=</span> f2<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This is dog's name:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> f2<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-10 常见单词：</strong>访问项目Gutenberg（<a href="http://gutenberg.org/)，并找一些你想分析的图书。下载这些作品的文本文件或将浏览器中的原始文本复制到文本文件中。" target="_blank" rel="noopener">http://gutenberg.org/)，并找一些你想分析的图书。下载这些作品的文本文件或将浏览器中的原始文本复制到文本文件中。</a></p><p>你可以使用方法count()来确定特定的单词或短语在字符串中出现了多少次。例如，下面的代码计算’row’在一个字符串中出现了多少次：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> line <span class="token operator">=</span> <span class="token string">"Row, row, row your boat"</span><span class="token operator">>></span><span class="token operator">></span> line<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'row'</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> line<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'row'</span><span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请注意，通过使用lower()将字符串转换为小写，可捕捉要查找的单词出现的所有次数，而不管其大小写格式如何。</p><p>编写一个程序，它读取你在项目Gutenbery中获取的文件，并计算单词’the’在每个文件中分别出现了多少次。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>filename <span class="token operator">=</span> <span class="token string">'alice.txt'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">"the"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-11 喜欢的数字：</strong>编写一个程序，提示用户输入他喜欢的数字，并使用json.dump()将这个数字存储到文件中。再编写一个程序，从文件读取这个值，并打印消息“I know your favorite number！It’s ____.”</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> jsonnumber <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter your favorite number: "</span><span class="token punctuation">)</span>filename <span class="token operator">=</span> <span class="token string">"favorite_number.json"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>        number <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f_obj<span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter your favorite number:"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>number<span class="token punctuation">,</span> f_obj<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You favorite number is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My favorite number is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-12 记住喜欢的数字：</strong>将练习10-11 中的两个程序合二为一。如果存储了用户喜欢的数字，就向用户显示它，否则提示用户输入他喜欢的数字并将其存储到文件中。运行这个程序两次，看看它是否像预期的那样工作。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> json<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'favorite_number.json'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        number <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"What's your favorite number? "</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'favorite_number.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>number<span class="token punctuation">,</span> f<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thanks, I'll remember that."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I know your favorite number! It's "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>10-13 验证用户：</strong>最后一个remember_me.py版本假设用户要么已输入其用户名，要么是首次运行该程序。我们应修改这个程序，以应对这样的情形：当前和最后一次运行该程序的用户并非同一个人。</p><p>为此，再greet_user()中打印欢迎用户回来的信息前，先询问他用户名是否是对的。如果不对，就调用get_new_username()让用户输入正确的用户名。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">get_stored_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""储存用户"""</span>    filename <span class="token operator">=</span> <span class="token string">'username.json'</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>            username <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f_obj<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>        <span class="token keyword">return</span> None    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> username<span class="token keyword">def</span> <span class="token function">get_new_username</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""新用户"""</span>    username <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"What is your name? "</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> <span class="token string">'username.json'</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f_obj<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>username<span class="token punctuation">,</span> f_obj<span class="token punctuation">)</span>    <span class="token keyword">return</span> username<span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""打招呼"""</span>    username <span class="token operator">=</span> get_stored_username<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> username<span class="token punctuation">:</span>        correct <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Are you "</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"? (y/n) "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> correct <span class="token operator">==</span> <span class="token string">'y'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Welcome back, "</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            username <span class="token operator">=</span> get_new_username<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"We'll remember you when you come back, "</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        username <span class="token operator">=</span> get_new_username<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"We'll remember you when you come back, "</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">)</span>greet_user<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案7</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-7/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-7/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter8"><a href="#Chapter8" class="headerlink" title="Chapter8"></a>Chapter8</h1><p><strong>8-1 消息：</strong>编写一个名为display_message()的函数，它打印一个句子，指出你在本章学的是什么，调用这个函数，确认显示的消息正确无误。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">display_message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这一章将学习如何运用函数"</span><span class="token punctuation">)</span>display_message<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-2 喜欢的图书：</strong>编写一个名为favorite_books()的函数，其中包含一个名为title的形参。这个函数打印一条消息，如One of my favorite books is Alice in wonderland。调用这个函数，并将一本图书的名称作为实参传递给它。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">favorite_book</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"One of my favorite books is {}."</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">)</span>favorite_book<span class="token punctuation">(</span><span class="token string">"Alice in Wonderland"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-3 T恤：</strong>编写一个名为make_shirt()的函数，它接收一个尺码以及要印到T恤上的字样。这个函数应打印一个句子，概要地说明T恤的尺码和字样。（使用位置实参调用这个函数来制作一件T恤；再使用关键字实参来调用这个函数。）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">make_shirt</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""描述衬衫的尺码与字"""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我将做一件尺码为{}的衬衫，里面将写的字为：{}。"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>size<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span>make_shirt<span class="token punctuation">(</span><span class="token string">"大号"</span><span class="token punctuation">,</span> <span class="token string">"老实人"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-4 大号T恤：</strong>修改函数make_shirt()，使其在默认情况下制作一件印有字样“I love Python”的大号T恤。调用这个函数来制作如下T恤：一件印有默认字样的大号T恤、一件印有默认字样的中号T恤和一件印有其他字样的T恤（尺码无关紧要）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">make_shirt</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> message<span class="token operator">=</span><span class="token string">"I love Python"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"我将做一件尺寸为{}的衬衫，里面的内容会写:{}。"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>size<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">)</span>make_shirt<span class="token punctuation">(</span><span class="token string">"大号"</span><span class="token punctuation">)</span>make_shirt<span class="token punctuation">(</span><span class="token string">"中号"</span><span class="token punctuation">,</span> <span class="token string">"老实人"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-5 城市：</strong>编写一个名为describe_city()的函数，它接受一座城市的名字以及该城市所属的国家。这个函数应打印一个简单的句子，如Reykjavik is in Iceland。给用于存储国家的形参指定默认值。为三座不同的城市调用这个函数，且其中至少有一座城市不属于默认国家。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">describe_city</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'阳新'</span><span class="token punctuation">,</span> country<span class="token operator">=</span><span class="token string">'中国'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}属于{}。"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">,</span> country<span class="token punctuation">)</span><span class="token punctuation">)</span>describe_city<span class="token punctuation">(</span><span class="token string">"武汉"</span><span class="token punctuation">)</span>describe_city<span class="token punctuation">(</span><span class="token string">"伦敦"</span><span class="token punctuation">,</span> <span class="token string">"英国"</span><span class="token punctuation">)</span>describe_city<span class="token punctuation">(</span><span class="token string">"纽约"</span><span class="token punctuation">,</span> <span class="token string">"美国"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-6 城市名：</strong>编写一个名为city_country()的函数，它接受城市的名称及其所属的国家。这个函数应返回一个格式类似于下面这样的字符串：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token string">"Santiago, Chile"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>至少使用三座城市-国家对调用这个函数，并打印它返回的值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">city_country</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span> country<span class="token punctuation">)</span><span class="token punctuation">:</span>    message <span class="token operator">=</span> city <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> country    <span class="token keyword">return</span> message<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>word <span class="token operator">=</span> city_country<span class="token punctuation">(</span><span class="token string">'yangxin'</span><span class="token punctuation">,</span> <span class="token string">'china'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>word <span class="token operator">=</span> city_country<span class="token punctuation">(</span><span class="token string">'london'</span><span class="token punctuation">,</span> <span class="token string">'England'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span>word <span class="token operator">=</span> city_country<span class="token punctuation">(</span><span class="token string">'beijing'</span><span class="token punctuation">,</span> <span class="token string">'china'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-7 专辑：</strong>编写一个名为make_album()的函数，它创建一个描述音乐专辑的字典。这个函数应接受歌手的名字和专辑名，并返回一个包含这两项信息的字典。使用这个函数创建三个表示不同专辑的字典，并打印每个返回的值，以核实字典正确地存储了专辑的信息。</p><p>​      给函数make_album()添加一个可选形参，以便能够存储专辑包含的歌曲书。如果调用这个函数时指定了歌曲数，就将这个值添加到表示专辑的字典中，调用这个函数，并至少在一次调用中指定专辑包含的歌曲数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">make_album</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> album<span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    messages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'person_name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">'album_name'</span><span class="token punctuation">:</span> album<span class="token punctuation">}</span>    <span class="token keyword">if</span> number<span class="token punctuation">:</span>        messages<span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token operator">=</span> number    <span class="token keyword">return</span> messageswords <span class="token operator">=</span> make_album<span class="token punctuation">(</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'不想长大'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>words <span class="token operator">=</span> make_album<span class="token punctuation">(</span><span class="token string">'镜心之歌'</span><span class="token punctuation">,</span> <span class="token string">'魁拔'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span>words <span class="token operator">=</span> make_album<span class="token punctuation">(</span><span class="token string">'处处吻'</span><span class="token punctuation">,</span> <span class="token string">'不知道'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-8 用户的专辑：</strong>在为练习8-7编写的程序中，编写一个while循环，让用户输入一个专辑的歌手和名称。获取这些信息后，使用它们来调用函数make_album()，并将创建的字典打印出来。在这个while循环中，务必要提供退出路径。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">make_album</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> album<span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    messages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'person_name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span> <span class="token string">'album_name'</span><span class="token punctuation">:</span> album<span class="token punctuation">}</span>    <span class="token keyword">if</span> number<span class="token punctuation">:</span>        messages<span class="token punctuation">[</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token operator">=</span> number    <span class="token keyword">return</span> messages<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPlease tell the message about the music."</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"(enter 'q' at any time to quit.)"</span><span class="token punctuation">)</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"person_name:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    album <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'album_name:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> album <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'number:'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    words <span class="token operator">=</span> make_album<span class="token punctuation">(</span>name<span class="token punctuation">,</span> album<span class="token punctuation">,</span> number<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-9 魔术师：</strong>创建一个包含魔术师名字的列表，并将其传递给一个名为show_magicians()的函数，这个函数打印列表中每个魔术师的名字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'jack'</span><span class="token punctuation">,</span> <span class="token string">'amy'</span><span class="token punctuation">,</span> <span class="token string">'jone'</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">show_magicians</span><span class="token punctuation">(</span>magic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> magician <span class="token keyword">in</span> magicians<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>magician<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>show_magicians<span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-10 了不起的魔术师：</strong>在你为完成练习8-9而编写的程序中，编写一个名为make_great()的函数，对魔术师列表进行修改，在每个魔术师的名字都加入字样”the Great“。调用函数show_magicians()，确认魔术师列表确实变了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">show_magicians</span><span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Print the name of each magician in the list."""</span>    <span class="token keyword">for</span> magician <span class="token keyword">in</span> magicians<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>magician<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_great</span><span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Add 'the Great!' to each magician's name."""</span>    <span class="token comment" spellcheck="true"># Build a new list to hold the great musicians.</span>    great_magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Make each magician great, and add it to great_magicians.</span>    <span class="token keyword">while</span> magicians<span class="token punctuation">:</span>        magician <span class="token operator">=</span> magicians<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        great_magician <span class="token operator">=</span> magician <span class="token operator">+</span> <span class="token string">' the Great'</span>        great_magicians<span class="token punctuation">.</span>append<span class="token punctuation">(</span>great_magician<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Add the great magicians back into magicians.</span>    <span class="token keyword">for</span> great_magician <span class="token keyword">in</span> great_magicians<span class="token punctuation">:</span>        magicians<span class="token punctuation">.</span>append<span class="token punctuation">(</span>great_magician<span class="token punctuation">)</span>magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Harry Houdini'</span><span class="token punctuation">,</span> <span class="token string">'David Blaine'</span><span class="token punctuation">,</span> <span class="token string">'Teller'</span><span class="token punctuation">]</span>show_magicians<span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>make_great<span class="token punctuation">(</span>magicians<span class="token punctuation">)</span>show_magicians<span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-11 不变的魔术师：</strong>修改你为练习8-10而编写的程序，在调用函数make_great()时，向他传递魔术师列表的副本。由于不想修改原始列表，请返回修改后的列表，并将其存储到另一个列表中。分别使用这两个列表来调用show_magicians()，确认一个列表包含的是原来的魔术师名字，而另一个列表包含的是添加了字样”the Great”的魔术师名字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">show_magicians</span><span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Print the name of each magician in the list."""</span>    <span class="token keyword">for</span> magician <span class="token keyword">in</span> magicians<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>magician<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">make_great</span><span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Add 'the Great!' to each magician's name."""</span>    <span class="token comment" spellcheck="true"># Build a new list to hold the great musicians.</span>    great_magicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># Make each magician great, and add it to great_magicians.</span>    <span class="token keyword">while</span> magicians<span class="token punctuation">:</span>        magician <span class="token operator">=</span> magicians<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        great_magician <span class="token operator">=</span> magician <span class="token operator">+</span> <span class="token string">' the Great'</span>        great_magicians<span class="token punctuation">.</span>append<span class="token punctuation">(</span>great_magician<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Add the great magicians back into magicians.</span>    <span class="token keyword">for</span> great_magician <span class="token keyword">in</span> great_magicians<span class="token punctuation">:</span>        magicians<span class="token punctuation">.</span>append<span class="token punctuation">(</span>great_magician<span class="token punctuation">)</span>        <span class="token keyword">return</span> magiciansmagicians <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Harry Houdini'</span><span class="token punctuation">,</span> <span class="token string">'David Blaine'</span><span class="token punctuation">,</span> <span class="token string">'Teller'</span><span class="token punctuation">]</span>show_magicians<span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nGreat magicians:"</span><span class="token punctuation">)</span>great_magicians <span class="token operator">=</span> make_great<span class="token punctuation">(</span>magicians<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>show_magicians<span class="token punctuation">(</span>great_magicians<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nOriginal magicians:"</span><span class="token punctuation">)</span>show_magicians<span class="token punctuation">(</span>magicians<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-12 三明治：</strong>编写一个函数，它接受顾客要在三明治中添加的一系列食材。这个函数只有一个形参（它收集函数调用中提供的所有食材），并打印一条消息，对顾客点的三明治进行概述，调用这个函数三次，每次都提供不同数量的实参。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">sandwiches</span><span class="token punctuation">(</span><span class="token operator">*</span>sandwiches<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nMaking a sandwich with the following toppings:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> sandwich <span class="token keyword">in</span> sandwiches<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>sandwich<span class="token punctuation">)</span>sandwiches<span class="token punctuation">(</span><span class="token string">"fruit"</span><span class="token punctuation">,</span> <span class="token string">'pepperoni'</span><span class="token punctuation">)</span>sandwiches<span class="token punctuation">(</span><span class="token string">'meat'</span><span class="token punctuation">)</span>sandwiches<span class="token punctuation">(</span><span class="token string">'fruit'</span><span class="token punctuation">,</span> <span class="token string">'meat'</span><span class="token punctuation">,</span> <span class="token string">'extra cheese'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-13 用户简介：</strong>复制前面的程序user_profile.py，在其中调用build_profile()来创建有关你的简介；调用这个函数时，指出你的名和姓，以及三个描述你的键-值对。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">build_profile</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token operator">**</span>user_info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个字典，其中包含我们知道的有关用户的一切"""</span>    profile <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    profile<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> first    profile<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> last    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> user_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        profile<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> profileuser_profile <span class="token operator">=</span> build_profile<span class="token punctuation">(</span><span class="token string">'Chen'</span><span class="token punctuation">,</span> <span class="token string">'xili'</span><span class="token punctuation">,</span> location<span class="token operator">=</span><span class="token string">'Wuhan'</span><span class="token punctuation">,</span> field<span class="token operator">=</span><span class="token string">'scientist'</span><span class="token punctuation">,</span> hobby<span class="token operator">=</span><span class="token string">'games'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>user_profile<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-14 汽车：</strong>编写一个函数，将一辆汽车的信息存储在一个字典中。这个函数总是接受制造商和型号，还接受任意数量的关键字实参。这样调用这个函数：提供必不可少的信息，以及两个名称-值对，如颜色和选装配件。这个函数必须能够像下面这样进行调用：</p><pre class="line-numbers language-python"><code class="language-python">car <span class="token operator">=</span> make_car<span class="token punctuation">(</span><span class="token string">'subaru'</span><span class="token punctuation">,</span> <span class="token string">'outback'</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token operator">=</span>blue<span class="token punctuation">,</span> tow_package<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印返回的字典，确认正确地处理了所有的信息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">make_car</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">**</span>car_info<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个字典，其中包含我们知道的有关汽车的一切"""</span>    cars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    cars<span class="token punctuation">[</span><span class="token string">'produce'</span><span class="token punctuation">]</span> <span class="token operator">=</span> producer    cars<span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> size    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> car_info<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cars<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    <span class="token keyword">return</span> carscar <span class="token operator">=</span> make_car<span class="token punctuation">(</span><span class="token string">'subaru'</span><span class="token punctuation">,</span> <span class="token string">'outback'</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> tow_package<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-15 打印模型：</strong>将示例print_models.py中的函数放在另一个名为printing_functions.py文件中；在print_models.py的开头编写一条import语句，并修改这个文件以使用导入的函数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> pets <span class="token keyword">import</span> describe_petdescribe_pet<span class="token punctuation">(</span><span class="token string">'hamster'</span><span class="token punctuation">,</span> <span class="token string">'harry'</span><span class="token punctuation">)</span>describe_pet<span class="token punctuation">(</span><span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'willie'</span><span class="token punctuation">)</span>describe_pet<span class="token punctuation">(</span>animal_type<span class="token operator">=</span><span class="token string">'cat'</span><span class="token punctuation">,</span> pet_name<span class="token operator">=</span><span class="token string">'silly'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8-16 导入：</strong>选择一个你编写的且只包含一个函数的程序，并将这个函数放在另一个文件中。在主程序文件中，使用下述各种方法导入这个函数，再调用它：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> module_nameform module_name <span class="token keyword">import</span> function_name<span class="token keyword">from</span> module_name <span class="token keyword">import</span> function_name <span class="token keyword">as</span> fn<span class="token keyword">import</span> module_name <span class="token keyword">as</span> mn<span class="token keyword">from</span> module_name <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案5</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-5/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-5/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter6"><a href="#Chapter6" class="headerlink" title="Chapter6"></a>Chapter6</h1><p><strong>6-1 人：</strong>使用一个字典来存储一个熟人的信息，包括名、姓、年龄和居住的城市。该字典应包含键first_name、last_name、age和city。将存储在该字典中的每项信息都打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Chen'</span><span class="token punctuation">,</span>          <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'Xili'</span><span class="token punctuation">,</span>          <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>          <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Yangxin'</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-2 喜欢的数字：</strong>使用一个字典来存储一些人喜欢的数字。请想出5个人的名字，并将这些名字用作字典中的键；想出每个人喜欢的一个数字，并将这些数字作为值存储在字典中。打印每个人的名字和喜欢的数字。为让这个程序更有趣，通过询问朋友确保数据是真实的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>favorite_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'陈细利'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>                   <span class="token string">'柯正'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>                   <span class="token string">'肖龙港'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                   <span class="token string">'曹中烨'</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>                   <span class="token string">'袁基宸'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>                   <span class="token punctuation">}</span><span class="token keyword">for</span> favorite_number <span class="token keyword">in</span> favorite_numbers<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>favorite_number <span class="token operator">+</span>          <span class="token string">"最喜欢的数字是"</span> <span class="token operator">+</span>          str<span class="token punctuation">(</span>favorite_numbers<span class="token punctuation">[</span>favorite_number<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-3 词汇表：</strong>Python字典可用于模拟现实生活中的字典，但为避免混淆，我们将后者称为词汇表。</p><p>□ 想出你在面前学过的5个编程词汇，将他们用作词汇表的键，并将它们的含义作为值存储在词汇表中。</p><p>□ 以整洁的方式打印每个词汇及其含义。为此，你可以先打印词汇，在它后面加上一个冒号，在打印词汇的含义；也可在一行打印词汇，再使用换行符（\n)插入一个空行，然后在下一行以缩进的方式打印词汇的含义。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'循环方式'</span><span class="token punctuation">,</span>         <span class="token string">'print'</span><span class="token punctuation">:</span> <span class="token string">'打印输出在屏幕显示'</span><span class="token punctuation">,</span>         <span class="token string">'pop()'</span><span class="token punctuation">:</span> <span class="token string">'从列表结尾中删除数据'</span><span class="token punctuation">,</span>         <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token string">'按字母从小到大永久排序'</span><span class="token punctuation">,</span>         <span class="token string">'del'</span><span class="token punctuation">:</span> <span class="token string">'删除某个数据'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'for:'</span> <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token string">'for'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'print:'</span> <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token string">'print'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'pop():'</span> <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token string">'pop()'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sort:'</span> <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token string">'sort'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'del:'</span> <span class="token operator">+</span> words<span class="token punctuation">[</span><span class="token string">'del'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-4 词汇表2：</strong>既然你知道了如何遍历字典，现在请整理你为完成练习6-3而编写的代码，将其中的一系列print语句替换为一个遍历字典中的键和值的循环。确定该循环正确无误后，再在词汇表中添加5个Python术语。当你再次运行这个程序时，这些新术语及其含义将自动包含在输出中。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>words <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'for'</span><span class="token punctuation">:</span> <span class="token string">'循环方式'</span><span class="token punctuation">,</span>         <span class="token string">'print'</span><span class="token punctuation">:</span> <span class="token string">'打印输出在屏幕显示'</span><span class="token punctuation">,</span>         <span class="token string">'pop()'</span><span class="token punctuation">:</span> <span class="token string">'从列表结尾中删除数据'</span><span class="token punctuation">,</span>         <span class="token string">'sort'</span><span class="token punctuation">:</span> <span class="token string">'按字母从小到大永久排序'</span><span class="token punctuation">,</span>         <span class="token string">'del'</span><span class="token punctuation">:</span> <span class="token string">'删除某个数据'</span><span class="token punctuation">,</span>         <span class="token string">'set()'</span><span class="token punctuation">:</span> <span class="token string">'找出列表中独一无二的元素'</span><span class="token punctuation">,</span>         <span class="token string">'value()'</span><span class="token punctuation">:</span> <span class="token string">'提取字典中包含的值'</span><span class="token punctuation">,</span>         <span class="token string">'if'</span><span class="token punctuation">:</span> <span class="token string">'假设语句'</span><span class="token punctuation">,</span>         <span class="token string">'keys()'</span><span class="token punctuation">:</span> <span class="token string">'只提取字典中包含的名称'</span><span class="token punctuation">,</span>         <span class="token string">'append()'</span><span class="token punctuation">:</span> <span class="token string">'添加数据'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> value <span class="token keyword">in</span> words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-5 河流：</strong>创建一个字典，在其中存储三条大河流及其流经的国家。其中一个键-值对可能是’nile’:’egypt’。</p><p>□ 使用循环为每条河流打印一条信息，如”The Nile runs throuth Egypt”。</p><p>□ 使用循环将该字典中每条河流的名字都打印出来。</p><p>□ 使用循环将该字典包含的每个国家的名字都打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>rivers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"nile"</span><span class="token punctuation">:</span> <span class="token string">"egypt"</span><span class="token punctuation">,</span>          <span class="token string">"changjiang river"</span><span class="token punctuation">:</span> <span class="token string">"china"</span><span class="token punctuation">,</span>          <span class="token string">"rhine river basin"</span><span class="token punctuation">:</span> <span class="token string">"French"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> country <span class="token keyword">in</span> rivers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"runs through "</span> <span class="token operator">+</span> country<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>country<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-6 调查：</strong>在6.3.1节编写的程序favorite_languages.py中执行以下操作。</p><p>□ 创建一个应该会接收调查的人员名单，其中有些人已包含在字典中，而其他人未包含在字典中。</p><p>□ 遍历这个人员名单，对于已参与调查的人，打印一条消息表示感谢。对于还未参与调查的人，打印一条消息邀请他参与调查。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>favorite_languages <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'jen'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>    <span class="token string">'sarah'</span><span class="token punctuation">:</span> <span class="token string">'c'</span><span class="token punctuation">,</span>    <span class="token string">'edward'</span><span class="token punctuation">:</span> <span class="token string">'ruby'</span><span class="token punctuation">,</span>    <span class="token string">'phil'</span><span class="token punctuation">:</span> <span class="token string">'python'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> language <span class="token keyword">in</span> favorite_languages<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'s favorite language is "</span> <span class="token operator">+</span> language<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'jen'</span><span class="token punctuation">,</span> <span class="token string">'edward'</span><span class="token punctuation">,</span> <span class="token string">'phil'</span><span class="token punctuation">,</span> <span class="token string">'chen'</span><span class="token punctuation">,</span> <span class="token string">'cao'</span><span class="token punctuation">]</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>    <span class="token keyword">if</span> name <span class="token keyword">in</span> favorite_languages<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Thank you,"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",I invite you join us."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-7 人：</strong>在为完成练习6-1而编写的程序中，再创建两个表示人的字典，然后将这三个字典都存储在一个名为people的列表中。遍历这个列表，将其中每个人的所有信息都打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>person_a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Chen'</span><span class="token punctuation">,</span>            <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'Xili'</span><span class="token punctuation">,</span>            <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">19</span><span class="token punctuation">,</span>            <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Yangxin'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>person_b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Yuan'</span><span class="token punctuation">,</span>            <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'jicheng'</span><span class="token punctuation">,</span>            <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>            <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Yangxin'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>person_c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first_name'</span><span class="token punctuation">:</span> <span class="token string">'Cao'</span><span class="token punctuation">,</span>            <span class="token string">'last_name'</span><span class="token punctuation">:</span> <span class="token string">'zhongye'</span><span class="token punctuation">,</span>            <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">17</span><span class="token punctuation">,</span>            <span class="token string">'city'</span><span class="token punctuation">:</span> <span class="token string">'Yangxin'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>peoples <span class="token operator">=</span> <span class="token punctuation">[</span>person_a<span class="token punctuation">,</span> person_b<span class="token punctuation">,</span> person_c<span class="token punctuation">]</span><span class="token keyword">for</span> people <span class="token keyword">in</span> peoples<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\tfirst_name:"</span> <span class="token operator">+</span> people<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tlast_name:"</span> <span class="token operator">+</span> people<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tage:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>people<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tcity:"</span> <span class="token operator">+</span> people<span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-8 宠物：</strong>创建多个字典，对于每个字典，都是用一个宠物的名称来给它命名；在每个字典中，包含宠物的类型及其主人的姓名。将这些字典存储在一个名为pets的列表中，再遍历该列表，并将宠物的所有信息都打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>wangcai <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'pet_type'</span><span class="token punctuation">:</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'owner'</span><span class="token punctuation">:</span> <span class="token string">'jack'</span><span class="token punctuation">}</span>xiaobai <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'pet_type'</span><span class="token punctuation">:</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'owner'</span><span class="token punctuation">:</span> <span class="token string">'stave'</span><span class="token punctuation">}</span>xiaohei <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'pet_type'</span><span class="token punctuation">:</span> <span class="token string">'snake'</span><span class="token punctuation">,</span> <span class="token string">'owner'</span><span class="token punctuation">:</span> <span class="token string">'lilith'</span><span class="token punctuation">}</span>pets <span class="token operator">=</span> <span class="token punctuation">[</span>wangcai<span class="token punctuation">,</span> xiaobai <span class="token punctuation">,</span> xiaohei<span class="token punctuation">]</span><span class="token keyword">for</span> pet <span class="token keyword">in</span> pets<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n\tpet_type:"</span> <span class="token operator">+</span> pet<span class="token punctuation">[</span><span class="token string">"pet_type"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\towner:"</span> <span class="token operator">+</span> pet<span class="token punctuation">[</span><span class="token string">"owner"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-9 喜欢的地方：</strong>创建一个名为favorite_places的字典。在这个字典中，将三个人的名字用作键；对于其中的每个人，都存储他喜欢的1~3个地方。为让这个练习更有趣些，可让一些朋友指出他们喜欢的几个地方。遍历这个字典，并将其中每个人的名字及其喜欢的地方打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>favorite_places <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'jack'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'wuhan'</span><span class="token punctuation">,</span> <span class="token string">'beijing'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'lilith'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'dali'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">'jone'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'chongqing'</span><span class="token punctuation">,</span> <span class="token string">'shanghai'</span><span class="token punctuation">,</span> <span class="token string">'america'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> places <span class="token keyword">in</span> favorite_places<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'s favorite places is:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> place <span class="token keyword">in</span> places<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>place<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-10 喜欢的数字：</strong>修改为练习6-2而编写的程序，让每个人都可以由多个喜欢的数字，然后将每个人的名字及其喜欢的数字打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>favorite_numbers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'陈细利'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'柯正'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'肖龙港'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'曹中烨'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'袁基宸'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">438</span><span class="token punctuation">,</span> <span class="token number">520</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token punctuation">}</span><span class="token keyword">for</span> name<span class="token punctuation">,</span> favorite_number <span class="token keyword">in</span> favorite_numbers<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"最喜欢的数字是:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> number <span class="token keyword">in</span> favorite_number<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6-11 城市：</strong>创建一个名为cities的字典，其中将三个城市名用作键；对于每座城市，都创建一个字典，并在其中包含该城市所属的国家、人口约数以及一个有关该城市的事实。在表示每座城市的字典中，应包含country、populatio和fact等键。将每座城市的名字以及有关它们的信息都打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>cities <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'wuhan'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'country'</span><span class="token punctuation">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>        <span class="token string">'population'</span><span class="token punctuation">:</span> <span class="token number">11000000</span><span class="token punctuation">,</span>        <span class="token string">'fact'</span><span class="token punctuation">:</span> <span class="token string">'pneumonia'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'beijing'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'country'</span><span class="token punctuation">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>        <span class="token string">'population'</span><span class="token punctuation">:</span> <span class="token number">21540000</span><span class="token punctuation">,</span>        <span class="token string">'fact'</span><span class="token punctuation">:</span> <span class="token string">'Olympics'</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'shanghai'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'country'</span><span class="token punctuation">:</span> <span class="token string">'china'</span><span class="token punctuation">,</span>        <span class="token string">'population'</span><span class="token punctuation">:</span> <span class="token number">24240000</span><span class="token punctuation">,</span>        <span class="token string">'fact'</span><span class="token punctuation">:</span> <span class="token string">'import expo'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">for</span> city_name<span class="token punctuation">,</span> country_info <span class="token keyword">in</span> cities<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nCity name: "</span> <span class="token operator">+</span> city_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    country <span class="token operator">=</span> country_info<span class="token punctuation">[</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    population <span class="token operator">=</span> str<span class="token punctuation">(</span>country_info<span class="token punctuation">[</span><span class="token string">'population'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    fact <span class="token operator">=</span> country_info<span class="token punctuation">[</span><span class="token string">'fact'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tcountry:"</span> <span class="token operator">+</span> country<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tpopulation:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>population<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tfact:"</span> <span class="token operator">+</span> fact<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案4</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-4/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-4/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter5"><a href="#Chapter5" class="headerlink" title="Chapter5"></a>Chapter5</h1><p><em><em> 5-1 条件测试：</em></em>编写一系列条件测试；将每个测试以及你对其结果的预测和实际结果都打印出来。你编写的代码应类似于下面这样：</p><pre class="line-numbers language-python"><code class="language-python">car <span class="token operator">=</span> <span class="token string">"subaru"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Is car == 'subaru'? I predict True."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"subaru"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nIs car == 'audi'? I predict False."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"audi"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>□ 详细研究实际结果，直到你明白了它为何为True或False。</p><p>□ 创建至少10个测试，且其中结果分别为True和False的测试都至少有5个。</p><pre class="line-numbers language-python"><code class="language-python">car <span class="token operator">=</span> <span class="token string">"subaru"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Is car == 'subaru'? I predict True."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"subaru"</span><span class="token punctuation">)</span>car <span class="token operator">=</span> <span class="token string">"python"</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"python"</span><span class="token punctuation">)</span>car <span class="token operator">=</span> <span class="token string">"China"</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"China"</span><span class="token punctuation">)</span>car <span class="token operator">=</span> <span class="token string">"England"</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"England"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nIs car == 'audi'? I predict False."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"audi"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"bat"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"you"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>car <span class="token operator">==</span> <span class="token string">"America"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-2 更多的条件测试：</strong>你并非只能创建10个测试。如果你想测试做更多的比较，可再编写一些测试，并将它们加入到conditional_text.py中。对于下面列出的各种测试，至少编写一个结果为True和False的测试。</p><p>□ 检查两个字符串相等和不等。</p><p>□ 使用函数lower()测试。</p><p>□ 检查两个数字相等、不等、大于、小于、大于等于和小于等于。</p><p>□ 使用关键字and和or的测试。</p><p>□ 测试特定的值是否包含在列表中。</p><p>□ 测试特定的值是否未包含在列表中。</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"XY"</span><span class="token keyword">if</span> name <span class="token operator">!=</span> <span class="token string">"xy"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span class="token keyword">if</span> name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"xy"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span>  number1 <span class="token operator">=</span> <span class="token number">1</span>number2 <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">if</span> number1<span class="token operator">&lt;</span>number2<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"number1 is less than number2"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">5</span> <span class="token operator">></span> <span class="token number">4</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token number">5</span><span class="token operator">&lt;</span><span class="token number">5</span> <span class="token operator">or</span> <span class="token number">5</span><span class="token operator">></span><span class="token number">4</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span>chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">"a"</span> <span class="token keyword">in</span> chars<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Yes,it is"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"d"</span> <span class="token operator">not</span> <span class="token keyword">in</span> chars<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No,it's not"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-3 外星人颜色#1：</strong>假设在游戏中刚射杀了一个外星人，请创建一个名为alien_color的变量，并将其设置为’green’、’yellow’或’red’。</p><p>□ 编写一条if语句，检查外星人是否是绿色的；如果是，就打印一条消息，指出玩家获得了5个点。</p><p>□ 编写这个程序的两个版本，在一个版本中上述测试通过了，而在另一个版本中未通过（未通过测试时没有输出）。</p><pre class="line-numbers language-python"><code class="language-python">alien_color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token keyword">if</span> alien_color <span class="token operator">==</span> <span class="token string">"green"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 5 points!"</span><span class="token punctuation">)</span>alien_color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token keyword">if</span> alien_color <span class="token operator">==</span> <span class="token string">"green"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 5 points!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-4 外星人颜色#2：</strong>像练习5-3那样设置外星人的颜色，并编写一个if-else结构。</p><p>□ 如果外星人是绿色的，就打印一条消息，指出玩家因射杀该外星人获得了5个点。</p><p>□ 如果外星人不是绿色的，就打印一条消息，指出玩家获得了10个点。</p><p>□ 编写这个程序的两个版本，在一个版本中执行if代码块，而在另一个版本中执行else代码块。</p><pre class="line-numbers language-python"><code class="language-python">alien_color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token keyword">if</span> alien_color <span class="token operator">==</span> <span class="token string">"green"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 5 points!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 10 points!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">alien_color <span class="token operator">=</span> <span class="token string">"green"</span><span class="token keyword">if</span> alien_color <span class="token operator">==</span> <span class="token string">"green"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 5 points!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 10 points!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-5 外星人颜色#3：</strong>将练习5-4中的if-else结构改为if-elif-else结构。</p><p>□ 如果外星人是绿色的，就打印一条消息，指出玩家获得了5个点。</p><p>□ 如果外星人是黄色的，就打印一条消息，指出玩家获得了10个点。</p><p>□ 如果外星人是红色的，就打印一条消息，指出玩家获得了15个点。</p><p>□ 编写这个程序的三个版本，他们分别在外星人为绿色、黄色和红色时打印一条消息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># alien_color可以更改为red/green/yellow其中的任意一个</span>alien_color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token keyword">if</span> alien_color <span class="token operator">==</span> <span class="token string">"green"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 5 points!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> alien_color <span class="token operator">==</span> <span class="token string">"yellow"</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 10 points!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You just earn 15 points!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-6 人生的不同阶段：</strong>设置变量age的值，再编写一个if-elif-else结构，根据age的值判断处于人生的哪个阶段。</p><p>□ 如果一个人的年龄小于2岁，就打印一条消息，指出他是婴儿。</p><p>□ 如果一个人的年龄为2（含）~4岁，就打印一条消息，指出他正蹒跚学步。</p><p>□ 如果一个人的年龄为4（含）~13岁，就打印一条消息，指出他是儿童。</p><p>□ 如果一个人的年龄为13（含）~20岁，就打印一条消息，指出他是青少年。</p><p>□ 如果一个人的年龄为20（含）~65岁，就打印一条消息，指出他是成年人。</p><p>□ 如果一个人的年龄超过65（含）岁，就打印一条消息，指出他是老年人。</p><pre class="line-numbers language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">20</span><span class="token keyword">if</span> age<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are a baby!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are a toddler!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age<span class="token operator">&lt;</span><span class="token number">13</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are a child!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are a teenager!"</span><span class="token punctuation">)</span><span class="token keyword">elif</span> age<span class="token operator">&lt;</span><span class="token number">65</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are an adult!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You are elder!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-7 喜欢的水果：</strong>创建一个列表，其中包含你喜欢的水果，再编写一系列独立的if语句，检查列表中是否包含特定的水果。</p><p>□ 将该列表命名为favorite_fruite，并在其中包含三种水果。</p><p>□ 编写5条if语句，每条都检查某种水果是否包含在列表中，如果包含在列表中，就打印一条消息，如“You really like bananas！”。</p><pre class="line-numbers language-python"><code class="language-python">fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"bananas"</span><span class="token punctuation">,</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"peaches"</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token string">"bananas"</span> <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You really like bananas."</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"blueberries"</span> <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You really like blueberries."</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"kiwis"</span> <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You really like kiwis."</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"apple"</span> <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You really like apple."</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"peaches"</span> <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You really like peaches."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-8 以特殊方式跟管理员打招呼：</strong>创建一个至少包含5个用户的列表，且其中一个用户名为“admin”。想象你要编写代码，在每位用户登录网站后都打印一条问候消息。遍历用户名列表，并向每位用户打印一条问候消息。</p><p>□ 如果用户名为’admin’，就打印一条特殊的问候消息，如“Hello admin，would you like to see a status report?”。</p><p>□ 否则，打印一条普通的问候消息，如”Hello Eric,thank you for logging in again”。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"jone"</span><span class="token punctuation">,</span> <span class="token string">"mouse"</span><span class="token punctuation">,</span> <span class="token string">"marina"</span><span class="token punctuation">]</span><span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>    <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",would you like to see a status report?"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",thank you for logging in again."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-9 处理没有用户的情形：</strong>在为完成练习5-8编写的程序中，添加一条if语句，检查用户名列表是否为空。</p><p>□ 如果为空，就打印消息”We need to find some users!”。</p><p>□ 删除列表中的所有用户名，确定将打印正确的消息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 将列表的内容删除即可完成练习5-9</span>names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"jone"</span><span class="token punctuation">,</span> <span class="token string">"mouse"</span><span class="token punctuation">,</span> <span class="token string">"marina"</span><span class="token punctuation">]</span><span class="token keyword">if</span> names<span class="token punctuation">:</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>        <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",would you like to see a status report?"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",thank you for logging in again."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"We need to find some users!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-10 检查用户名：</strong>按下面的说明编写一个程序，模拟网站确保每位用户名都独一无二的方式。</p><p>□ 创建一个至少包含5个用户名的列表，并将其命名为current_users。</p><p>□ 再创建一个包含5个用户名的列表，将其命名为new_users，并确保其中有一两个用户名也包含在列表current_user中。</p><p>□ 遍历列表new_users，对于其中的每个用户名，都检查它是否已被使用。如果是这样，就打印一条消息，指出需要输入别的用户名；否则，打印一条消息，指出这个用户名未被使用。</p><p>□ 确保比较时不区分大小写；换句话说，如果用户名”John”已被使用，应拒绝用户名’JOHN’。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>current_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token string">"jone"</span><span class="token punctuation">,</span> <span class="token string">"mouse"</span><span class="token punctuation">,</span> <span class="token string">"marina"</span><span class="token punctuation">]</span>new_users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Tara"</span><span class="token punctuation">,</span> <span class="token string">"Kathleen"</span><span class="token punctuation">,</span> <span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token string">"Mouse"</span><span class="token punctuation">,</span> <span class="token string">"Douglas"</span><span class="token punctuation">]</span><span class="token keyword">for</span> new_user <span class="token keyword">in</span> new_users<span class="token punctuation">:</span>    <span class="token keyword">if</span> new_user<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> current_users<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> new_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",you need choose a new name!"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Luckily,"</span> <span class="token operator">+</span> new_user<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",you can use this name!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5-11 序数：</strong>叙述表示位置，如1st和2nd。大多数序数都是以th结尾，只有1、2和3例外。</p><p>□ 在一个列表中存储数字1-9.</p><p>□ 遍历这个列表。</p><p>□ 在循环中使用一个is-elif-else结构，以打印每个数字对应的序数。输出内容应为1st、2nd、3rd、4th、5th、6th、7th、8th和9th，但每个序数都独占一行。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>numbers <span class="token operator">=</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span>    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1st"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> number <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"2nd"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> number <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"3rd"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"th"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案2</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-2/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-2/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter3"><a href="#Chapter3" class="headerlink" title="Chapter3"></a>Chapter3</h1><p><strong>3-1 姓名：</strong>将一些朋友的姓名存储在一个列表中，并将其命名为names。依次访问该列表中的每个元素，从而将每个朋友的姓名都打印出来。</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chen xili'</span><span class="token punctuation">,</span><span class="token string">'xiao longgang'</span><span class="token punctuation">,</span><span class="token string">'cao zhongye'</span><span class="token punctuation">,</span><span class="token string">'ke zheng'</span><span class="token punctuation">,</span><span class="token string">'yuan jichen'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-2 问候语：</strong>继续使用练习3-1中的列表，但不打印每个朋友的姓名，而为每人打印一条消息。每条消息都包含相同的问候语，但抬头为相应朋友的姓名。</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'chen xili'</span><span class="token punctuation">,</span><span class="token string">'xiao longgang'</span><span class="token punctuation">,</span><span class="token string">'cao zhongye'</span><span class="token punctuation">,</span><span class="token string">'ke zheng'</span><span class="token punctuation">,</span><span class="token string">'yuan jichen'</span><span class="token punctuation">]</span>message0 <span class="token operator">=</span> <span class="token string">"Hello,next to meet you,"</span> <span class="token operator">+</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message0<span class="token punctuation">)</span>message1 <span class="token operator">=</span> <span class="token string">"Hello,next to meet you,"</span> <span class="token operator">+</span> name<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>message2 <span class="token operator">=</span> <span class="token string">"Hello,next to meet you,"</span> <span class="token operator">+</span> name<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span>message3 <span class="token operator">=</span> <span class="token string">"Hello,next to meet you,"</span> <span class="token operator">+</span> name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span>message4 <span class="token operator">=</span> <span class="token string">"Hello,next to meet you,"</span> <span class="token operator">+</span> name<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-3 自己的列表：</strong>想想你喜欢的通勤方式，如骑摩托车或开汽车，并创建一个包含多种通勤方式的列表。根据该列表打印一系列有关这些通勤方式的宣言，如“I would like to own a Honda motorcycle”。</p><pre class="line-numbers language-python"><code class="language-python">ways <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'car'</span><span class="token punctuation">,</span><span class="token string">'bicycle'</span><span class="token punctuation">,</span><span class="token string">'motorcycle'</span><span class="token punctuation">,</span><span class="token string">'subway'</span><span class="token punctuation">,</span><span class="token string">'bus'</span><span class="token punctuation">]</span>message0 <span class="token operator">=</span> <span class="token string">"I would like to won a Honda "</span> <span class="token operator">+</span> ways<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span>message1 <span class="token operator">=</span> <span class="token string">"I ofeten go to school by "</span> <span class="token operator">+</span> ways<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span>message2 <span class="token operator">=</span> <span class="token string">"I prefre "</span> <span class="token operator">+</span> ways<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"than "</span> <span class="token operator">+</span> ways<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" and "</span> <span class="token operator">+</span> ways<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-4 嘉宾名单：</strong>如果你可以邀请任何一个人共进晚餐（无论是在世的还是故去的），你会邀请那些人？请创建一个列表，其中包含至少3个你想邀请的人；然后，使用这个列表打印信息，邀请这些人来与你共进晚餐。</p><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"chen xili"</span><span class="token punctuation">,</span><span class="token string">"xiao longgang"</span><span class="token punctuation">,</span><span class="token string">"cao zhongye"</span><span class="token punctuation">,</span><span class="token string">"ke zheng"</span><span class="token punctuation">,</span><span class="token string">"zhou qichao"</span><span class="token punctuation">]</span>message0 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message0<span class="token punctuation">)</span>message1 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>message2 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span>message3 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span>message4 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-5修改嘉宾名单：</strong>你刚得知有位嘉宾无法赴约，因此需要另外邀请移位嘉宾。</p><p>□ 以完成练习3-4时编写的程序为基础，在程序末尾添加一条print语句，指出哪位嘉宾无法赴约。</p><p>□ 修改嘉宾名单，将无法赴约的嘉宾的姓名替换为新邀请的嘉宾的姓名。</p><p>□ 再次打印一系列消息，向名单的每位嘉宾发出邀请。</p><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"chen xili"</span><span class="token punctuation">,</span><span class="token string">"xiao longgang"</span><span class="token punctuation">,</span><span class="token string">"cao zhongye"</span><span class="token punctuation">,</span><span class="token string">"ke zheng"</span><span class="token punctuation">,</span><span class="token string">"zhou qichao"</span><span class="token punctuation">]</span>message1 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message2 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message3 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message4 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Because "</span> <span class="token operator">+</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" have an important meeting,so he can't have dinner with us."</span><span class="token punctuation">)</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"ke qiao"</span>message0 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-6 添加嘉宾：</strong>你刚找到了一个更大的餐桌，可容纳更多的嘉宾。请想想你还想邀请哪三位嘉宾。</p><p>□ 以完成练习 3-4 或练习3-5时编写的程序为基础，在程序末尾添加一条print语句，指出你找到了一个更大的餐桌。</p><p>□ 使用insert()将一位新嘉宾添加到名单开头。</p><p>□ 使用insert()将另一位新嘉宾添加到名单中间。</p><p>□ 打印一系列消息，向名单的每位嘉宾发出邀请。</p><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"chen xili"</span><span class="token punctuation">,</span><span class="token string">"xiao longgang"</span><span class="token punctuation">,</span><span class="token string">"cao zhongye"</span><span class="token punctuation">,</span><span class="token string">"ke zheng"</span><span class="token punctuation">,</span><span class="token string">"zhou qichao"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Everybody,I found a bigger tabble."</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"chen xiaopeng"</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"wu mingze"</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"liang xuan"</span><span class="token punctuation">)</span>message0 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message1 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message2 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message3 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message4 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message5 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message6 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message7 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message7<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-7 缩减名单：</strong>你刚得知新购买的餐桌无法及时送达，因此只能邀请两位嘉宾。</p><p>□ 以完成练习3-6时编写的程序为基础，在程序末尾添加一行代码，打印一条你只能邀请两位嘉宾共进晚餐的消息。</p><p>□ 使用pop()不断地删除名单中的嘉宾，直到只有两位嘉宾为止。每次从名单中弹出一位嘉宾时都打印一条消息，让该嘉宾知悉你很抱歉，无法邀请他来共进晚餐。</p><p>□ 对于余下的两位嘉宾中的每一位，都打印一条消息，指出他依然在受邀人之列。</p><p>□ 使用del将最后两位嘉宾从名单中删除，让名单变成空的。打印该名单，核实程序结束时名单确实是空的。</p><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"chen xili"</span><span class="token punctuation">,</span> <span class="token string">"xiao longgang"</span><span class="token punctuation">,</span> <span class="token string">"cao zhongye"</span><span class="token punctuation">,</span><span class="token string">"ke zheng"</span><span class="token punctuation">,</span><span class="token string">"zhou qichao"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Everybody,I found a bigger tabble."</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"chen xiaopeng"</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"wu mingze"</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"liang xuan"</span><span class="token punctuation">)</span>message0 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message1 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message2 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message3 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message4 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message5 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message6 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message7 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message7<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,everyone,because my table that I bought yesterday can't delivery,so I just can invite two guest."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token punctuation">)</span><span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-8 放眼世界：</strong>想出至少5个你渴望去旅游的地方。</p><p>□  将这些地方存储在一个列表中，并确保其中的元素不是按字母顺序排列的。</p><p>□  按原始排列顺序打印该列表。不要考虑输出是否整洁的问题，只管打印原始Python列表。</p><p>□  使用sorted()按字母顺序打印这个列表，同时不要修改它。</p><p>□  再次打印该列表，核实排列顺序未变。</p><p>□ 使用sorted()按与字母顺序相反的顺序打印这个列表，同时不要修改它。</p><p>□ 再次打印该列表，核实排列顺序未变。</p><p>□ 使用reverse()修改列表元素的排列顺序。打印该列表，核实排列顺序确实变了。</p><p>□ 使用reverse()再次修改列表元素的排列顺序。打印该列表，核实已恢复到原来的排列顺序。</p><p>□ 使用sort()修改该列表，使其元素按字母顺序排列。打印该列表，核实排列顺序确实变了。</p><p>□ 使用sort()修改该列表，使其元素按与字母顺序相反的顺序列表。打印该列表，核实排列顺序确实变了。</p><pre class="line-numbers language-python"><code class="language-python">places <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"wuhan"</span><span class="token punctuation">,</span> <span class="token string">"beijing"</span><span class="token punctuation">,</span> <span class="token string">"shanghai"</span><span class="token punctuation">,</span> <span class="token string">"sichuan"</span><span class="token punctuation">,</span> <span class="token string">"zhejiang"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Original order:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>places<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nAlphabetical:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>places<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nOriginal order again:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>places<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nReverse alphabetical:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>places<span class="token punctuation">,</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nOriginal order again:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>places<span class="token punctuation">)</span>places<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>places<span class="token punctuation">)</span>places<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>places<span class="token punctuation">)</span>places<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>places<span class="token punctuation">)</span>places<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>places<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-9 晚餐嘉宾：</strong>在完成练习3-4~练习3-7时编写的程序之一中，使用len()打印一条信息，指出你邀请了多少位嘉宾来与你共进晚餐。</p><pre class="line-numbers language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"chen xili"</span><span class="token punctuation">,</span> <span class="token string">"xiao longgang"</span><span class="token punctuation">,</span> <span class="token string">"cao zhongye"</span><span class="token punctuation">,</span> <span class="token string">"ke zheng"</span><span class="token punctuation">,</span> <span class="token string">"zhou qichao"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Everybody,I found a bigger tabble."</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"chen xiaopeng"</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"wu mingze"</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"liang xuan"</span><span class="token punctuation">)</span>message0 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message1 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message2 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message3 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message4 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message5 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message6 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span>message7 <span class="token operator">=</span> names<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message4<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message5<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message6<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>message7<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,everyone,because my table that I bought yesterday can't delivery,so I just can invite two guest."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span>guest <span class="token operator">=</span> names<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,"</span> <span class="token operator">+</span> guest<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",there is no room at the table."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",please come to dinner."</span><span class="token punctuation">)</span><span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">del</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-10 尝试使用各个函数：</strong>想象可存储到列表中的东西，如山岳、河流、国家、城市、语言或你喜欢的任何东西。编写一个程序，在其中创建一个包含这些元素的列表，然后，对于本章介绍的每个函数，都至少使用一次来处理这个列表。</p><pre class="line-numbers language-python"><code class="language-python">countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">,</span> <span class="token string">"America"</span><span class="token punctuation">,</span> <span class="token string">"England"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Canada"</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"England"</span><span class="token punctuation">)</span>countries<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token keyword">del</span> countries<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>the_best_stronger <span class="token operator">=</span> countries<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I love "</span> <span class="token operator">+</span> the_best_stronger <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3-11 有意引发错误：</strong>如果你还没有在程序中遇到过索引错误，就尝试引发一个这种错误。在你的一个程序中，修改其中的索引，以引发索引错误。关闭程序前，务必消除这个错误。</p><pre class="line-numbers language-python"><code class="language-python">countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">,</span> <span class="token string">"America"</span><span class="token punctuation">,</span> <span class="token string">"England"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Canada"</span>   <span class="token comment" spellcheck="true"># 列表中没有11个元素，错误索引</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"England"</span><span class="token punctuation">)</span>countries<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token keyword">del</span> countries<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>the_best_stronger <span class="token operator">=</span> countries<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I love "</span> <span class="token operator">+</span> the_best_stronger <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错为：</p><pre class="line-numbers language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"F:/学习资料/python_work/作业/Python编程从入门到实践/Chapter3/text3-10.py"</span><span class="token punctuation">,</span> line <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    countries<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Canada"</span>IndexError<span class="token punctuation">:</span> list assignment index out of range<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>修改后的代码：</p><pre class="line-numbers language-python"><code class="language-python">countries <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"China"</span><span class="token punctuation">,</span> <span class="token string">"America"</span><span class="token punctuation">,</span> <span class="token string">"England"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>countries<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Canada"</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"England"</span><span class="token punctuation">)</span>countries<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"Japan"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token keyword">del</span> countries<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>the_best_stronger <span class="token operator">=</span> countries<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I love "</span> <span class="token operator">+</span> the_best_stronger <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"America"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span>countries<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>countries<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案3</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-3/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-3/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter4"><a href="#Chapter4" class="headerlink" title="Chapter4"></a>Chapter4</h1><p><strong>4-1 比萨：</strong>想出至少三种你喜欢的比萨，将其名称存储在一个列表中，再使用for循环将每种比萨的名称都打印出来。</p><p>□ 修改这个for循环，使其打印包含比萨名称的句子，而不仅仅是比萨的名称。对于每种比萨，都显示一行输出，如“I like pepperoni pizza”。</p><p>□ 在程序末尾添加一行代码，它不在for循环中，指出你有多喜欢比萨。输出应包含针对每种比萨的信息，还有一个总结性句子，如“I really love pizza！”。</p><pre class="line-numbers language-python"><code class="language-python">pizzas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pepperoni"</span><span class="token punctuation">,</span> <span class="token string">"meat"</span><span class="token punctuation">,</span> <span class="token string">"fruit"</span><span class="token punctuation">]</span><span class="token keyword">for</span> pizza <span class="token keyword">in</span> pizzas<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>pizza<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I like "</span> <span class="token operator">+</span> pizza <span class="token operator">+</span> <span class="token string">" pizza."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I really love pizza!"</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-2 动物：</strong>想出至少三种有共同特征的动物将这些动物的名称存储在一个列表中，再使用for循环将每种动物的名称都打印出来。</p><p>□ 修改这个程序，使其针对每种动物都打印一个句子，如“A dog would make a great pet”。</p><p>□ 在程序末尾添加一行代码，指出这些动物的共同之处，如打印诸如“Any of these animals would make a grea pet！”这样的句子。</p><pre class="line-numbers language-python"><code class="language-python">animals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pig"</span><span class="token punctuation">,</span> <span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"cat"</span><span class="token punctuation">]</span><span class="token keyword">for</span> animal <span class="token keyword">in</span> animals<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A "</span> <span class="token operator">+</span> animal <span class="token operator">+</span> <span class="token string">" would make a great pet.\n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Any of these animals would make a great pet!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-3  数到20：</strong>使用一个for循环打印数字1~20（含）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4-4 一百万：</strong>创建一个列表，其中包含数字1~1 000 000，再使用一个for循环将这些数字打印出来（如果输出的时间太长，按Ctrl + C停止输出，或关闭输出窗口）。</p><pre class="line-numbers language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-5 计算1~1 000 000的总和：</strong>创建一个列表，其中包含数字1~1 000 000，再使用min()和max()核实该列表确实是从1开始，到1 000 000结束的。另外，对这个列表调用函数sum()，看看Python将一百万个数字相加需要多长时间。</p><pre class="line-numbers language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span>value <span class="token keyword">for</span> value <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000001</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-6 奇数：</strong>通过给函数range()指定第三个参数来创建一个列表，其中包含1~20的奇数：再使用一个for循环将这些数字都打印出来。</p><pre class="line-numbers language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span>number <span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-7 3的倍数：</strong>创建一个列表，其中包含3~30内能被3整除的数字：再利用一个for循环将这个列表中的数字都打印出来。</p><pre class="line-numbers language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span>number <span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4-8 立方：</strong>将同一个数字乘三次称为立方。例如，在Python中，2的立方用2**3表示。请创建一个列表，其中包含前10个整数（即1~10）的立方，再使用一个for循环将这些立方数都打印出来。</p><pre class="line-numbers language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span>number<span class="token operator">**</span><span class="token number">3</span> <span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>4-9 立方解析：</strong>使用列表解析生成一个列表，其中包含前十个整数的立方。</p><pre class="line-numbers language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-10 切片：</strong>选择你在本章编写的一个程序，在末尾添加几行代码，以完成如下任务。</p><p>□ 打印信息“The first three item in the list are：”再使用切片来打印列表中间的三个元素。</p><p>□ 打印信息“Three items form the middle of the list are：”，再使用切片来打印列表中间的三个元素。</p><p>□ 打印消息“The last three items in the list are：”，再使用切片来打印列表末尾的三个元素。</p><pre class="line-numbers language-python"><code class="language-python">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> number <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The first three items in the list are:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Three items from the middle of the list are:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The last three items in the list are:"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>numbers<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-11 你的比萨和我的比萨L：</strong>在你为完成练习4-1而编写的程序中，创建比萨列表的副本，并将其存储到变量friend_pizza中，再完成如下任务。</p><p>□ 在原来的比萨列表中添加另一种比萨。</p><p>□ 在列表friend_pizza中添加一种比萨。</p><p>□ 核实你有两个不同的列表。为此，打印消息“My favorite pizzas are：”，再使用一个for循环来打印第一个列表；打印消息“My friend‘s favorite pizzas are：”，再使用一个for循环来打印第二个列表。核实新增的比萨被添加到了正确的列表中。</p><pre class="line-numbers language-python"><code class="language-python">pizzas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pepperoni"</span><span class="token punctuation">,</span> <span class="token string">"meat"</span><span class="token punctuation">,</span> <span class="token string">"fruit"</span><span class="token punctuation">]</span><span class="token keyword">for</span> pizza <span class="token keyword">in</span> pizzas<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>pizza<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I like "</span> <span class="token operator">+</span> pizza <span class="token operator">+</span> <span class="token string">"pizza."</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I really love pizza!"</span><span class="token punctuation">)</span>  friend_pizzas <span class="token operator">=</span> pizzas<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>friend_pizzas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"bat"</span><span class="token punctuation">)</span>pizzas<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"shit"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My favorite pizzas are:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> pizza <span class="token keyword">in</span> pizzas<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>pizza<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My friend's favorite pizzas are:"</span><span class="token punctuation">)</span><span class="token keyword">for</span> pizza <span class="token keyword">in</span> friend_pizzas<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>pizza<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-12 使用多个循环：</strong>在本节中，为节省篇幅，程序foods.py的每个版本都没有使用for循环来打印列表。请选择一个版本的foods.py，在其中编写两个for循环，将各个食品列表都打印出来。</p><pre class="line-numbers language-python"><code class="language-python">my_foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pizza"</span><span class="token punctuation">,</span> <span class="token string">"falafel"</span><span class="token punctuation">,</span> <span class="token string">"carrot cake"</span><span class="token punctuation">]</span>friend_foods <span class="token operator">=</span> my_foods<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>my_foods<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"cannoil"</span><span class="token punctuation">)</span>friend_foods<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"ice cream"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My favorite foods are:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>my_foods<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nMy friend's favorite foods are:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>friend_foods<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"My'foods"</span><span class="token punctuation">)</span><span class="token keyword">for</span> pizza <span class="token keyword">in</span> my_foods<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>pizza<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Friend'foods"</span><span class="token punctuation">)</span><span class="token keyword">for</span> food <span class="token keyword">in</span> friend_foods<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4-13 自助餐：</strong>有一家自助式餐馆，只提供五种简单的食品。请想出五种简单的食品，并将其存储在一个元组中。</p><p>□ 使用一个for循环将该餐馆提供的五种食品都打印出来。</p><p>□ 尝试修改其中的一个元素，核实Python确实会拒绝你这样做。</p><p>□ 餐馆调整了菜单，替换了它提供的其中两种食品。请编写一个这样的代码块：给元组变量赋值，并使用一个for循环将新元组的每个元素都打印出来。</p><pre class="line-numbers language-python"><code class="language-python">foods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"pizza"</span><span class="token punctuation">,</span> <span class="token string">"fruit"</span><span class="token punctuation">,</span> <span class="token string">"meat"</span><span class="token punctuation">,</span> <span class="token string">"tea"</span><span class="token punctuation">,</span> <span class="token string">"coffee"</span><span class="token punctuation">)</span><span class="token keyword">for</span> food <span class="token keyword">in</span> foods<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span>foods <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"pizza"</span><span class="token punctuation">,</span> <span class="token string">"snake"</span><span class="token punctuation">,</span> <span class="token string">"bat"</span><span class="token punctuation">,</span> <span class="token string">"tea"</span><span class="token punctuation">,</span> <span class="token string">"coffee"</span><span class="token punctuation">)</span><span class="token keyword">for</span> food <span class="token keyword">in</span> foods<span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span>food<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案1</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-1/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-1/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>​        参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter1"><a href="#Chapter1" class="headerlink" title="Chapter1"></a>Chapter1</h1><p><strong>2-1 简单消息：</strong>将一条信息存储到变量中，再将其打印出来。</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">'chen xili'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>2-2 多条简单消息：</strong>将一条信息存储到变量中，将其打印出来；再将变量的值修改为一条新消息，并将其打印出来。</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"Chen"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">"Xili"</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-3 个性化消息：</strong>将用户的姓名存到一个变量中，并向该用户显示一条信息。显示的消息应非常简单，如”Hello Eric,would you like to learn some Python today?”。</p><pre class="line-numbers language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"eric"</span><span class="token keyword">print</span><span class="token punctuation">(</span>"Hello <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>would you like to learn\ some Python today?"<span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2-4 调整名字的大小写：</strong>将一个人名存储到一个变量中，再以小写、大写和首字母大写的方式显示这个人名。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>name <span class="token operator">=</span> <span class="token string">'chen xili'</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印小写</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印大写</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 打印首字母大写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-5 名言：</strong>找一句你钦佩的名人说的名言，将这个名人的姓名和他的名言打印出来。输出应类似于下面这样（包括引号）：</p><p>Albert Einstein once said, “A person who never made a mistake never tried anything new.”</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Albert Einstein once said, "A person who never '</span>      <span class="token string">'made a mistake never tried anything new."'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-6 名言2:</strong> 重复练习2-5，但将名人的姓名存储在变量famous_person中，再创建要显示的信息，并将存储在变量message中，然后打印这条消息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>famous_person <span class="token operator">=</span> <span class="token string">'Albert Einstein'</span>message <span class="token operator">=</span> famous_person <span class="token operator">+</span> <span class="token string">' once said, "A person who never made '</span> \                          <span class="token string">'a mistake never tried anything new."'</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-7 剔除人名中的空白：</strong>存储一个人名，并在其开头和末尾都包含一些空白字符。务必至少使用字符组合”\t”和”\n”各一次。</p><p>​    打印这个人名，以显示其开头和末尾的空白。然后，分别使用剔除函数lstrip()、rstrip（）和strip()对人名进行处理，并将结果打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>name <span class="token operator">=</span> <span class="token string">"\tChen xili\n"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Unmodified:"</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 打印未剔除的</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nUsing lstrip():"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印剔除左边的</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nUsing rstrip():"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 打印剔除右边的</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nUsing strip():"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印剔除两边的</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-8 数字8：</strong>编写4个表达式，它们分别使用加法、减法、乘法和除法运算，但结果都是数字8.为使用print语句来显示结果，务必将这些表达式用括号括起来，也就是说，你应该编写4行类似于下面的代码：</p><p><code>print(5 + 3)</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 加法运算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 减法运算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 乘法运算</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 除法运算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-9 最喜欢的数字：</strong>将你最喜欢的数字存储在一个变量中，再使用这个变量创建一条消息，指出你最喜欢的数字，然后将这条消息打印出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>favorite_num <span class="token operator">=</span> <span class="token number">259</span>message <span class="token operator">=</span> <span class="token string">"My favorite number is "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>favorite_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-10 添加注释：</strong>选择你编写的两个程序，在每个程序中都至少添加一条注释。如过程序太简单，是在没有什么需要说明的，就在程序文件开口加上你的姓名和当前日期，再用一句话阐述程序的功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>famous_person <span class="token operator">=</span> <span class="token string">'Albert Einstein'</span><span class="token comment" spellcheck="true"># 将内容合并</span>message <span class="token operator">=</span> famous_person <span class="token operator">+</span> <span class="token string">' once said, "A person who never made '</span> \                          <span class="token string">'a mistake never tried anything new."'</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 获取喜欢的数字</span>favorite_num <span class="token operator">=</span> <span class="token number">259</span>message <span class="token operator">=</span> <span class="token string">"My favorite number is "</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>favorite_num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span><span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2-11 Python之禅：</strong>在Python终端会话执行命令import this，并粗略地浏览一下其他的指导原则。</p><pre><code>Beautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren&#39;t special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you&#39;re Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it&#39;s a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let&#39;s do more of those!</code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python第二次上机实习</title>
      <link href="2020/07/12/python-di-er-ci-shang-ji-shi-xi/"/>
      <url>2020/07/12/python-di-er-ci-shang-ji-shi-xi/</url>
      
        <content type="html"><![CDATA[<p>1.用户任意输入某年某月某日，判断这一天是这一年的第几天？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 先让用户分别输入年月日</span>year <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"年："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>mouth <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"月："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>day <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"日："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分别有两个列表分别存储平年和闰年中这一年到该月最后一天共有多少天</span><span class="token comment" spellcheck="true"># mouth1为闰年，mouth2为平年</span>mouth1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">,</span> <span class="token number">274</span><span class="token punctuation">,</span> <span class="token number">305</span><span class="token punctuation">,</span> <span class="token number">335</span><span class="token punctuation">,</span> <span class="token number">336</span><span class="token punctuation">]</span>mouth2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span> <span class="token number">273</span><span class="token punctuation">,</span> <span class="token number">304</span><span class="token punctuation">,</span> <span class="token number">334</span><span class="token punctuation">,</span> <span class="token number">365</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 根据闰年还是平年判断这一天是这一年的第几天</span><span class="token keyword">if</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> mouth1<span class="token punctuation">[</span>mouth<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> day<span class="token keyword">else</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> mouth2<span class="token punctuation">[</span>mouth<span class="token number">-1</span><span class="token punctuation">]</span> <span class="token operator">+</span> day<span class="token comment" spellcheck="true"># 输出这一天是这一年的第几天</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这一天是这一年的第{}天"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>某企业发放的奖金根据利润提成。当利润I</li></ol><p>（1）低于或等于10万元时，奖金可提10%；</p><p>（2）利润高于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%； </p><p>（3）20万到40万之间时，高于20万元的部分，可提成5%； </p><p>（4）40万到60万之间时，高于40万元的部分，可提成3%； </p><p>（5）60万到100万之间时，高于60万元的部分，可提成1.5%；</p><p>（6）高于100万元时，超过100万元的部分按1%提成。</p><p>要求用户从键盘输入当月利润I，求应发放奖金总数？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 让用户输入当月利润I</span>I <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入当月利润（单位：万元）:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据不同等级计算利润</span><span class="token keyword">if</span> I <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>    prize <span class="token operator">=</span> I <span class="token operator">*</span> <span class="token number">10000</span> <span class="token operator">*</span> <span class="token number">0.1</span><span class="token keyword">elif</span> I <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>    prize <span class="token operator">=</span> <span class="token number">10000</span> <span class="token operator">+</span> <span class="token punctuation">(</span>I<span class="token number">-10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">0.075</span><span class="token keyword">elif</span> I <span class="token operator">&lt;</span> <span class="token number">40</span><span class="token punctuation">:</span>    prize <span class="token operator">=</span> <span class="token number">17500</span> <span class="token operator">+</span> <span class="token punctuation">(</span>I<span class="token number">-20</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">0.05</span><span class="token keyword">elif</span> I <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>    prize <span class="token operator">=</span> <span class="token number">27500</span> <span class="token operator">+</span> <span class="token punctuation">(</span>I<span class="token number">-40</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">0.03</span><span class="token keyword">elif</span> I <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">:</span>    prize <span class="token operator">=</span> <span class="token number">33500</span> <span class="token operator">+</span> <span class="token punctuation">(</span>I<span class="token number">-60</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">0.015</span><span class="token keyword">else</span><span class="token punctuation">:</span>    prize <span class="token operator">=</span> <span class="token number">39500</span> <span class="token operator">+</span> <span class="token punctuation">(</span>I<span class="token number">-100</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10000</span><span class="token operator">*</span><span class="token number">0.01</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"应发放的奖金总数为：{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>prize<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>编写函数判断51-150之间有多少个素数，并输出所有素数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 创建一个空列表存储质数</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">151</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 依次判断51~150有哪些质数</span>    a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> a <span class="token operator">&lt;</span> i<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            a <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> i<span class="token punctuation">:</span>        numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 依次输出列表中的质数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"列表中的质数为："</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>4.用户任意输入一个1000以内的正整数，编写函数实现因素分解并打印到屏幕上。如用户输入90，则打印90=2*3*3*5。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 让用户输入一个1000以内的整数</span>number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个1000以内的整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> number <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的数大于1000，应该输入1000以内的整数。"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 先输出number=</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}="</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 从2开始作为除数</span>i <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 获取该数的每个因子，并输出</span>    <span class="token keyword">if</span> number<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> number<span class="token operator">==</span>i<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果整数与i相等了，直接输出</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> number<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 能够被整除，i就是一个因数，让数改变为除以i后的数</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        number <span class="token operator">=</span> number <span class="token operator">/</span> i    <span class="token keyword">else</span><span class="token punctuation">:</span>        i<span class="token operator">+=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li><p>键盘输入字符s，按要求把 s 输出到屏幕，</p><p>格式要求：宽度为20个字符，等号字符=填充，居中对齐。如果输入字符串超过 20 位，则全部输出。例如：键盘输入字符串s为“PYTHON” ，屏幕输出=======PYTHON=======</p></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 获取字符后直接居中显示，用=在两边填充</span>s <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入字符s："</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>用户输入一组学生的姓名、性别、年龄等信息，采用空格分隔，每人一行，空行回车结束录入； </li></ol><p>示例格式如下：</p><p>张三 男 23</p><p>李四 女 21</p><p>王五 男 18</p><p>计算并输出所有学生的平均年龄（保留2位小数）和其中男性人数，输出格式为：平均年龄是20.67，男性人数是2。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 获取用户输入的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"每输入完一个学生的信息，按回车后输入下一位同学的信息，输入完毕后输入空格后回车退出输入。"</span><span class="token punctuation">)</span>message <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入学生的姓名、性别、年龄等信息，采用空格分隔："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始时总年龄为0，平均年龄为0，男性人数为0，学生个数为0</span>sumAge <span class="token operator">=</span> <span class="token number">0</span>averageAge <span class="token operator">=</span> <span class="token number">0</span>sumMan <span class="token operator">=</span> <span class="token number">0</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 使用while循环，当信息有效时，运行循环，如果输入的是空格，那么message为False退出循环</span><span class="token keyword">while</span> message<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 每当获取一个人的信息，学生数量就加1</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 用列表存储用户输入的信息</span>    ls <span class="token operator">=</span> message<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 统计总年龄</span>    sumAge <span class="token operator">=</span> sumAge <span class="token operator">+</span> int<span class="token punctuation">(</span>ls<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果为男性，男性数量就加1</span>    <span class="token keyword">if</span> ls<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"男"</span><span class="token punctuation">:</span>        sumMan <span class="token operator">=</span> sumMan<span class="token operator">+</span><span class="token number">1</span>    message <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>averageAge <span class="token operator">=</span> sumAge<span class="token operator">/</span>i<span class="token comment" spellcheck="true"># 输出平均年龄与男性数量</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"平均年龄是{:.2f}男性人数是{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>averageAge<span class="token punctuation">,</span> sumMan<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.（选做）有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到三个月后每个月又生一对兔子。加入兔子都不死，问12个月后的兔子总数是多少？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token triple-quoted-string string">"""问题分析：通过分析每个月的兔子数量可得出以下数学规律：    本月兔子数量=上上个月兔子数量+上个月兔子数量（为斐波那契数列）"""</span><span class="token comment" spellcheck="true"># 前两个月兔子数量没有变换都为1</span>mouth1 <span class="token operator">=</span> <span class="token number">1</span>mouth2 <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 先设总数为0</span>mouth3 <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 根据斐波那契数列的规律依次计算，直至第12个月</span><span class="token comment" spellcheck="true"># 每循环一次，本月兔子的数量变为上月兔子的数量</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mouth3 <span class="token operator">=</span> mouth1 <span class="token operator">+</span> mouth2    mouth1 <span class="token operator">=</span> mouth2    mouth2 <span class="token operator">=</span> mouth3<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第12个月的兔子对量为：{}，兔子数量为{}。"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>mouth3<span class="token punctuation">,</span> mouth3<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机实习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python第一次上机实习</title>
      <link href="2020/07/12/python-di-yi-ci-shang-ji-shi-xi/"/>
      <url>2020/07/12/python-di-yi-ci-shang-ji-shi-xi/</url>
      
        <content type="html"><![CDATA[<p>1.用户输入a、b两个列表，计算两个列表对应元素的乘积的累加和。如果列表长度不一致，则以较短的列表为主，忽略较长列表的其他元素。如列表a=[1,2,3]，列表b=[4,5,6,7]，则对应元素乘积的累加和为1<em>4+2</em>5+3*6=32。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 分别让用户输入两个列表a和b，初始和为0</span>a <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入列表1："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入列表2："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 计算两列表对应元素的乘积的累加</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> zip<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">+=</span> i<span class="token operator">*</span>j<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.随机生成20个在1（含）到999（含）之间的随机数，每个随机数后跟随一个逗号进行分隔，按照升序输出到屏幕上。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token comment" spellcheck="true"># 创建空列表存储数据</span>lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 在1~999随机生成20个数据，并放到lst列表中</span>    a <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span>    lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将列表中的升序排列的数据依次打印出，并使用逗号分隔</span>lst<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> lst<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">','</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li><p>要求用户输入若干常见的手机品牌，以字符串形式存入一个列表，并随机选择一个手机品牌输出到屏幕上。如[“华为”,”苹果”,”诺基亚”,”OPPO”,”小米”]，随机输出为“小米”。 </p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> random <span class="token keyword">import</span> choice<span class="token comment" spellcheck="true"># 让用户输入一个列表</span>phones <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个手机品牌的列表："</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 随机输出一个手机品牌</span><span class="token keyword">print</span><span class="token punctuation">(</span>choice<span class="token punctuation">(</span>phones<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>用户输入某毕业班各个同学就业的行业名称，行业名称之间用空格间隔（回车结束输入）。要求统计各行业就业的学生数量，按数量从低到到方式输出。</p></li></ol><p>如输入：交通 金融 计算机 交通 计算机 计算机，</p><p>输出格式为（其中冒号为英文冒号）</p><p>计算机: 3 </p><p>交通: 2 </p><p>金融: 1</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 让用户分别输入每个同学就业的行业名称</span>jobsName <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入各个同学行业名称，行业名称之间用空格间隔(按回车结束输入）："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将用户输入的行业分隔后存储到列表中</span>jobsName <span class="token operator">=</span> jobsName<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建空字典用于存储行业以及行业对应的人数</span>result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> jobsName<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 计算每个数量的人数，每个行业（键）对应的值为相应的个数</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> jobsName<span class="token punctuation">.</span>count<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将字典中的值放在一个列表中，并且按照数量进行排序</span>lst <span class="token operator">=</span> list<span class="token punctuation">(</span>result<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lst<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 按照数量的排序，依次输出行业及对应的人数</span><span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> lst<span class="token punctuation">[</span>k<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.中国南北朝时期（公元5世纪）的数学著作《孙子算经》卷下第二十六题，叫做“物不知数”问题，原文如下：“有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？”。即，一个整数除以三余二，除以五余三，除以七余二，求这个整数是多少？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 使用枚举法依次测试每个整数，直到出现结果</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true"># 每个数据依次尝试，先让n除以三余二</span><span class="token keyword">while</span> n <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>    n <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 满足除以三余二后，每次让n增加3（确保上面的条件仍然满足）来满足除以五余三</span><span class="token keyword">while</span> n <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>    n <span class="token operator">+=</span> <span class="token number">3</span><span class="token comment" spellcheck="true"># 满足除以五余三后，每次让n增加15（确保前面两个条件仍然满足）来满足除以七余二</span><span class="token keyword">while</span> n <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>    n <span class="token operator">+=</span> <span class="token number">15</span><span class="token comment" spellcheck="true"># 输出结果</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这个整数的值为：{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.（选做）猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第 10 天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少个桃子？</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 倒这考虑，前一天的桃子数量为当天的数量加1后乘以二即可</span><span class="token comment" spellcheck="true"># 根据题目，第10天早上的桃子为1个，即第九天吃完还剩1个</span>day <span class="token operator">=</span> <span class="token number">10</span>number <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 倒着计算9次即可计算出第一天摘的桃子数量</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>day<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 前一天的个数为当前天的+1后*2</span>    number <span class="token operator">=</span> <span class="token punctuation">(</span>number<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python上机实习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 上机实习 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法5</title>
      <link href="2020/07/12/python-ji-chu-yu-fa-5/"/>
      <url>2020/07/12/python-ji-chu-yu-fa-5/</url>
      
        <content type="html"><![CDATA[<p>参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>​    由于时间紧迫，故只整理语法，没有写实例，在学习或复习过程中每个语法点都应搭配合适的例子进行练习。</p><h1 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h1><p>1.open（）函数的文件打开方式</p><table><thead><tr><th>模式</th><th>说明</th></tr></thead><tbody><tr><td>r</td><td>读模式（默认模式，可省略），如果文件不存在则抛出异常</td></tr><tr><td>w</td><td>写模式，如果文件已存在，先清空原有内容</td></tr><tr><td>x</td><td>写模式，创建新文件，如果文件已存在则抛出异常</td></tr><tr><td>a</td><td>追加模式，不覆盖文件的原有内容</td></tr><tr><td>b</td><td>二进制模式（可与其他模式组合使用），使用二进制模式打开文件时不允许指定encoding参数</td></tr><tr><td>t</td><td>文本模式（默认模式，可省略）</td></tr><tr><td>+</td><td>读、写模式（可与其他模式组合使用）</td></tr></tbody></table><p>2.文件对象常用方法</p><table><thead><tr><th>方法</th><th>功能说明</th></tr></thead><tbody><tr><td>open()</td><td>以指定模式打开指定文件并创建文件对象</td></tr><tr><td>close()</td><td>把缓冲区的内容写入文件，同时关闭文件，并释放文件对象</td></tr><tr><td>read([size])</td><td>从文本文件中读取size个字符作为结果返回，或从二进制文件中读取指定数量的字节并返回，如果省略size则表示读取所有内容</td></tr><tr><td>readline()</td><td>从文本读取一行内容作为结果返回</td></tr><tr><td>readlines()</td><td>把文本文件中的每行文本作为一个字符串存入列表中，返回该列表，对于大文件会占用较多内存，不建议使用</td></tr><tr><td>seek(offset[,whence])</td><td>把文件指针移动到指定位置，offset表示相对于whence的偏移量。whence为0表示从文件头开始计算，1表示从当前位置开始计算，2表示从文件尾开始计算，默认为0</td></tr><tr><td>tell()</td><td>返回文件指针的当前位置</td></tr><tr><td>write(s)</td><td>把字符串s的内容写入文件</td></tr><tr><td>writelines(s)</td><td>把字符串列表写入文件文本，不添加换行符</td></tr></tbody></table><h1 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h1><p>1.os模块常用函数</p><table><thead><tr><th>函数</th><th>功能说明</th></tr></thead><tbody><tr><td>chdir(path)</td><td>把path设为当前工作目录</td></tr><tr><td>chmod(path, mode, *, dir_fd=None, follow_symlinks=True)</td><td>改变文件的访问权限</td></tr><tr><td>curdir</td><td>当前文件夹</td></tr><tr><td>listdir(path)</td><td>返回path目录下的文件和目录列表</td></tr><tr><td>mkdir(path[, mode=0777])</td><td>创建目录，要求上级目录必须存在</td></tr><tr><td>makedirs(path1/path2···,mode=511)</td><td>创建多级目录，会根据需要自动创建中间缺失的目录</td></tr><tr><td>rmdir(path)</td><td>删除目录，目录中不能有文件或子文件夹</td></tr><tr><td>remove(path)</td><td>删除指定的文件，要求用户拥有删除文件的权限，并且文件没有只读或其他特殊属性</td></tr><tr><td>removedirs(path1/path2···)</td><td>删除多级目录，目录中不能有文件</td></tr><tr><td>rename(src, dst)</td><td>重命名文件或目录，可以实现文件的移动，若目标文件已存在则抛出异常，并且不能跨越磁盘或分区</td></tr><tr><td>replace(old, new)</td><td>重命名文件或目录，若目标文件已存在则直接覆盖，不能跨越磁盘或分区</td></tr><tr><td>startfile(silepath, [, operation])</td><td>使用关联的应用程序打开指定文件或启动指定应用程序</td></tr><tr><td>stat(path)</td><td>返回文件的所有属性</td></tr><tr><td>system()</td><td>启动外部程序</td></tr></tbody></table><p>2.os.path模块常用成员</p><table><thead><tr><th>方法</th><th>功能说明</th></tr></thead><tbody><tr><td>abspath(path)</td><td>返回给定路径的绝对路径</td></tr><tr><td>basename(path)</td><td>返回指定路径的最后一个组成部分</td></tr><tr><td>dirname(p)</td><td>返回给定路径的文件夹部分</td></tr><tr><td>exists(path)</td><td>判断文件是否存在</td></tr><tr><td>getatime(filename)</td><td>返回文件的最后访问时间</td></tr><tr><td>getctime(filename)</td><td>返回文件的创建时间</td></tr><tr><td>getmtime(filename)</td><td>返回文件的最后修改时间</td></tr><tr><td>getsize(filename)</td><td>返回文件的大小</td></tr><tr><td>isdir(path)</td><td>判断path是否为文件夹</td></tr><tr><td>isfile(path)</td><td>判断path是否为文件</td></tr><tr><td>join(path, *paths)</td><td>连接两个或多个path</td></tr><tr><td>split(path)</td><td>以路径中的最后一个斜线为分隔符把路径分隔成两部分，以列表形式返回</td></tr><tr><td>splitext(path)</td><td>从路径中分隔文件的拓展名</td></tr><tr><td>splitdrive(path)</td><td>从路径中分隔驱动器的名称</td></tr></tbody></table><p>3.shutil模块常用成员</p><table><thead><tr><th>方法</th><th>功能说明</th></tr></thead><tbody><tr><td>copy(src, dst)</td><td>复制文件，新文件具有同样的文件属性，如果目标文件已存在则抛出异常</td></tr><tr><td>copyfile(src, dst)</td><td>复制文件，不复制文件属性，如果目标文件已存在则直接覆盖</td></tr><tr><td>copytree(src, dst)</td><td>递归复制文件夹</td></tr><tr><td>disk_usage(path)</td><td>查看磁盘使用情况</td></tr><tr><td>move(src, dst)</td><td>移动文件或递归移动文件夹，也可以用来给文件和文件夹重命名</td></tr><tr><td>rmtree(path)</td><td>递归删除文件夹</td></tr><tr><td>make_archive(base_name, format, root_dir=None, base_dir=None)</td><td>创建tar或zip格式的压缩文件</td></tr><tr><td>unpack_archive(filename, extract_dir=None, format=None)</td><td>解压缩文件</td></tr></tbody></table><h1 id="第十一章"><a href="#第十一章" class="headerlink" title="第十一章"></a>第十一章</h1><p>1.try···except···结构</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span>：    <span class="token comment" spellcheck="true"># 可能会引发异常的代码，先执行一下试试</span><span class="token keyword">except</span> Exception<span class="token punctuation">[</span> <span class="token keyword">as</span> reason<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果try中的代码抛出异常并被except捕捉，就执行这里的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.try···except···else···结构</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span>：    <span class="token comment" spellcheck="true"># 可能会引发异常的代码</span><span class="token keyword">except</span> Exception<span class="token punctuation">[</span> <span class="token keyword">as</span> reason<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用来处理异常的代码</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 如果try子句中的代码没有引发异常，就继续执行这里的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.try···except···finally···结构</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span>：    <span class="token comment" spellcheck="true"># 可能会引发异常的代码</span><span class="token keyword">except</span> Exception<span class="token punctuation">[</span> <span class="token keyword">as</span> reason<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用来处理异常的代码</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 无论try子句中的代码是否引发异常，都会执行这里的代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程错误1</title>
      <link href="2020/07/12/pin-xie-cuo-wu/"/>
      <url>2020/07/12/pin-xie-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>访问属性时报错:AttributeError: ‘Admin’ object has no attribute ‘show_privilege’</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""创建一个与用户相关的类"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span>                  username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""初始化各属性"""</span>        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name        self<span class="token punctuation">.</span>last_name <span class="token operator">=</span> last_name        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>location <span class="token operator">=</span> location    <span class="token keyword">def</span> <span class="token function">describe_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个描述用户信息的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>"<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>'s username <span class="token keyword">is</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              his<span class="token punctuation">(</span>her<span class="token punctuation">)</span> emile <span class="token keyword">is</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              his<span class="token punctuation">(</span>her<span class="token punctuation">)</span> location <span class="token keyword">is</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>"              <span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>last_name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>username<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>email<span class="token punctuation">,</span>                      self<span class="token punctuation">.</span>location<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">greet_user</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""创建一个打招呼的函数"""</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>"Hello<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>              next to meet you<span class="token punctuation">.</span>"              <span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>first_name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>last_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span>User<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这个用户的独特之处</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span>                  username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""重新定义这个特殊的用户"""</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>first_name<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span>                        username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> location<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>privileges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 展示这个用户的特殊信息</span>    <span class="token keyword">def</span> <span class="token function">show_privileges</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nPrivileges:"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> privilege <span class="token keyword">in</span> self<span class="token punctuation">.</span>privileges<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> privilege<span class="token punctuation">)</span>user <span class="token operator">=</span> Admin<span class="token punctuation">(</span><span class="token string">"Chen"</span><span class="token punctuation">,</span> <span class="token string">"Xili"</span><span class="token punctuation">,</span> <span class="token string">"fire wolf"</span><span class="token punctuation">,</span>             <span class="token string">"1239968427@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"yangxin"</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>describe_user<span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span>privileges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'can add post'</span><span class="token punctuation">,</span>                   <span class="token string">'can delete post'</span><span class="token punctuation">,</span>                   <span class="token string">'can ban user'</span><span class="token punctuation">,</span>                   <span class="token punctuation">]</span>user<span class="token punctuation">.</span>show_privilege<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现报错：</p><pre class="line-numbers language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"F:/学习资料/python_work/Chapter9/9-7.py"</span><span class="token punctuation">,</span> line <span class="token number">49</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    user<span class="token punctuation">.</span>show_privilege<span class="token punctuation">(</span><span class="token punctuation">)</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'Admin'</span> object has no attribute <span class="token string">'show_privilege'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>经过排查发现是最后访问属性时user.priviliges()误打成了user.privilige()<br>修改后：</p><pre class="line-numbers language-python"><code class="language-python">user<span class="token punctuation">.</span>show_privileges<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>成功输出：</p><pre class="line-numbers language-python"><code class="language-python">Chen Xili's username <span class="token keyword">is</span> fire wolf<span class="token punctuation">,</span>his<span class="token punctuation">(</span>her<span class="token punctuation">)</span> emile <span class="token keyword">is</span> <span class="token number">1239968427</span>@qq<span class="token punctuation">.</span>com<span class="token punctuation">,</span>his<span class="token punctuation">(</span>her<span class="token punctuation">)</span> location <span class="token keyword">is</span> Yangxin<span class="token punctuation">.</span>Privileges<span class="token punctuation">:</span><span class="token operator">-</span>can add post<span class="token operator">-</span>can delete post<span class="token operator">-</span>can ban userProcess finished <span class="token keyword">with</span> exit code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后再写代码时要注意准确性，不要轻易敲错字母，特别是涉及函数文件的字母。</p>]]></content>
      
      
      <categories>
          
          <category> 编程错误 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 典型错误 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法4</title>
      <link href="2020/07/12/python-ji-chu-yu-fa-4/"/>
      <url>2020/07/12/python-ji-chu-yu-fa-4/</url>
      
        <content type="html"><![CDATA[<p>参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>​    由于时间紧迫，故只整理语法，没有写实例，在学习或复习过程中每个语法点都应搭配合适的例子进行练习。</p><h1 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h1><p>1.常用转义字符</p><table><thead><tr><th>转义字符</th><th>含义</th></tr></thead><tbody><tr><td>\b</td><td>退格，把光标移动到前一列位置</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\t</td><td>水平制表符</td></tr><tr><td>\v</td><td>垂直制表符</td></tr><tr><td>\\\</td><td>一个斜线\</td></tr><tr><td>\‘</td><td>单引号’</td></tr><tr><td>\’‘</td><td>双引号‘’</td></tr><tr><td>\ooo</td><td>3位八进制数对应的字符</td></tr><tr><td>\xhh</td><td>2位十六进制数对应的字符</td></tr><tr><td>\uhhhh</td><td>4位十六进制数表示的Unicode字符</td></tr></tbody></table><p>2.格式字符</p><table><thead><tr><th>格式字符</th><th>说明</th></tr></thead><tbody><tr><td>%s</td><td>格式化字符串</td></tr><tr><td>%c</td><td>单个字符</td></tr><tr><td>%d、%i</td><td>十进制整数</td></tr><tr><td>%o</td><td>八进制整数</td></tr><tr><td>%x</td><td>十六进制整数</td></tr><tr><td>%e</td><td>指数（基底写为e）</td></tr><tr><td>%E</td><td>指数（基底写为E）</td></tr><tr><td>%f、%F</td><td>浮点数</td></tr><tr><td>%g</td><td>指数（e）或浮点数（根据显示长度）</td></tr><tr><td>%G</td><td>指数（E）或浮点数（根据显示长度）</td></tr><tr><td>%%</td><td>格式化为一个%符号</td></tr></tbody></table><p>3.字符串常用方法与操作</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>find()</td><td>返回字符串在另一个字符串指定范围中首次出现的位置，如果没有匹配项则返回-1</td></tr><tr><td>rfind()</td><td>返回字符串在另一个字符串指定范围中最后一次出现的位置，如果没有匹配项则返回-1</td></tr><tr><td>index()</td><td>返回字符串在另一个字符串指定范围中首次出现的位置，如果不存在则抛出异常</td></tr><tr><td>rindex()</td><td>返回字符串在另一个字符串指定范围中最后一次出现的位置，如果不存在则抛出异常</td></tr><tr><td>count()</td><td>返回一个字符串在另一个字符串中出现的次数，如果不存在则返回0</td></tr><tr><td>split()</td><td>以指定字符为分隔符，从字符串左端开始将其分隔成多个字符串，并返回包含分隔结果的列表</td></tr><tr><td>rsplit()</td><td>以指定字符为分隔符，从字符串右端开始将其分隔成多个字符串，并返回包含分隔结果的列表</td></tr><tr><td>partition()</td><td>以指定字符串为分隔符将原字符串分割为3部分，即分隔符之前的字符串、分隔符字符串和分隔符之后的字符串，如果指定的分隔符不在原字符串中，则返回原字符串和两个空字符串。（从左往右遇到的第一个分隔符作为分隔符）</td></tr><tr><td>rpartition()</td><td>以指定字符串为分隔符将原字符串分割为3部分，即分隔符之前的字符串、分隔符字符串和分隔符之后的字符串，如果指定的分隔符不在原字符串中，则返回原字符串和两个空字符串。（从右往左遇到的第一个分隔符作为分隔符）</td></tr><tr><td>join()</td><td>将列表中多个字符串进行连接，并在相邻两个字符串之间插入指定字符，返回新字符串</td></tr><tr><td>lower()</td><td>将字符串转换为小写字符串</td></tr><tr><td>upper()</td><td>将字符串转换为大写字符串</td></tr><tr><td>capitalize()</td><td>将字符串首写字母变为大写</td></tr><tr><td>title()</td><td>将每个单词的首字母变为大写</td></tr><tr><td>swapcase()</td><td>大小写互换</td></tr><tr><td>replace()</td><td>替换字符串中指定或子字符串的所有重复出现，每次只能替换一个字符或一个字符串，把指定的字符串参数作为一个整体对待</td></tr><tr><td>maketrans()</td><td>生成字符映射表</td></tr><tr><td>translate()</td><td>根据映射表中定义的对应关系转换字符串并替换其中的字符</td></tr><tr><td>strip()</td><td>删除两端的空白字符或指定字符</td></tr><tr><td>rstrip()</td><td>删除右端的空白字符或指定字符</td></tr><tr><td>lstrip()</td><td>删除左端的空白字符或指定字符</td></tr><tr><td>startswith()</td><td>判断字符串是否以指定字符串开始（可以接收两个整数参数来限定字符串的检测范围）</td></tr><tr><td>endswith()</td><td>判断字符串是否以指定字符串结束（可以接收两个整数参数来限定字符串的检测范围）</td></tr><tr><td>isalnum()</td><td>测试字符串是否为数字或字母</td></tr><tr><td>isalpha()</td><td>测试字符串是否为字母</td></tr><tr><td>isdigit()</td><td>测试字符串是否为整数字符</td></tr><tr><td>isspace()</td><td>测试字符串是否为空白字符</td></tr><tr><td>isupper()</td><td>测试字符串是否为大写字母</td></tr><tr><td>islower()</td><td>测试字符串是否为小写字母</td></tr><tr><td>center()</td><td>返回指定宽度的新字符串，原字符串居中出现在新字符串中，如果知指定的宽度大于字符串长度，则使用指定的字符（默认是空格）进行填充</td></tr><tr><td>ljust()</td><td>返回指定宽度的新字符串，原字符串左对齐出现在新字符串中，如果知指定的宽度大于字符串长度，则使用指定的字符（默认是空格）进行填充</td></tr><tr><td>rjust()</td><td>返回指定宽度的新字符串，原字符串右对齐出现在新字符串中，如果知指定的宽度大于字符串长度，则使用指定的字符（默认是空格）进行填充</td></tr></tbody></table><h1 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h1><p>1.正则表达式常用元字符</p><table><thead><tr><th align="left">元字符</th><th>功能说明</th></tr></thead><tbody><tr><td align="left">.</td><td>匹配除换行符以外的任意单个字符</td></tr><tr><td align="left">*</td><td>匹配位于*之前的字符或子模式的0次或多次出现</td></tr><tr><td align="left">+</td><td>匹配位于+之前的字符或子模式的1次或多次出现</td></tr><tr><td align="left">-</td><td>用来在[]之内表示范围</td></tr><tr><td align="left">+</td><td>匹配位于|之前或之后的字符</td></tr><tr><td align="left">^</td><td>匹配位于^后面的字符或模式开头的字符串，例如，’^http’只能匹配所有以’http’开头的字符串</td></tr><tr><td align="left">$</td><td>匹配以$前面的字符或模式结束的字符串</td></tr><tr><td align="left">？</td><td>表示问号之前的字符或子模式是可选的。当紧随任何其他限定符（*、+、？、{n}、{n，}、{n，m}）之后时，匹配模式是”非贪心的“。”非贪心的“模式匹配搜索到的、尽可能短的字符串，而默认的”贪心的“模式匹配搜索到的，尽可能长的字符串。例如，在字符串”oooo“中，”o+？“只匹配单个”o”，而“o+”匹配所有“o”</td></tr><tr><td align="left">\</td><td>表示位于\之后的为转义字符</td></tr><tr><td align="left">\num</td><td>此处的num是一个正整数，表示前面子模式的编号。例如，”(.)\1”匹配两个连续的相同字符</td></tr><tr><td align="left">\f</td><td>匹配一个换页符</td></tr><tr><td align="left">\n</td><td>匹配一个换行符</td></tr><tr><td align="left">\r</td><td>匹配一个回车符</td></tr><tr><td align="left">\b</td><td>匹配单词头或单词尾</td></tr><tr><td align="left">\B</td><td>与\b含有相反</td></tr><tr><td align="left">\d</td><td>匹配任何数字，相当于【0-9】</td></tr><tr><td align="left">\D</td><td>与\d含义相反，相当于【^0-9】</td></tr><tr><td align="left">\s</td><td>匹配任何空白字符，包括空格、制表符、换页符，与[\f\n\r\t\v]等效</td></tr><tr><td align="left">\S</td><td>与\s含义相反</td></tr><tr><td align="left">\w</td><td>匹配任何字母、数字以及下划线，相当于[a-zA-Z0-p_]</td></tr><tr><td align="left">\W</td><td>与\w含义相反，与”[^A-Za-z0-9_]等效</td></tr><tr><td align="left">()</td><td>将位于()内的内容作为一个整体对待</td></tr><tr><td align="left">{m,n}</td><td>按{}中指定的次数进行匹配，例如[3,8]表示前面的字符或模式至少重复3次而最多重复8次，注意逗号后面不要有空格</td></tr><tr><td align="left">[]</td><td>匹配位于[]中的任意一个字符，例如，‘【a-zA-Z0-9】可以匹配单个任意大小写字母或数字</td></tr><tr><td align="left">[^xyz]</td><td>^放在[]内表示反向字符集，匹配除x、y、z之外的任何字符</td></tr><tr><td align="left">[a-z]</td><td>字符范围，匹配指定范围内的任何字符</td></tr><tr><td align="left">[^a-z]</td><td>反向范围字符，匹配除小写英文字母之外的任何字符</td></tr></tbody></table><p>2.常用的子模块拓展语法</p><table><thead><tr><th>语法</th><th>功能说明</th></tr></thead><tbody><tr><td>(?P<groupname>)</td><td>为子模块命名</td></tr><tr><td>(?iLmsux)</td><td>设置匹配标志，可以是几个字母的组合 ，每个字母含义与编译标志相同</td></tr><tr><td>(?···)</td><td>匹配但不捕获该匹配的子表达式</td></tr><tr><td>(?P=proupname)</td><td>表示在此之前的命名为groupname的子模式</td></tr><tr><td>(?#···)</td><td>表示注释</td></tr><tr><td>(?&lt;=···)</td><td>用在正则表达式之前，表示如果&lt;=后的内容在字符串中不出现则匹配，但不返回&lt;=之后的内容</td></tr><tr><td>(?=···)</td><td>用在正则表达式之后，表示如果=后的内容在字符串中出现则匹配，但不返回=之后的内容</td></tr><tr><td>(?&lt;!···)</td><td>用在正则表达式之前，表示如果&lt;！后的内容在字符串中不出现则匹配，但不返回&lt;！之后的内容</td></tr><tr><td>(?!···)</td><td>用在正则表达式之后，表示如果！后的内容在字符串中不出现则匹配，但不返回！之后的内容</td></tr></tbody></table><p>3.re模块常用方法</p><table><thead><tr><th>方法</th><th>功能说明</th></tr></thead><tbody><tr><td>findall(pattern,string[,flags])</td><td>列出字符串中模式的所有匹配项</td></tr><tr><td>match(pattern,string[,flags])</td><td>从字符串的开始处模式匹配，返回match对象或None</td></tr><tr><td>search(pattern,string[,flags])</td><td>在整个字符串中寻找模式，返回match对象或None</td></tr><tr><td>split(pattern,string[,maxsplit=0])</td><td>根据模式匹配项分隔字符串</td></tr><tr><td>sub(pat,repl,string[,count=0])</td><td>将字符串中所有pat的匹配项用repl替换，返回新字符串，repl可以是字符串或返回字符串的可调用对象，该可调用对象作用于每个匹配的match对象</td></tr></tbody></table><p>4.match对象的主要方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>group()</td><td>返回匹配的一个或多个子模式内容</td></tr><tr><td>groups()</td><td>返回一个包含匹配所有子模式内容的元组</td></tr><tr><td>groupdict()</td><td>返回包含匹配的所有命名子模式内容的字典</td></tr><tr><td>start()</td><td>返回指定子模式内容的起始位置</td></tr><tr><td>end()</td><td>返回指定子模式内容的结束位置的前一个位置</td></tr><tr><td>span()</td><td>返回一个包含指定子模式内容起始位置和结束位置前一个位置的元组</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python项目1</title>
      <link href="2020/07/12/xiang-mu-1/"/>
      <url>2020/07/12/xiang-mu-1/</url>
      
        <content type="html"><![CDATA[<h1 id="项目一——外星人入侵"><a href="#项目一——外星人入侵" class="headerlink" title="项目一——外星人入侵"></a>项目一——外星人入侵</h1><p>​        这个项目是开发一个小游戏。第一部分，先创建一艘能够根据用户输入而左右移动和设计的飞船，再创建一群作为射击目标的外星人。第二部分，让这群外星人向两边和下面移动，并删除被子弹击中的外星人，并显示玩家拥有的飞船数量，并在玩家的飞船用完后结束游戏。第三部分，添加一个Play按钮，用于根据需要启动游戏以及在游戏结束后启动游戏。并修改这个游戏，使其在玩家的等级提高后加快节奏，并实现一个积分系统。</p><p>​        游戏说明：在游戏《外星人入侵》中，玩家控制着一艘最初出现在屏幕底部中央的飞船。</p><p>​        由于这个项目主要使用拓展库Pygame来开发，因此这篇博客主要用于记录Pygame中用到的相关语法以及其他不熟悉的语法。源代码部分将在整个项目完成后上传到github中。</p><p>Pygame的相关语法：</p><table><thead><tr><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>init()</td><td>初始化背景设置</td></tr><tr><td>display.set_mode()</td><td>创建一个名为的显示窗口（可以设置窗口的大小）</td></tr><tr><td>display.flip()</td><td>不断更新屏幕，以显示元素的新位置，并在原来的位置隐藏元素，从而营造平滑移动的效果</td></tr><tr><td>fill()</td><td>用背景色填充屏幕，这个方法只接受一个实参：一种颜色</td></tr><tr><td>blit()</td><td>绘制需要的图案</td></tr><tr><td>image.load()</td><td>返回一个表示图像的元素</td></tr><tr><td>get_rect()</td><td>获取相应图片元素的的属性</td></tr><tr><td>event.get()</td><td>获取用户的按键信息</td></tr><tr><td>QUIT</td><td>关闭键</td></tr><tr><td>KEYDOWN</td><td>捕捉键盘按键是否被按下</td></tr><tr><td>KEYUP</td><td>捕捉键盘按键是否被松开</td></tr><tr><td>K_RIGHT</td><td>捕捉键盘是否按了右箭头键</td></tr><tr><td>K_LEFT</td><td>捕捉键盘是否按了左箭头键</td></tr></tbody></table><p>​                                                      参考书籍：《Python编程从入门到实践》–Eric Matthes 著</p>]]></content>
      
      
      <categories>
          
          <category> python项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法3</title>
      <link href="2020/07/12/python-ji-chu-yu-fa-3/"/>
      <url>2020/07/12/python-ji-chu-yu-fa-3/</url>
      
        <content type="html"><![CDATA[<p>参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>​    由于时间紧迫，故只整理语法，没有写实例，在学习或复习过程中每个语法点都应搭配合适的例子进行练习。</p><p>由于在编程过程中频繁引用random库，故整理random库的一些常用方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>seek()</td><td>种子，默认种子是系统时钟</td></tr><tr><td>random()</td><td>生成0到1的随机小数</td></tr><tr><td>uniform(a,b)</td><td>生成a到b的随机小数</td></tr><tr><td>randint(a,b)</td><td>生成一个a到b的随机整数</td></tr><tr><td>randrange(a,b,c)</td><td>生成一个a到b，以c递增的数</td></tr><tr><td>choice(<list>)</td><td>随机返回一个列表里面的元素</td></tr><tr><td>shuffle(<list>)</td><td>将列表的元素随机打乱</td></tr><tr><td>sample(<list>,k)</td><td>从列表中随机抽取k个元素</td></tr></tbody></table><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><p>1.定义函数的语法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数列表<span class="token punctuation">]</span><span class="token punctuation">)</span>：    <span class="token triple-quoted-string string">'''注释'''</span>    函数体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.lambda表达式</p><p>​    lambda表达式时一种匿名函数，没有函数名字的、临时使用的小函数。lambda表达式只可以包含一个表达式，不允许包含复杂语句和结构，但在表达式中可以调用其他函数，该表达式的计算结果相当于函数的返回值。</p><p>3.变量作用域</p><p>​    定义在函数内部的变量拥有一个局部作用域，定义在函数外的拥有全局作用域。</p><p>​    局部变量只能在其被声明的函数内部访问，而全局变量可以在整个程序范围内访问。调用函数时，所有在函数内声明的变量名称都将被加入到作用域中。</p><p>​    当内部作用域想修改外部作用域的变量时，要用到global关键字。</p><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><p>1.类的定义</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token number">-1</span><span class="token operator">></span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token punctuation">.</span>    <span class="token operator">&lt;</span>statement<span class="token operator">-</span>N<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.私有成员与公有成员</p><p>​    如果成员名以两个下划线开头但是不以两个下划线结束则表示是私有成员。私有成员在类的外部不能直接访问，一般是在类的内部进行访问和操作，或者在类的外部通过调用对象的公有成员方法来访问，而公有成员是可以公开使用的，既可以在类的内部进行访问，也可以在外部程序中使用。</p><p>_xxx:一个下划线开头，保护成员。</p><p>__xxx:以两个下划线开头但不以两个下划线结束，表示私有成员，一般只有类对象自己能访问。</p><p>__xxx__：前后各两个下划线，系统定义的特殊成员。</p><p>3.Python类的特殊方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>__init__()</td><td>构造方法，创建对象时自动调用</td></tr><tr><td>__del__()</td><td>析构方法，释放对象时自动调用</td></tr><tr><td>__add__()</td><td>+</td></tr><tr><td>__sub__()</td><td>-</td></tr><tr><td>__mul__()</td><td>*</td></tr><tr><td>__truediv__()</td><td>/</td></tr><tr><td>__floordiv__()</td><td>//</td></tr><tr><td>__mod__()</td><td>%</td></tr><tr><td>__pow__()</td><td>**</td></tr><tr><td>__eq__()、__ne__()、<br />__lt__()、__le__()、<br />__gt__()、__ge__()</td><td>==、!=、<br />&lt;、&lt;=、<br />&gt;、&gt;=</td></tr><tr><td>__lshift__()、__rshift__()</td><td>&lt;&lt;、&gt;&gt;</td></tr><tr><td>__and__()、__or__、<br />__invert__()、__xor__()</td><td>&amp; 、|、<br />~、^</td></tr><tr><td>__iadd__()、__isub__()</td><td>+=、-=,很多其他运算符也有与之对应的复合赋值运算符</td></tr><tr><td>__pos__()</td><td>一元运算符+，正号</td></tr><tr><td>__neg__()</td><td>一元运算符-，负号</td></tr><tr><td>__contain__()</td><td>与成员测试运算符in对应</td></tr><tr><td>__radd__()、__rsub__</td><td>反射加法</td></tr><tr><td>__abs__()</td><td>与内置函数abs()对应</td></tr><tr><td>__divmod__()</td><td>与内置函数divmod()对应</td></tr><tr><td>__len__()</td><td>与内置函数len()对应</td></tr><tr><td>__reversed__()</td><td>与内置函数reversed()对应</td></tr><tr><td>__round__()</td><td>与内置函数round()对应</td></tr><tr><td>__str__()</td><td>与内置函数str()对应，要求该方法必须返回str类型的数据</td></tr><tr><td>__getitem__()</td><td>按照索引获取值</td></tr><tr><td>__setiem__()</td><td>按照索引赋值</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程序设计基础与应用答案5</title>
      <link href="2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-5/"/>
      <url>2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-5/</url>
      
        <content type="html"><![CDATA[<p>9-1 假设有两个文本文件file1.txt和file2.txt，编写程序merge.py，把两个文本文件中的内容合并到新文件result.txt中，要求文件file1.txt和file2.txt中的行在result.txt中交替出现。也就是说，result.txt文件中的奇数行来自file1.txt，而偶数行来自file2.txt。如果两个文件行数不一样，那么处理完行数较少的文件之后，把另一个文件中剩余的所有行直接追加到resul.txt的最后。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 获取两个文件</span>filename1 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个文件名（路径）："</span><span class="token punctuation">)</span>filename2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入第二个文件名（路径）："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将文件内容依次放入文本中</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'result.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename1<span class="token punctuation">)</span> <span class="token keyword">as</span> fp1<span class="token punctuation">,</span> open<span class="token punctuation">(</span>filename2<span class="token punctuation">)</span> <span class="token keyword">as</span> fp2<span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将文件1的内容写入</span>            line1 <span class="token operator">=</span> fp1<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> line1<span class="token punctuation">:</span>                fp1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line1<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 将文件2的内容写入</span>            line2 <span class="token operator">=</span> fp2<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> line2<span class="token punctuation">:</span>                fp2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line2<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 在轮流输入后面的内容</span>        fp3 <span class="token operator">=</span> fp1 <span class="token keyword">if</span> flag <span class="token keyword">else</span> fp2        <span class="token keyword">for</span> line <span class="token keyword">in</span> fp3<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fp3<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9-2 编写程序，读取上一题的merge.py，在每行后加上行号并生成新文件merge_new.py，要求加上行号后的文件merge_new.p和原程序merge.py功能一样，并且所有行号对齐。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 打开上一题的文件</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'merge.py'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    lines <span class="token operator">=</span> fp<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>max<span class="token punctuation">(</span>lines<span class="token punctuation">,</span> key<span class="token operator">=</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> line <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 每一行内容最后都添加行号</span>    <span class="token comment" spellcheck="true"># 将内容左对齐，最后的位置为行号，保证行号都在一列</span>    lines <span class="token operator">=</span> line<span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'#'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'merge_new.py'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将每行的内容写入新文件</span>    fp<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>lines<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9-3 编写程序，统计当前文件夹中所有拓展名为ppt和pptx的Powerpoint文件的幻灯片总数量。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token comment" spellcheck="true"># 要查找的文件夹地址</span>dir <span class="token operator">=</span> <span class="token string">"./Python程序设计与应用"</span>number <span class="token operator">=</span> <span class="token number">0</span><span class="token comment" spellcheck="true"># 遍历文件夹中的所有子文件的拓展名</span><span class="token keyword">for</span> root<span class="token punctuation">,</span> dirname<span class="token punctuation">,</span> filenames <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> filenames<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 获得文件的扩展名</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.ppt'</span> <span class="token operator">or</span> <span class="token string">'.pptx'</span><span class="token punctuation">:</span>            number <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后来参考答案发现，这个题目是要求幻灯片的总页数不是文件数，而且参考答案很多函数还没有充分了解。以下为参考答案：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> win32com<span class="token keyword">import</span> win32com<span class="token punctuation">.</span>clienttotal <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">pptCount</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> total    <span class="token keyword">for</span> subPath <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        subPath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> subPath<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>subPath<span class="token punctuation">)</span><span class="token punctuation">:</span>            pptCount<span class="token punctuation">(</span>subPath<span class="token punctuation">)</span>        <span class="token keyword">elif</span> subPath<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.ppt'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>subPath<span class="token punctuation">)</span>            powerpoint <span class="token operator">=</span> win32com<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Dispatch<span class="token punctuation">(</span><span class="token string">'PowerPoint.Application'</span><span class="token punctuation">)</span>            powerpoint<span class="token punctuation">.</span>Visible <span class="token operator">=</span> <span class="token number">1</span>            ppt <span class="token operator">=</span> powerpoint<span class="token punctuation">.</span>Presentations<span class="token punctuation">.</span>Open<span class="token punctuation">(</span>subPath<span class="token punctuation">)</span>            win32com<span class="token punctuation">.</span>client<span class="token punctuation">.</span>gencache<span class="token punctuation">.</span>EnsureDispatch<span class="token punctuation">(</span><span class="token string">'PowerPoint.Application'</span><span class="token punctuation">)</span>            total <span class="token operator">+=</span> ppt<span class="token punctuation">.</span>Slides<span class="token punctuation">.</span>Count            powerpoint<span class="token punctuation">.</span>Quit<span class="token punctuation">(</span><span class="token punctuation">)</span>pptCount<span class="token punctuation">(</span><span class="token string">'F:\学习资料'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9-4 编写程序，把当前目录中所有的Excel文件合并为一个文件。假设所有Excel包含同样数量的列，第一行为表头，且不存在合并单元格或其他特殊格式。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">import</span> openpyxl<span class="token comment" spellcheck="true"># 创建空白文件储存列表所有内容，并添加表头</span>Result <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>Result <span class="token operator">=</span> Result<span class="token punctuation">.</span>worksheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 遍历当前文件夹中所有 xlsx 文件,将内容写入</span>passages <span class="token operator">=</span> <span class="token punctuation">(</span>passage <span class="token keyword">for</span> passage <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> passage<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> passage <span class="token keyword">in</span> passages<span class="token punctuation">:</span>    wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>load_workbook<span class="token punctuation">(</span>passage<span class="token punctuation">)</span>    ws <span class="token operator">=</span> wb<span class="token punctuation">.</span>worksheets<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> row <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>ws<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        Result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>list<span class="token punctuation">(</span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> cell<span class="token punctuation">:</span> cell<span class="token punctuation">.</span>value<span class="token punctuation">,</span> row<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 保存文件</span>Result<span class="token punctuation">.</span>save<span class="token punctuation">(</span>Result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9-5 编写程序，读取一个Word文件，输出其中所有表格中所有单元格的文本。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> docxdoc <span class="token operator">=</span> docx<span class="token punctuation">.</span>Document<span class="token punctuation">(</span><span class="token string">'test.docx'</span><span class="token punctuation">)</span><span class="token keyword">for</span> table <span class="token keyword">in</span> doc<span class="token punctuation">.</span>tables<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 将每一行内容写入</span>    <span class="token keyword">for</span> row <span class="token keyword">in</span> table<span class="token punctuation">.</span>rows<span class="token punctuation">:</span>        <span class="token keyword">for</span> cell <span class="token keyword">in</span> row<span class="token punctuation">.</span>cells<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cell<span class="token punctuation">.</span>text<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10-1 编写程序，检查D：\文件夹及其子文件夹中是否存在一个名为temp.txt的文件。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 确定路径</span>    dirs <span class="token operator">=</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>    <span class="token keyword">while</span> dirs<span class="token punctuation">:</span>        dir1 <span class="token operator">=</span> dirs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> path <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 对每个文件夹的内容进行对比</span>            <span class="token comment" spellcheck="true"># 若为所需文件则返回正确</span>            <span class="token keyword">if</span> path <span class="token operator">==</span> filename<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir1<span class="token punctuation">,</span> path<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 若为文件夹，则进一步深入</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>                dirs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 代码测试</span>a <span class="token operator">=</span> search<span class="token punctuation">(</span><span class="token string">'D:\\'</span><span class="token punctuation">,</span> <span class="token string">'temp.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10-2 编写程序，查找D:\文件夹及其子文件夹中所有创建日期为2017年10月26日的文件，输出这些文件的完整路径和创建日期。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> datetime<span class="token keyword">import</span> os<span class="token keyword">import</span> os<span class="token punctuation">.</span>path<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 确定路径</span>    dirs <span class="token operator">=</span> <span class="token punctuation">[</span>dir<span class="token punctuation">]</span>    <span class="token keyword">while</span> dirs<span class="token punctuation">:</span>        dir1 <span class="token operator">=</span> dirs<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> path <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>dir1<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 确定完整路径</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir1<span class="token punctuation">,</span> path<span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 对比时间看是否正确</span>                ctime <span class="token operator">=</span> str<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getctime<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> ctime<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span>ctime<span class="token punctuation">)</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 如果为文件夹则进一步深入</span>                dirs<span class="token punctuation">.</span>appand<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 函数测试</span>search<span class="token punctuation">(</span><span class="token string">'dlls'</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2017</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10-3 编写程序，实现文件夹增量备份。例如，第一次执行时把工作目录D:\workingDirectory及其子文件夹中的所有内容都复制到备份目录D:\backupDirectory中，并且保持目录结构一致。然后在工作目录或其任意子目录中创建一个文件夹并修改一个已有文件夹的内容，再次执行程序则会自动对比工作目录和备份目录并只复制上次备份之后修改过的文件和新建的文件。（这个题不太会，以下为参考答案）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> filecmp<span class="token keyword">import</span> shutil<span class="token keyword">def</span> <span class="token function">autoBackup</span><span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> dstDir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>scrDir<span class="token punctuation">)</span><span class="token punctuation">:</span>        scrItem <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> item<span class="token punctuation">)</span>        dstItem <span class="token operator">=</span> scrItem<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> dstDir<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>scrItem<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'make directory'</span> <span class="token operator">+</span> dstItem<span class="token punctuation">)</span>            autoBackup<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">)</span>        <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>scrItem<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 只复制新增或修改过的文件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span><span class="token punctuation">)</span>\                 <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token operator">not</span> filecmp<span class="token punctuation">.</span>cmp<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">,</span> shallow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'file:'</span> <span class="token operator">+</span> scrItem <span class="token operator">+</span> <span class="token string">'==>'</span> <span class="token operator">+</span> dstItem<span class="token punctuation">)</span>scrDir <span class="token operator">=</span> r<span class="token string">'D:\workingDirectory'</span>dstDir <span class="token operator">=</span> r<span class="token string">'D:\backupDirectory'</span>autoBackup<span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> dstDir<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10-4 改进上一个题目中的程序，要求运行后可以由用户输入工作目录和备份目录的路径。（这个题不太会，以下为参考答案）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> filecmp<span class="token keyword">import</span> shutil<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scrDir和dstDir必须是某个目录的绝对路径。'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'例如:{0} c:\\olddir c:\\newdir'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">autoBackup</span><span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> dstDir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>scrDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>dstDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span>            <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>scrDir<span class="token punctuation">)</span> <span class="token operator">!=</span> scrDir<span class="token punctuation">)</span> <span class="token operator">or</span>            <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>dstDir<span class="token punctuation">)</span> <span class="token operator">!=</span> dstDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        usage<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>scrDir<span class="token punctuation">)</span><span class="token punctuation">:</span>        scrItem <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> item<span class="token punctuation">)</span>        dstItem <span class="token operator">=</span> scrItem<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> dstDir<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>scrItem<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span><span class="token punctuation">:</span>            os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'make directory'</span> <span class="token operator">+</span> dstItem<span class="token punctuation">)</span>        autoBackup<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">)</span>    <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>scrItem<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 只复制新增或修改过的文件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token operator">not</span> filecmp<span class="token punctuation">.</span>cmp<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">,</span> shallow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'file:'</span> <span class="token operator">+</span> scrItem <span class="token operator">+</span> <span class="token string">'==>'</span> <span class="token operator">+</span> dstItem<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>        usage<span class="token punctuation">(</span><span class="token punctuation">)</span>    scrDir<span class="token punctuation">,</span> dstDir <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11-1 重做第9章习题1，增加异常处理结构，考虑文件不存在和无法创建文件的情况。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 获取两个文件</span>filename1 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个文件名（路径）："</span><span class="token punctuation">)</span>filename2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入第二个文件名（路径）："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将文件内容依次放入文本中</span><span class="token keyword">try</span><span class="token punctuation">:</span>    fp <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'result.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'创建文件失败。'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        fp1 <span class="token operator">=</span> open<span class="token punctuation">(</span>filename1<span class="token punctuation">)</span>        fp2 <span class="token operator">=</span> open<span class="token punctuation">(</span>filename2<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'创建文件失败。'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将文件1的内容写入</span>            line1 <span class="token operator">=</span> fp1<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> line1<span class="token punctuation">:</span>                fp1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line1<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 将文件2的内容写入</span>            line2 <span class="token operator">=</span> fp2<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> line2<span class="token punctuation">:</span>                fp2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line2<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token keyword">break</span>        <span class="token comment" spellcheck="true"># 在轮流输入后面的内容</span>        fp3 <span class="token operator">=</span> fp1 <span class="token keyword">if</span> flag <span class="token keyword">else</span> fp2        <span class="token keyword">for</span> line <span class="token keyword">in</span> fp3<span class="token punctuation">:</span>            fp<span class="token punctuation">.</span>write<span class="token punctuation">(</span>fp3<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11-2 重做第10章习题4，增加异常处理结构，考虑文件不存在的情况。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> os<span class="token keyword">import</span> filecmp<span class="token keyword">import</span> shutil<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'scrDir和dstDir必须是某个目录的绝对路径。'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'例如:{0} c:\\olddir c:\\newdir'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">autoBackup</span><span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> dstDir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>scrDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>dstDir<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span>                <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>scrDir<span class="token punctuation">)</span> <span class="token operator">!=</span> scrDir<span class="token punctuation">)</span> <span class="token operator">or</span>                <span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>dstDir<span class="token punctuation">)</span> <span class="token operator">!=</span> dstDir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            usage<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>scrDir<span class="token punctuation">)</span><span class="token punctuation">:</span>            scrItem <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> item<span class="token punctuation">)</span>            dstItem <span class="token operator">=</span> scrItem<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>scrDir<span class="token punctuation">,</span> dstDir<span class="token punctuation">)</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>scrItem<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'make directory'</span> <span class="token operator">+</span> dstItem<span class="token punctuation">)</span>            autoBackup<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">)</span>        <span class="token keyword">elif</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>scrItem<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 只复制新增或修改过的文件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dstItem<span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token operator">not</span> filecmp<span class="token punctuation">.</span>cmp<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">,</span> shallow<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>scrItem<span class="token punctuation">,</span> dstItem<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'file:'</span> <span class="token operator">+</span> scrItem <span class="token operator">+</span> <span class="token string">'==>'</span> <span class="token operator">+</span> dstItem<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'文件不存在'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">:</span>        usage<span class="token punctuation">(</span><span class="token punctuation">)</span>    scrDir<span class="token punctuation">,</span> dstDir <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11-3 编写程序，创建一个字典，然后让用户输入一个内容作为键并输出字典中对应元素的值。如果用户输入的键不存在就进行适当的提示，如果用户输入单词quit的任意大小写（例如Quit，QUIT等）组合就结束程序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写函数用于输出键对应的值</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你随时可以输入quit以退出循环"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 捕获用户输入的键</span>        key <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个键:"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> key<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 用户随时可以退出循环</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 输入正确则输出对应的值</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"字典中没有该键的相关信息"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 代码测试</span>dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"姓"</span><span class="token punctuation">:</span> <span class="token string">"陈"</span><span class="token punctuation">,</span> <span class="token string">"名"</span><span class="token punctuation">:</span> <span class="token string">"细利"</span><span class="token punctuation">,</span> <span class="token string">"籍贯"</span><span class="token punctuation">:</span> <span class="token string">"湖北省黄石市阳新县"</span><span class="token punctuation">,</span>       <span class="token string">"兴趣"</span><span class="token punctuation">:</span> <span class="token string">"计算机编程"</span><span class="token punctuation">,</span> <span class="token string">"大学"</span><span class="token punctuation">:</span> <span class="token string">"中国地质大学（武汉）"</span><span class="token punctuation">}</span>demo<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11-4 编写程序，让用户输入两个整数start和end，然后输出这两个整数之间的一个随机数。要求考虑用户输入不是整数的情况，以及start&gt;end的情况。根据实际情况进行适当的提示或输出。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 获取用户输入的两个整数</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 保证用户输入的是2个整数</span>    start <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入第一个起始整数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个终止整数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入的不是整数"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 确保起始数大于终止数</span>    <span class="token keyword">if</span> start <span class="token operator">></span> end<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"起始整数应该小于等于终止整数。"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python程序设计基础与应用答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法2</title>
      <link href="2020/07/12/python-ji-chu-yu-fa-2/"/>
      <url>2020/07/12/python-ji-chu-yu-fa-2/</url>
      
        <content type="html"><![CDATA[<p>参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>​    由于时间紧迫，故只整理语法，没有写实例，在学习或复习过程中每个语法点都应搭配合适的例子进行练习。</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><p>1.序列</p><table><thead><tr><th>列表</th><th>有序序列</th><th>可变序列</th></tr></thead><tbody><tr><td>元组</td><td>有序序列</td><td>不可变序列</td></tr><tr><td>字符串</td><td>有序序列</td><td>不可变序列</td></tr><tr><td>字典</td><td>无序序列</td><td>可变序列</td></tr><tr><td>集合</td><td>无序序列</td><td>可变序列</td></tr></tbody></table><p>2.列表常用方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>list()</td><td>创建一个空列表或把可迭代对象转换为列表</td></tr><tr><td>append(x)</td><td>将x追加至列表尾部</td></tr><tr><td>extend(L)</td><td>将列表L中所有元素追加至列表尾部</td></tr><tr><td>insert(index, x)</td><td>在列表index位置出插入x</td></tr><tr><td>remove(x)</td><td>在列表中删除第一个值为x的元素，如果列表中不存在x则抛出异常</td></tr><tr><td>pop([index])</td><td>删除并返回列表中下标为index的元素，index则默认为-1</td></tr><tr><td>index(x)</td><td>返回列表中第一个值为x的元素的索引，若不存在值为x的元素则抛出异常</td></tr><tr><td>count(x)</td><td>返回x在列表中出现的次数</td></tr><tr><td>reverse()</td><td>将列表所有元素进行原地逆序，首尾交换</td></tr><tr><td>sort(key=None,reverse=False)</td><td>对列表中的元素进行原地排序，key用来指定排列顺序，reverse为False表示升序，True表示降序</td></tr></tbody></table><p>补充方法（课本中对某些方法不熟悉，但又未正式出现）</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>strip()</td><td>移除字符串头尾指定的字符（默认为空格或换行符）或字符序列</td></tr><tr><td>cycle()</td><td>在itertools库中，将原序列中的所有元素首尾相接形成一个圆</td></tr><tr><td>enumerate()</td><td>用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标</td></tr><tr><td>map(function, iterable, …)</td><td>根据提供的函数对指定序列做映射，function为函数，iterable为一个或多个序列</td></tr><tr><td>filter(function, iterable)</td><td>用于过滤序列，过滤掉不符合条件的元素，返回一个迭代器对象，如果要转换为列表，function为 判断函数，iterable为可迭代对象。</td></tr><tr><td>format()</td><td>字符串格式化方法</td></tr><tr><td>isinstance(object, classinfo)</td><td>判断一个对象是否是一个已知的类型，类似 type()，object是实例对象，classinfo是直接或间接类名、基本类型或者由它们组成的元组。</td></tr><tr><td>round( x [, n]  )</td><td>返回浮点数x的四舍五入值，x 为数值表达式，n为保留的小数位数。</td></tr></tbody></table><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><table><thead><tr><th>break</th><th>终止循环语句，即循环条件没有False条件或者序列还没被完全递归完，也会停止执行循环语句</th></tr></thead><tbody><tr><td>continue</td><td>提前结束本次循环，忽略continue之后的所有语句，提前进入下一次循环</td></tr></tbody></table><p>1.if语句</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> condition_1<span class="token punctuation">:</span>    statement_block_1<span class="token keyword">elif</span> condition_2<span class="token punctuation">:</span>    statement_block_2<span class="token keyword">else</span><span class="token punctuation">:</span>    statement_block_3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg" alt="img"></p><p>2.while循环</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">while</span> <span class="token operator">&lt;</span>expr<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>additional_statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/886A6E10-58F1-4A9B-8640-02DBEFF0EF9A.jpg" alt="img"></p><p>3.for循环</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">for</span> <span class="token operator">&lt;</span>variable<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>sequence<span class="token operator">></span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">></span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token operator">&lt;</span>statements<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/A71EC47E-BC53-4923-8F88-B027937EE2FF.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程序设计基础与应用答案4</title>
      <link href="2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-4/"/>
      <url>2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-4/</url>
      
        <content type="html"><![CDATA[<p>每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>​        参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><p>6-2拓展本章的例6-4，为向量类增加计算内积的功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Vector3</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法，初始化，定义向量坐标</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>__y <span class="token operator">=</span> y        self<span class="token punctuation">.</span>__z <span class="token operator">=</span> z    <span class="token comment" spellcheck="true"># 两个向量相加，对应分量相加，返回新向量</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anotherPoint<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>__x <span class="token operator">+</span> anotherPoint<span class="token punctuation">.</span>__x        y <span class="token operator">=</span> self<span class="token punctuation">.</span>__y <span class="token operator">+</span> anotherPoint<span class="token punctuation">.</span>__y        z <span class="token operator">=</span> self<span class="token punctuation">.</span>__z <span class="token operator">+</span> anotherPoint<span class="token punctuation">.</span>__z        <span class="token keyword">return</span> Vector3<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 减去另一个向量，对应分量相减，返回新向量</span>    <span class="token keyword">def</span> <span class="token function">sub</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anotherPoint<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>__x <span class="token operator">-</span> anotherPoint<span class="token punctuation">.</span>__x        x <span class="token operator">=</span> self<span class="token punctuation">.</span>__y <span class="token operator">-</span> anotherPoint<span class="token punctuation">.</span>__y        x <span class="token operator">=</span> self<span class="token punctuation">.</span>__z <span class="token operator">-</span> anotherPoint<span class="token punctuation">.</span>__z    <span class="token comment" spellcheck="true"># 向量与一个数字相乘，各分量乘以同一个数字，返回新向量</span>    <span class="token keyword">def</span> <span class="token function">mul</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> self<span class="token punctuation">.</span>__x<span class="token operator">*</span>n<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__y<span class="token operator">*</span>n<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__z<span class="token operator">*</span>n        <span class="token keyword">return</span> Vector3<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 向量除以一个数字，各分量除以同一个数字，返回新向量</span>    <span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> self<span class="token punctuation">.</span>__x<span class="token operator">/</span>n<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__y<span class="token operator">/</span>n<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__z<span class="token operator">/</span>n        <span class="token keyword">return</span> Vector3<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 两个向量的内积</span>    <span class="token keyword">def</span> <span class="token function">dot</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> anotherPoint<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> self<span class="token punctuation">.</span>__x <span class="token operator">*</span> anotherPoint<span class="token punctuation">.</span>__x <span class="token operator">+</span> \                 self<span class="token punctuation">.</span>__y <span class="token operator">*</span> anotherPoint<span class="token punctuation">.</span>__y <span class="token operator">+</span> \                 self<span class="token punctuation">.</span>__z <span class="token operator">*</span> anotherPoint<span class="token punctuation">.</span>__z        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'X:{}, Y:{}, Z:{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__x<span class="token punctuation">,</span>                                        self<span class="token punctuation">.</span>__y<span class="token punctuation">,</span>                                        self<span class="token punctuation">.</span>__z<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 查看向量长度所有分量平方和的平方根</span>    @property    <span class="token keyword">def</span> <span class="token function">length</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>__y<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>__z<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">0.5</span><span class="token comment" spellcheck="true"># 用法演示</span>v <span class="token operator">=</span> Vector3<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>v1 <span class="token operator">=</span> v<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>v1<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>v2 <span class="token operator">=</span> v1<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v<span class="token punctuation">)</span>v2<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v2<span class="token punctuation">.</span>length<span class="token punctuation">)</span>v3 <span class="token operator">=</span> Vector3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6-3设计并实现一个数组类，要求能够把包含数字的列表、元组或range对象转换为数组，并能够修改数组中指定位置上的元素值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Array</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法，初始化数值</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> args<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__value <span class="token operator">=</span> list<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 修改数组中指定位置的元素值</span>    <span class="token keyword">def</span> <span class="token function">__item__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 根据下标修改元素值</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>index<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">0</span><span class="token operator">&lt;=</span>index<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"位置参数错误"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__value    <span class="token comment" spellcheck="true"># 展示修改后的列表</span>    <span class="token keyword">def</span> <span class="token function">show</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用法演示</span>lst <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lst<span class="token punctuation">.</span>__item__<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span>lst<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6-4设计并实现一个数组类，要求能够把包含数字的列表、元组或range对象转换为数组，能够使用包含整数的列表作为下标同时返回多个位置上的元素值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">class</span> <span class="token class-name">Array</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 构造方法，初始化数值</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> args<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__value <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>__value <span class="token operator">=</span> list<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取下标的元素值，支持使用列表或元组</span>    <span class="token keyword">def</span> <span class="token function">__item__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        length <span class="token operator">=</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 根据单个下标获取元素值</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>index<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> index <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 根据单个下标获取元素值</span>        <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>index<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> index<span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>i<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'位置错误'</span><span class="token punctuation">)</span>            result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> index<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>__value<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'位置错误'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用法演示</span>lst <span class="token operator">=</span> Array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lst<span class="token punctuation">.</span>__item__<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>lst<span class="token punctuation">.</span>__item__<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7-1 编写函数，接收一个字符串，返回其中最长的数字子串。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">long</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 接收字符串s，返回最长的数字子串</span>    <span class="token comment" spellcheck="true"># 一个列表储存单个数字，另一个列表储存合并后的数字</span>    lst_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    lst_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 如果这个元素是一个数字，则加入列表1</span>        <span class="token keyword">if</span> ch<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            lst_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 遇到了非数字，则将原来列表1的数字合并后放入列表2，重置列表1</span>        <span class="token keyword">elif</span> lst_1<span class="token punctuation">:</span>            lst_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lst_1<span class="token punctuation">)</span><span class="token punctuation">)</span>            lst_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> lst_1<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 此时s中的每个元素都已经访问，若lst_1还残余数字，则将最后一组数字整合进列表2</span>        lst_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lst_1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> lst_2<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 打印出最长的数字子串</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>lst_2<span class="token punctuation">,</span> key<span class="token operator">=</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 测试函数</span>long<span class="token punctuation">(</span><span class="token string">'fsgsgsh56498445sdgt781sd95447safasf415116'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7-2 编写函数，接收一句英文，把其中的单词倒置，标点符号不倒置，例如I like beijing.经过函数后变为：beijing. like I</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">sentence</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 接收英文后倒置输出</span>    <span class="token comment" spellcheck="true"># 创建一个列表来容纳每个单词</span>    lst <span class="token operator">=</span> s<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对列表的元素进行倒置并且合并</span>    lst <span class="token operator">=</span> reversed<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>    sen <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>sen<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 代码测试</span>s <span class="token operator">=</span> <span class="token string">'I like beijing.'</span>sentence<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7-3 编写函数，接收一个字符串，返回其中每个字符的最后一次出现，并按每个字符最后一次出现的先后顺序依次存入列表。例如，对于字符串‘abcda的处理结果为[‘b’, ‘c’, ‘d’, ‘a’]，而字符串’abcbda’的处理结果为[‘c’, ‘b’, ‘d’, ‘a’]。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">last</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建列表来储存处理结果</span>    lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 对列表中已经出现的移除，未出现的添加</span>        <span class="token keyword">if</span> ch <span class="token keyword">in</span> lst<span class="token punctuation">:</span>            lst<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 代码测试</span>last<span class="token punctuation">(</span><span class="token string">'abcda'</span><span class="token punctuation">)</span>last<span class="token punctuation">(</span><span class="token string">'abcbda'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8-1编写程序，使用正则表达式提取另一个Python程序中的所有函数名。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> re<span class="token comment" spellcheck="true"># 接收需要提取的文件</span>fileneme <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个Python程序的文件名或路径"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 确定函数的基本格式</span>pattern <span class="token operator">=</span> r<span class="token string">'^def(\w+?)\(.*?\):'</span>func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 打开文件提取函数名</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>fileneme<span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> fp<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 逐行进行提取函数名</span>        result <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> line<span class="token punctuation">)</span>        <span class="token keyword">if</span> result<span class="token punctuation">:</span>            func<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8-2 编写程序，使用正则表达式提取另一个Python程序中的所有变量名</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> re<span class="token comment" spellcheck="true"># 接收需要提取的文件</span>fileneme <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个Python程序的文件名或路径"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 确定变量名的所有基本格式</span>pattern <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token string">'(.+?) in'</span><span class="token punctuation">,</span>           r<span class="token string">'for (.+?) in'</span><span class="token punctuation">,</span>           r<span class="token string">'def \w+?\((.*?)\)'</span><span class="token punctuation">,</span>           r<span class="token string">' as (\w+?):'</span><span class="token punctuation">)</span>func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 打开文件提取对象名</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>fileneme<span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> fp<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将每行进行分割</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> pattern<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 对变量的每种模式进行对比确认</span>            result <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>a<span class="token punctuation">,</span> line<span class="token punctuation">)</span>            <span class="token keyword">if</span> result<span class="token punctuation">:</span>                <span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">:</span>                    func<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>item<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8-3 假设有一句英文，其中某个单词中有个不在两端的字母误写作大写，编写程序使用正则表达式进行检查和纠正为小写。注意，不要影响每个单词两端的字母。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> re<span class="token comment" spellcheck="true">#  纠正错误的单词</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 返回出问题的单词</span>    <span class="token keyword">return</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">'\b(\w)(\w+)(\w)\b'</span><span class="token punctuation">,</span>                  <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  s<span class="token punctuation">)</span>text <span class="token operator">=</span> check<span class="token punctuation">(</span><span class="token string">'BeauTIful Is beTTer tHAN UGLY'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python程序设计基础与应用答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程序设计基础与应用答案3</title>
      <link href="2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-3/"/>
      <url>2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-3/</url>
      
        <content type="html"><![CDATA[<p>每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>​        参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>5-1 编写函数，接收圆的半径作为参数，返回圆的面积。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> math<span class="token keyword">def</span> <span class="token function">areas</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 接收圆的半径r，返回圆的面积</span>    area <span class="token operator">=</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> r <span class="token operator">*</span> r    <span class="token keyword">print</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span>areas<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-2 编写函数，实现辗转相除法，接受两个整数，返回这两个整数的最大公约数</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 筛选出a与b的较大数与较小数</span>    m <span class="token operator">=</span> max<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    n <span class="token operator">=</span> min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    r <span class="token operator">=</span> m <span class="token operator">%</span> n    <span class="token comment" spellcheck="true"># 用辗转相除法求最大公约数</span>    <span class="token keyword">while</span> r <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> n        n <span class="token operator">=</span> r        r <span class="token operator">=</span> m <span class="token operator">%</span> n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{0}与{1}的最大公约数为{2}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-3 编写函数，接收参数a和n，计算并返回形式如a+aa+aaa+aaaa+···+aaa···aaa的表达式前项的值，其中a为小于10的自然数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 计算a+aa+aaa+...+aaa...aaa的前n项值(其中a小于10）</span>    <span class="token keyword">if</span> a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入小于10的自然数"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 计算前n项值</span>        result <span class="token operator">=</span> <span class="token number">0</span>        b <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token operator">*</span><span class="token number">10</span>            result <span class="token operator">+=</span> b    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-4 编写函数，接受一个字符串，判断该字符串是否为回文。所谓回文是指，从前向后读和从后向前读是一样的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 倒序进行对比</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是回文。"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这不是回文。"</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token string">"computer"</span><span class="token punctuation">)</span>demo<span class="token punctuation">(</span><span class="token string">"abcba"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-5 编写函数，模拟标准库itertools中的cycle（）函数的功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">cycle</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 生成器依次生成每个字母</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> a<span class="token punctuation">:</span>            <span class="token keyword">yield</span> itemb <span class="token operator">=</span> cycle<span class="token punctuation">(</span><span class="token string">"computer"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 这里重复16次，即打印2次computer</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>next<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-6 编写函数，模拟标准库itertools中count（）函数的功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写自定义的count（）函数</span>    b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> b<span class="token punctuation">:</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> b<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'的个数为：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>count<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-7 编写函数，模拟内置函数reversed()的功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">count</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 编写自定义的count（）函数</span>    b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">not</span> <span class="token keyword">in</span> b<span class="token punctuation">:</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> b<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'的个数为：'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>count<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-8 编写函数，模拟内置函数all()的功能</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">all</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 模拟函数all（）</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> i<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token comment" spellcheck="true"># 举两个例子测试</span>example_1 <span class="token operator">=</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>example_1<span class="token punctuation">)</span>example_2 <span class="token operator">=</span> all<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>example_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5-9 编写函数，模拟内置函数any（）的功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">def</span> <span class="token function">any</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 模拟函数any（）</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 举两个例子测试</span>example_1 <span class="token operator">=</span> any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>example_1<span class="token punctuation">)</span>example_2 <span class="token operator">=</span> any<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>example_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python程序设计基础与应用答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程序设计基础与应用答案1</title>
      <link href="2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-1/"/>
      <url>2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-1/</url>
      
        <content type="html"><![CDATA[<p>每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>​        参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>3-13编写程序，让用户在键盘上输入一个自然数n，然后在区间【1，5n】上随机生成n个不重复的自然数，输出这些自然数，然后继续编写代码对这些自然数进行处理，只保留所有偶数，并输出这些偶数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 让用户输入自然数n</span>n <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter a nature number 'n':"</span><span class="token punctuation">)</span>n <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成n个不重复的随机数</span>date <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建列表并储存偶数</span>dates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> d <span class="token keyword">in</span> date<span class="token punctuation">:</span>    <span class="token keyword">if</span> d <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        dates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dates<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-14编写程序，生成包含20个随机数的列表，然后将前10个元素升序排列，后10个元素降序排列，并输出结果。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 生成两个空列表用于储存前10个数与后10个数</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将前10个数升序排列并贮存在列表1中</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    date <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>date<span class="token punctuation">)</span>list_1<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将后10个数降序排列并贮存在列表2中</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    date <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>    list_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>date<span class="token punctuation">)</span>list_2<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>list_2<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将列表1与列表2合并并打印出来</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1 <span class="token operator">+</span> list_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-15编写程序，让用户在键盘上输入一个包含若干整数的列表，输出翻转后的列表。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can enter 'q' to end!"</span><span class="token punctuation">)</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将用户输入的数生成列表</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter a number:"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将列表元素顺序颠倒</span>numbers<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-16阿凡提与国王比赛下棋，国王说要是自己输了的话阿凡提想要什么他都可以拿得出来。阿凡提说那就要点米吧，棋盘一共64个小格子，在第一个格子里放1粒米，第二个格子里放2粒米，第三个格子里放4粒米，第四个格子里放8粒米，以此类推，后面每个格子里的米都是前一个格子里的2倍，一直把64个格子都放满。需要多少粒米呢？要求使用列表推导式和内置函数进行计算。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>number <span class="token operator">=</span> sum<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4-1编写程序，使用筛选法求解小于n的所有素数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 这个题不是很懂，参考了答案</span>maxNumber <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入一个自然数：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lst <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> maxNumber<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示出最大整数的平方根</span>m <span class="token operator">=</span> int<span class="token punctuation">(</span>maxNumber<span class="token operator">**</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> value <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> value <span class="token operator">></span> m<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># 对此位置之后的元素进行过滤</span>    lst<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">%</span> value <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-2编写程序，计算小于1000的所有整数中能够同时被5和7整除的最大整数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 将符合条件的数贮存在列表中</span>number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> i <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        number<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-3编写程序，要求用户输入一些数字，输出这些数字中只出现过依次的那些数字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 将用户输入的所有数写入列表</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你随时可以按‘q’取消循环。"</span><span class="token punctuation">)</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个数字："</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将只出现依次的数打印出来</span><span class="token keyword">for</span> number <span class="token keyword">in</span> numbers<span class="token punctuation">:</span>    <span class="token keyword">if</span> numbers<span class="token punctuation">.</span>count<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-4编写程序，要求用户输入一些数字，输出这些数字中只出现过一次的那些数字。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你随时可以按‘q’取消循环。"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将用户输入的所有数写入列表</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入一个数字："</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        numbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 将列表改造为集合</span>numbers_1 <span class="token operator">=</span> set<span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>numbers_1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>未完待续……</p>]]></content>
      
      
      <categories>
          
          <category> Python程序设计基础与应用答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程序设计基础与应用答案2</title>
      <link href="2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-2/"/>
      <url>2020/07/12/python-cheng-xu-she-ji-ji-chu-yu-ying-yong-da-an-2/</url>
      
        <content type="html"><![CDATA[<p>每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>​        参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>4-5编写程序，实现抓狐狸游戏。假设墙上有5个洞（编号分别为0、1、2、3、4），其中一个洞里由狐狸，人类玩家输入洞口编号，如果洞里有狐狸就抓到了；如果洞里没有狐狸就第二天再来抓。但在第二天人类玩家来抓之前，狐狸会跳到隔壁的洞里。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 设置5个洞，随机把狐狸放进其中一个洞</span>caves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>fox <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>caves<span class="token punctuation">[</span>fox<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> flag<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 让用户选择要探索的洞</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"输入回车即可退出游戏。"</span><span class="token punctuation">)</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请选择一个洞口（1-5号洞里选择）:"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用户随时可以结束游戏</span>    <span class="token keyword">if</span> number <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># 提示用户要输入正确的数字</span>    <span class="token keyword">elif</span> int<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span> <span class="token operator">or</span> int<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        number <span class="token operator">=</span> int<span class="token punctuation">(</span>number<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"请输入1-5之间的数字"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 如果猜对了就抓到狐狸，否者狐狸将换洞</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> caves<span class="token punctuation">[</span>int<span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"恭喜你捉到了狐狸,游戏结束。"</span><span class="token punctuation">)</span>            flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你没有捉到狐狸，请明天再来"</span><span class="token punctuation">)</span>            caves<span class="token punctuation">[</span>fox<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            number <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            new_fox <span class="token operator">=</span> fox <span class="token operator">+</span> number            caves<span class="token punctuation">[</span>new_fox<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-6编写程序，生成一个包含20个介于1到50之间随机整数的列表，然后使用插入法对给定整数列表中的所有元素升序排列。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 列表1用存储20个随机数，然后用插入法将列表1的元素插入列表2</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 生成20个随机数存在列表1中</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span>    list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 依次将列表的最小值移到列表2的末端，移动的数从列表1中清楚</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> min<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span>    list_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    list_1<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-7编写程序，生成一个包含20个介于1到50之间随机整数的列表，将其循环左移5个元素。所谓循环左移是指，每次移动把列表最左侧的元素移出列表然后追加到列表尾部。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> randomlist_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 生成20个随机数存在列表1中</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span>    list_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> list_1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-8给定一个包含若干数字的列表A，编写程序计算满足0&lt;=a&lt;=b&lt;n（其中n为序列长度）的A[b]-A[a]的最大值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">import</span> random<span class="token comment" spellcheck="true"># 生成含有10个随机数的列表</span>list_1 <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建用于储存结果的列表</span>list_2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 计算A【b】- A【a】</span><span class="token keyword">for</span> index_a<span class="token punctuation">,</span> a <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list_1<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> index_b<span class="token punctuation">,</span> b <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>list_1<span class="token punctuation">[</span>index_a <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> b <span class="token operator">-</span> a        list_2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>list_2<span class="token punctuation">)</span>max_result <span class="token operator">=</span> max<span class="token punctuation">(</span>list_2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>max_result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-9 6岁的小明上楼梯，一步只能迈1个或3个台阶，现在有段15个台阶的楼梯，要想上到第15个台阶，编写程序计算小明有多少种上发。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token comment" spellcheck="true"># 参考了标准答案，关键在于弄清楚数学公式</span>n <span class="token operator">=</span> <span class="token number">15</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>c <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c    b <span class="token operator">=</span> c    a <span class="token operator">=</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-13 编写程序，让用户输入一个整数，如果输入的是正数就输出1，如果输入的是负数就输出-1，否则输出0.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>number <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个整数:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 不同的数返回不同的值</span><span class="token keyword">if</span> number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">elif</span> number <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python程序设计基础与应用答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法1</title>
      <link href="2020/07/12/python-ji-chu-yu-fa-1/"/>
      <url>2020/07/12/python-ji-chu-yu-fa-1/</url>
      
        <content type="html"><![CDATA[<p>参考教材：Python程序设计基础与应用(机械工业出版社/董付国)</p><p>​        本复习资料中语法出现顺序与参考教材保持一致，为巩固记忆，全程手打，没有复制粘贴。（因此可能会出现错别字请见谅）</p><p>由于内容过多，将逐步发布。</p><h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>1.标准库与拓展库中对象的导入与使用(按照标准库，拓展库和自定义库的顺序依次导入)</p><table><thead><tr><th># import 模块名 [as 别名]</th><th align="left">导入后用“模块名.对象名”，或者”别名.对象名”进行访问</th></tr></thead><tbody><tr><td># from 模块名 import 对象名[as 别名]</td><td align="left">不需要使用模块名作为前缀，可以直接访问被指定的对象</td></tr><tr><td># from 模块名 import *</td><td align="left">直接使用模块中的所有对象而不需要再使用模块名作为前缀</td></tr></tbody></table><ol start="2"><li>__name__：识别程序的使用方式，如果作为模块被导入，属性值被设置为模块名；如果作为程序直接运行，则其属性值被设置为字符串”__main__”。</li></ol><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><p>1.Python内置对象</p><table><thead><tr><th>对象类型</th><th>类型名称</th><th align="left">说明</th></tr></thead><tbody><tr><td>数字</td><td>int<br />float<br />complex</td><td align="left">int为整数类型<br />float为浮点数类型<br />complex为复数类型<br />数字大小无限制，有二进制（0b开头）；八进制（0o开头）；十六进制（0x开头）。</td></tr><tr><td>字符串</td><td>str</td><td align="left">使用单引号，双引号，三引号作为定界符，不同定界符之间可以相互嵌套；使用字母r（R）引导的表示原始字符串</td></tr><tr><td>字节串</td><td>bytes</td><td align="left">以字母b引导</td></tr><tr><td>列表</td><td>list</td><td align="left">所有元素放在一对中括号中，元素之间使用逗号分隔，其中的元素可以是任意类型。</td></tr><tr><td>元组</td><td>tuple</td><td align="left">所有元素放在一对小括号中，元素之间使用逗号分隔，如果元组中只有一个元素，后面的逗号不能省略。</td></tr><tr><td>字典</td><td>dict</td><td align="left">所有元素放在一对大括号中，元素之间使用逗号分隔，元素以键值对的形式存在，其中键不可以重复，并且键必须不可变。</td></tr><tr><td>集合</td><td>set</td><td align="left">所有元素放在一对大括号中，元素之间使用逗号分隔，元素不允许重复且必须为不可变类型，不支持使用下标随机访问。</td></tr><tr><td>布尔型</td><td>bool</td><td align="left">有True与False，为逻辑值。</td></tr><tr><td>空类型</td><td>NoneType</td><td align="left">为None，为空值。</td></tr></tbody></table><p>2.python运算符</p><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>算术加法，列表，元组，字符串合并与连接，正号</td></tr><tr><td>-</td><td>算术减法，集合差集，相反数</td></tr><tr><td>*</td><td>算术乘法，序列重复</td></tr><tr><td>/</td><td>真除法</td></tr><tr><td>//</td><td>求整商，但如果操作数中有实数，则结果为实数形式的整数</td></tr><tr><td>%</td><td>求余数，字符串格式化</td></tr><tr><td>**</td><td>幂运算</td></tr><tr><td>&lt;、 &lt;=、&gt;、&gt;=、==、!=</td><td>（值）的大小比较，集合的包含关系比较</td></tr><tr><td>or</td><td>逻辑或</td></tr><tr><td>and</td><td>逻辑与</td></tr><tr><td>not</td><td>逻辑非</td></tr><tr><td>in</td><td>成员测试</td></tr><tr><td>is</td><td>对象实体同一性测试，即测试是否为同一对象或内存地址是否相同</td></tr><tr><td>|、^、 &amp;、 &lt;&lt;、&gt;&gt;、~</td><td>位或，位异或，位与，左移位，右移位，位求反</td></tr><tr><td>&amp;、|、 ^</td><td>集合交集，并集，对称差集</td></tr></tbody></table><p>（还有赋值运算符（=、 +=、-=、<em>=、/=、//=、*</em>=、|=、^=等运算符，但是Python不支持++和- -运算符）</p><p>3.Python常用的内置函数</p><table><thead><tr><th>函数</th><th>功能说明</th></tr></thead><tbody><tr><td>abs(x)</td><td>返回数字x的绝对值或复数x的模块</td></tr><tr><td>all(iterable)</td><td>如果对于可迭代对象iterable中所有元素都等价于True，则返回True。对于空的可迭代对象也要返回True</td></tr><tr><td>any(iterable)</td><td>只要可迭代对象iterable中存在等价于True的元素，则返回True。对于空的可迭代对象，则返回False</td></tr><tr><td>bin(x)</td><td>把整数x转换为二进制串表示形式</td></tr><tr><td>complex(real,[imag])</td><td>返回复数</td></tr><tr><td>chr(x)</td><td>返回Unicode编码为x的字符</td></tr><tr><td>dir(obj)</td><td>返回指定对象或模块obj的成员列表，如果不带参数则返回当前作用域内的所有标识符</td></tr><tr><td>divmod(x,y)</td><td>返回包含整商和余数的元组（（x-x%y）/y，x%y）</td></tr><tr><td>enumerate(iterable[, start])</td><td>返回包含元素形式为（0，iterable[0]),(1, iterable[1]),(2,iterable[2])等的迭代器对象，start表示索引的起始值。</td></tr><tr><td>eval(s[,globals[,locals]])</td><td>计算并返回字符串s中表达式的值</td></tr><tr><td>filter(func, seq)</td><td>返回filter对象，其中包含序列seq中使得单参数func返回值为True的那些元素，如果函数func为None则返回包含seq中等价于True的元素filter对象</td></tr><tr><td>float(x)</td><td>把整数或字符串x转换为浮点数并返回</td></tr><tr><td>globals()</td><td>返回包含当前作用域内全局变量及其值的字典</td></tr><tr><td>help(obj)</td><td>返回对象obj的帮助信息</td></tr><tr><td>hex(x)</td><td>把整数x转换为十六进制串</td></tr><tr><td>id(obj)</td><td>返回对象obj的表示（内存地址）</td></tr><tr><td>input([提示])</td><td>显示提示，接收键盘输入的内容，返回字符串</td></tr><tr><td>int(x,[,d])</td><td>返回实数（float)、分数（Fraction)、或高精度实数（Decimal）x的整数部分，或把d进制的字符串x转换为十进制并返回，d默认为十进制。</td></tr><tr><td>isinstance(obj,class-or-type-or-tuple)</td><td>测试对象obj是否属于指定类型（如果有多个类型需要放到元组中）的实例</td></tr><tr><td>len(obj)</td><td>返回对象obj包含的元素个数，适用于列表、元组、集合、字典、字符串以及range对象，不适合用于具有惰性求值特点的生成器对象和map、zip迭代对象</td></tr><tr><td>list([x])、set([x])<br />tuple([x])、dict([x])</td><td>把对象x转化为列表、集合、元组或字典并返回，或生成空列表、空集合、空元组、空字典</td></tr><tr><td>locals()</td><td>返回包含当前作用域内局部变量及值的字典</td></tr><tr><td>map(func, *iterables)</td><td>返回包含若干函数值的map对象，函数func的参数分别来自于iterables指定的一个或多个迭代对象</td></tr><tr><td>max(<strong><em>)、min(</em></strong>)</td><td>返回多个值中或者包含有限个元素的可迭代对象中所有元素的最大值、最小值，要求所有元素之间可比较大小，允许指定排序规则，参数为可迭代对象时还允许指定对象为空时返回的默认值</td></tr><tr><td>next(iterator[,default])</td><td>返回可迭代对象x中的下一个元素，允许指定迭代结束之后继续迭代时返回的默认值</td></tr><tr><td>oct(x)</td><td>把整数x转换为八进制串</td></tr><tr><td>open(name[,mode])</td><td>以指定模式mode打开文件name并返回文件对象</td></tr><tr><td>ord(x)</td><td>返回1个字符x的Unicode编码</td></tr><tr><td>print(value, <em>*</em>, sep= ‘ ’，end = ‘\n’, file = sys.stdout, flush = False)</td><td>输出基本函数</td></tr><tr><td>range([start,] end [,step])</td><td>返回range对象，其中包含左闭右开区间[start，end]内以step为步长的整数</td></tr><tr><td>reduce(func, seq[, initial])</td><td>将双参数的函数func以迭代的方式从左到右依次应用到序列seq中每个元素，并把中间计算结果作为下一次计算的操作数之一，最终返回单个值作为结果</td></tr><tr><td>reversed(seq)</td><td>返回seq（可以是列表、元组、字符串、range以及其他可迭代对象）中所有元素逆序后的迭代器对象，但不适用于具有惰性求值特点的生成器对象和map、zip等可迭代对象</td></tr><tr><td>round(x[,小数位数])</td><td>对x进行四舍五入，若不指定小数位数，则返回整数</td></tr><tr><td>sorted(iterable, key=None, reverse=False)</td><td>返回排序后的列表，其中iterable表示要排序的序列或迭代对象，key用来指定排序规则或依据，reverse用来指定升序或降序</td></tr><tr><td>str(obj)</td><td>把对象obj直接转换为字符串</td></tr><tr><td>sum(x, start=0)</td><td>返回序列x中所有元素之和，要求序列x中所有元素支持加法运算</td></tr><tr><td>type(obj)</td><td>返回对象obj的类型</td></tr><tr><td>zip(seq1 [, seq2[<em>*</em>]])</td><td>返回zip对象，其中元素为(seq1[i], seq2[i],<em>*</em>)形式的元组最终结果中包含的元素个数取决于所有参数序列或可迭代对象中最短的那个</td></tr></tbody></table><p>4.Python关键词(不能用做变量名，函数名，类名)</p><table><thead><tr><th>关键字</th><th>含义</th></tr></thead><tbody><tr><td>False</td><td>常量，逻辑假</td></tr><tr><td>None</td><td>常量，空值</td></tr><tr><td>True</td><td>常量，逻辑真</td></tr><tr><td>and</td><td>逻辑与运算</td></tr><tr><td>as</td><td>在import或except语句中给对象起别名</td></tr><tr><td>assert</td><td>断言，用来确认某个条件必须满足，可用来帮助调试程序</td></tr><tr><td>break</td><td>在用循环中，提前结束break所在层次的循环</td></tr><tr><td>class</td><td>用来定义类</td></tr><tr><td>continue</td><td>在用循环中，提前结束本次循环</td></tr><tr><td>def</td><td>用来定义函数</td></tr><tr><td>del</td><td>用来删除对象或成员对象</td></tr><tr><td>elif</td><td>用在选择结构中，表示else if的意思</td></tr><tr><td>else</td><td>用在选择结构、循环结构和异常处理结构中</td></tr><tr><td>except</td><td>用在异常处理结构中，用来捕获特定类型的异常</td></tr><tr><td>finally</td><td>用在异常处理结构中，用来表示不论是否发生异常都会执行的代码</td></tr><tr><td>for</td><td>构造for循环，用来迭代序列或迭代对象中的所有元素</td></tr><tr><td>from</td><td>明确指出从哪个模块中导入什么对象，例如from math import sin</td></tr><tr><td>global</td><td>定义或声明全局变量</td></tr><tr><td>if</td><td>用在选择结构中</td></tr><tr><td>import</td><td>用来导入模块或模块中的对象</td></tr><tr><td>in</td><td>成员测试</td></tr><tr><td>is</td><td>同一性测试</td></tr><tr><td>lambda</td><td>用来定义lambda表达式，类似于函数</td></tr><tr><td>nonlocal</td><td>用来声明nonlocal变量</td></tr><tr><td>not</td><td>逻辑非运算</td></tr><tr><td>or</td><td>逻辑或运算</td></tr><tr><td>pass</td><td>空语句，执行该语句时什么都不做，常用作占位符</td></tr><tr><td>raise</td><td>用来显式抛出异常</td></tr><tr><td>return</td><td>在函数中用来返回值，如果没有指定返回值，表示返回空值None</td></tr><tr><td>try</td><td>在异常处理结构中用来限定可能会引发异常的代码块</td></tr><tr><td>while</td><td>用来构造while循环结构，只要条件表达式等价于True就重复执行限定的代码块</td></tr><tr><td>with</td><td>上下文管理，具有自动管理资源的功能</td></tr><tr><td>yield</td><td>在生成器函数中用来返回值</td></tr></tbody></table><p>title: Python基础语法1<br>categories: Python基础语法</p>]]></content>
      
      
      <categories>
          
          <category> Python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python编程从入门到实践答案6</title>
      <link href="2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-6/"/>
      <url>2020/07/12/python-bian-cheng-cong-ru-men-dao-shi-jian-da-an-6/</url>
      
        <content type="html"><![CDATA[<p>这本书是我自学Python的第一本书，里面的习题都在寒假已经完成，由于当时博客尚未搭建，故里面题目的答案并未发表。现在在开发项目博客没有新内容更新，因此这段实践会陆续上传原来的习题答案。每个题目均为自己设计的代码，优化与重构方面与标准答案可能有所不同。</p><p>参考教材：《Python编程从入门到实践》  【美】  Eric Matthes  著 </p><h1 id="Chapter7"><a href="#Chapter7" class="headerlink" title="Chapter7"></a>Chapter7</h1><p><strong>7-1 汽车租赁：</strong>编写一个程序，询问用户要租赁什么样的汽车，并打印一条消息，如“Let me see if I can find you a Subaru”。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>car <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Hello,what type car is you want to have? "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Let me see if I can find you a "</span> <span class="token operator">+</span> car <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>7-2 餐厅订位L:</strong>编写一个程序，询问用户有多少人用餐。如果超过8人，就打印一条消息，指出没有空桌；否则指出有空桌。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"How many people are in your dinner party tonight? "</span><span class="token punctuation">)</span>number <span class="token operator">=</span> int<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">if</span> number <span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm sorry, you'll have to wait for a table."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Your table is ready."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-3 10的整数倍：</strong>让用户输入一个数字，并指出这个数字是否是10的整数倍。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter a number,and I'll tell you if it's a multiple of 10. "</span><span class="token punctuation">)</span>number <span class="token operator">=</span> int<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token keyword">if</span> number <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It's a multiple of 10."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"It is't a multiple of 10."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-4 比萨配料：</strong>编写一个循环，提示用户输入一系列的比萨配料，并在用户输入’quit’时结束循环。每当用户输入一种配料后，都打印一条消息，说我们会在比萨中添加这种配料。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>prompt <span class="token operator">=</span> <span class="token string">"\nPlease enter the toppings that you want to have."</span>prompt <span class="token operator">+=</span> <span class="token string">"\nAnd if you enter 'quit',we will finished. "</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    topping <span class="token operator">=</span> input<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token keyword">if</span> topping <span class="token operator">!=</span> <span class="token string">'quit'</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'll add "</span> <span class="token operator">+</span> topping <span class="token operator">+</span> <span class="token string">" to your pizza."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-5 电影票：</strong>有家电影院根据观众的年龄收取不同的票价；不到3岁的观众免费；3~12岁的观众为10美元；超过12岁的观众为15美元。请编写一个循环，在其中询问用户的年龄，并指出其票价。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>prompt <span class="token operator">=</span> <span class="token string">"How old are you?"</span>prompt <span class="token operator">+=</span> <span class="token string">"\nEnter 'quit' when you are finished. "</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    age <span class="token operator">=</span> input<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token keyword">if</span> age <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    age <span class="token operator">=</span> int<span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You get in free!"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Your ticket is $10."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Your ticket is $15."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-6 三个入口：</strong>以另一种方式完成练习7-4或练习7-5，在程序中采取如下所有做法。</p><p>□ 在while循环中使用条件测试来结束循环。</p><p>□ 使用变量active来控制循环结束的时机。</p><p>□ 使用break语句在用户输入‘quit’时退出循环。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>prompt <span class="token operator">=</span> <span class="token string">"How old are you?"</span>prompt <span class="token operator">+=</span> <span class="token string">"\nEnter 'quit' when you are finished. "</span>active <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> active<span class="token punctuation">:</span>    age <span class="token operator">=</span> input<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>    <span class="token keyword">if</span> age <span class="token operator">==</span> <span class="token string">"quit"</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    age <span class="token operator">=</span> int<span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You get in free!"</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">13</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Your ticket is $10."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Your ticket is $15."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-7 无限循环：</strong>编写一个没完没了的循环，并运行它（要结束该循环，可按Ctrl+C，也可关闭显示输出的窗口）。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    number <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Please enter a number!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-8 熟食店：</strong>创建一个名为sandwich_orders的列表，在其中包含各种三明治的名字；再创建一个名为finished_sandwich的空列表，遍历列表sandwich_orders，对于其中的每种三明治，都打印一条消息，如I made your tuna sandwich，并将其移到列表finished_sandwich。所有三明治都制作好后，打印一条消息，将这些三明治列出来。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>sandwich_orders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'meat'</span><span class="token punctuation">,</span> <span class="token string">'eggplant'</span><span class="token punctuation">,</span> <span class="token string">'fruit'</span><span class="token punctuation">]</span>finished_sandwiches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> sandwich_orders<span class="token punctuation">:</span>    current_sandwich <span class="token operator">=</span> sandwich_orders<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I made your "</span> <span class="token operator">+</span> current_sandwich <span class="token operator">+</span> <span class="token string">" sandwich."</span><span class="token punctuation">)</span>    finished_sandwiches<span class="token punctuation">.</span>append<span class="token punctuation">(</span>current_sandwich<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nThe following sandwich have been finished"</span><span class="token punctuation">)</span><span class="token keyword">for</span> finished_sandwiched <span class="token keyword">in</span> finished_sandwiches<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>finished_sandwiched<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-9 五项烟熏牛肉（pastrami）卖完了：</strong>使用为练习7-8而创建的列表sandwich_orders，并确保’pastrami’在其中至少出现了三次。在程序开头附近添加这样的代码；打印一条消息，指出熟食店的五香烟熏牛肉卖完了；再使用一个while循环将列表sandwich_orders中的’pastrami’都删除。确保最终的列表finished_sandwiches中不包含’pastrami’。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>sandwich_orders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'meat'</span><span class="token punctuation">,</span> <span class="token string">'pastrami'</span><span class="token punctuation">,</span> <span class="token string">'eggplant'</span><span class="token punctuation">,</span> <span class="token string">'pastrami'</span><span class="token punctuation">,</span> <span class="token string">'fruit'</span><span class="token punctuation">,</span> <span class="token string">'pastrami'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sorry,pastrami has been sold."</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token string">'pastrami'</span> <span class="token keyword">in</span> sandwich_orders<span class="token punctuation">:</span>    sandwich_orders<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'pastrami'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sandwich_orders<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7-10 梦想的度假胜地：</strong>编写一个程序，调查用户梦想的度假胜地。使用类似于’If you could visit one place in the world，where would you go？’的提示，并编写一个打印调查结果的代码块。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span>responses <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 先设置一个标记</span>active <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">while</span> active<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 先采集用户的姓名</span>    name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"What is your name! "</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"which places would you like to visit in the world. "</span><span class="token punctuation">)</span>    responses<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> response    repeat <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"Would you like to let another person respond?(yes/no)"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> repeat <span class="token operator">==</span> <span class="token string">'no'</span><span class="token punctuation">:</span>        active <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true"># 展示采集的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n--- Poll Results ---"</span><span class="token punctuation">)</span><span class="token keyword">for</span> name<span class="token punctuation">,</span>response <span class="token keyword">in</span> responses<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" want to visit "</span> <span class="token operator">+</span> response <span class="token operator">+</span> <span class="token string">"."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python编程从入门到实践答案 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 习题答案 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
